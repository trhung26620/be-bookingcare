{"version":3,"sources":["utils/constant.js","utils/CommonUtils.js","utils/KeyCodeUtils.js","utils/LanguageUtils.js","assets/specialty/co-xuong-khop.jpg","containers/HomePage/Section/Specialty.js","containers/HomePage/Section/MedicalFacility.js","containers/HomePage/Section/HandBook.js","containers/HomePage/Section/About.js","containers/HomePage/HomeFooter.js","containers/HomePage/HomePage.js","axios.js","services/auth-header.js","services/userService.js","store/actions/actionTypes.js","../node_modules/typescript/lib sync","containers/System/Admin/UserRedux.js","containers/System/Admin/TableManageUser.js","containers/HomePage/Section/OutStandingDoctor.js","store/actions/appActions.js","store/actions/userActions.js","store/actions/adminActions.js","store/reducers/appReducer.js","store/reducers/adminReducer.js","store/reducers/userReducer.js","store/reducers/rootReducer.js","redux.js","hoc/authentication.js","routes/Home.js","containers/Auth/Login.js","containers/Auth/Test.js","utils/emitter.js","containers/System/ModalUser.js","containers/System/ModalEditUser.js","containers/System/UserManage.js","components/Navigator.js","containers/Header/menuApp.js","containers/Header/Header.js","containers/System/Admin/ManageDoctor.js","containers/System/Specialty/ManageSpecialty.js","containers/System/Clinic/ManageClinic.js","containers/System/ManageWallet.js","routes/System.js","containers/Patient/Doctor/ProfileDoctor.js","components/Input/DatePicker.js","containers/Patient/Doctor/Modal/BookingModal.js","containers/Patient/Doctor/DoctorSchedule.js","containers/Patient/Doctor/DoctorExtraInfor.js","containers/Patient/Doctor/Test.js","containers/Patient/SocialPlugin/LikeAndShare.js","containers/Patient/SocialPlugin/Comment.js","components/LiveChat.js","containers/Patient/Doctor/DetailDoctor.js","containers/System/Doctor/ManageSchedule.js","containers/System/Doctor/RemedyModal.js","containers/System/Doctor/ManagePatient.js","containers/System/Doctor/ManageChat.js","routes/Doctor.js","hoc/IntlProviderWrapper.js","containers/Patient/Payment.js","containers/Patient/VerifyEmail.js","containers/Patient/Specialty/DetailSpecialty.js","containers/Patient/Clinic/DetailClinic.js","containers/App.js","serviceWorker.js","index.js","assets/logo.svg","containers/HomePage/HomeHeader.js","components/CustomToast.js","components/CustomScrollbars.js"],"names":["path","HOME","HOMEPAGE","LOGIN","LOG_OUT","SYSTEM","DETAIL_DOCTOR","VERIFY_EMAIL_BOOKING","DETAIL_SPECIALTY","DETAIL_CLINIC","PAYMENT","LANGUAGES","VI","EN","CRUD_ACTIONS","CREATE","EDIT","DELETE","READ","USER_ROLE","ADMIN","DOCTOR","PATIENT","CommonUtils","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","readAsArrayBuffer","KeyCodeUtils","e","UP","DOWN","TAB","ENTER","E","ESCAPE","flattenMessages","nestedMessages","prefix","Object","keys","reduce","messages","key","value","prefixedKey","assign","messages_vi","messages_en","LanguageUtils","lang","Specialty","props","handleViewDetailSpecialty","item","history","push","id","state","dataSpecialty","a","getAllSpecialty","res","errCode","this","setState","data","className","settings","length","map","index","onClick","style","backgroundImage","image","name","Component","withRouter","connect","isLoggedIn","user","language","app","dispatch","MedicalFacility","handleViewDetailClinic","clinic","dataClinics","getAllClinic","HandBook","About","width","height","src","title","frameBorder","allow","allowFullScreen","HomeFooter","target","href","HomePage","dots","infinite","speed","slidesToShow","slidesToScroll","HomeHeader","isShowBanner","OutStandingDoctor","instance","axios","create","baseURL","process","withCredentials","interceptors","response","use","authHeader","accessToken","localStorage","getItem","handleLoginApi","userEmail","userPassword","post","email","password","getAllUsers","inputId","get","headers","createNewUserService","deleteUserService","userId","delete","editUserService","inputData","put","getAllCodeService","getTopDoctorHomeService","limit","getAllDoctors","saveDetailDoctorService","getDetailInforDoctor","saveBulkScheduleDoctor","console","log","getScheduleDoctorByDate","doctorId","date","getExtraInforDoctorById","getProfileDoctorById","postPatientBookingAppointment","postVerifyBookAppointment","createNewSpecialty","getDetailSpecialtyById","location","createNewClinic","getDetailClinicById","getAllPatientForDoctor","postSendRemedy","getDetailBillByToken","token","getContractAbi","initBill","verifyPayment","actionTypes","freeze","APP_START_UP_COMPLETE","SET_CONTENT_OF_CONFIRM_MODAL","CHANGE_LANGUAGE","ADD_USER_SUCCESS","USER_LOGIN_SUCCESS","USER_LOGIN_FALL","PROCESS_LOGOUT","FETCH_GENDER_START","FETCH_GENDER_SUCCESS","FETCH_GENDER_FAILED","FETCH_POSITION_SUCCESS","FETCH_POSITION_FAILED","FETCH_ROLE_SUCCESS","FETCH_ROLE_FAILED","CREATE_USER_SUCCESS","CREATE_USER_FAILED","EDIT_USER_SUCCESS","EDIT_USER_FAILED","DELETE_USER_SUCCESS","DELETE_USER_FAILED","FETCH_ALL_USERS_SUCCESS","FETCH_ALL_USERS_FAILED","FETCH_TOP_DOCTORS_SUCCESS","FETCH_TOP_DOCTORS_FAILED","FETCH_ALL_DOCTORS_SUCCESS","FETCH_ALL_DOCTORS_FAILED","FETCH_SAVE_DETAIL_DOCTOR_SUCCESS","FETCH_SAVE_DETAIL_DOCTOR_FAILED","FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS","FETCH_ALLCODE_SCHEDULE_TIME_FAILED","FETCH_REQUIRED_DOCTOR_INFOR_START","FETCH_REQUIRED_DOCTOR_INFOR_SUCCESS","FETCH_REQUIRED_DOCTOR_INFOR_FAILED","webpackEmptyContext","req","Error","code","module","exports","UserRedux","handleOnchangeImage","event","files","getBase64","base64","objectUrl","URL","createObjectURL","previewImageURL","avatar","openPreviewImage","isOpen","handleSaveUser","checkValidateInput","action","createNewUser","firstName","lastName","address","phonenumber","phoneNumber","gender","roleId","role","positionId","position","walletAddress","editAUserRedux","userEditId","isValid","arrCheck","i","alert","onChangeInput","copyState","handleEditUserFromParent","imageBase64","Buffer","from","toString","genderArr","roleArr","positionArr","getGenderStart","getPositionStart","getRoleStart","prevProps","preState","snapshot","genderRedux","arrGenders","keyMap","roleRedux","arrRoles","positionRedux","listUsers","genders","roles","positions","isGetGenders","isLoadingGender","type","onChange","disabled","valueVi","valueEn","hidden","htmlFor","handleEditUserFromParentKey","mainSrc","onCloseRequest","admin","users","actions","fetchUserRedux","mdParser","MarkdownIt","handleEditorChange","html","text","TableManageUser","handleDeleteUser","deleteAUser","handleEditUser","usersRedux","arrUsers","Fragment","renderHTML","render","handleViewDetailDoctor","doctor","arrDoctors","loadTopDoctors","prevState","topDoctorsRedux","nameVi","positionData","nameEn","topDoctors","changeLanguageApp","languageInput","userLoginSuccess","userInfo","processLogout","fetchGenderStart","getState","fetchGenderSuccess","fetchGenderFailed","genderData","fetchPositionFailed","fetchRoleFailed","fetchPositionStart","fetchRoleStart","roleData","toast","success","saveUserSuccess","fetchAllUsersStart","errMessage","saveUserFailed","fetchAllUsersSuccess","reverse","fetchAllUsersFailed","deleteUserSuccess","deleteUserFailed","editAUser","editUserSuccess","editUserFailed","fetchTopDoctor","dataDoctors","fetchAllDoctors","dataDr","saveDetailDoctor","fetchAllScheduleTime","dataTime","getRequiredDoctorInfor","resPrice","resPayment","resProvince","resSpecialty","resClinic","fetchRequiredDoctorInforPriceSuccess","fetchRequiredDoctorInforPriceFailed","allRequiredData","initialState","started","systemMenuPath","contentOfConfirmModal","messageId","handleFunc","dataFunc","appReducer","allDoctors","allScheduleTime","allRequiredDoctorInfor","adminReducer","FETCH_ALLCODE_SCHEDULE_TIME_FAIL","USER_LOGIN_FAIL","removeItem","localUserData","JSON","parse","setItem","stringify","persistCommonConfig","storage","stateReconciler","autoMergeLevel2","userPersistConfig","whitelist","appPersistConfig","createBrowserHistory","basename","reduxStateSyncConfig","rootReducer","combineReducers","router","connectRouter","persistReducer","userReducer","middleware","routerMiddleware","thunkMiddleware","createStateSyncMiddleware","reduxThunk","composeEnhancers","compose","reduxStore","createStore","applyMiddleware","persistor","persistStore","userIsAuthenticated","locationHelperBuilder","connectedRouterRedirect","authenticatedSelector","userData","wrapperDisplayName","redirectPath","UserIsNotAuthenticatedAndAdminRole","allowRedirectBack","UserIsNotAuthenticatedAndDoctorRole","Home","linkToRedirect","to","Login","React","handleOnChangeUsername","username","handleOnChangePassword","handleLogin","errorMessage","message","handleShowPassowrd","isShowPassword","handleKeyDown","keyCode","placeholder","onKeyDown","color","navigate","_emitter","EventEmitter","setMaxListeners","emitter","ModalUser","toggle","toggleFromParent","handleOnChangeInput","arrInput","handleAddNewUser","creatNewuser","listenToEmitter","on","Modal","size","ModalHeader","ModalBody","ModalFooter","Button","ModalEditUser","editUser","currentUser","_","isEmpty","UserManage","getAllUsersFromReact","isOpenModalUser","toggleUserModal","toggleUserEditModal","isOpenModalEditUser","emit","userEdit","doEditUser","MenuGroup","children","Menu","active","link","hasSubMenu","onLinkClick","data-toggle","aria-expanded","SubMenu","getItemClass","pathname","MenuGroupWithRouter","MenuWithRouter","SubMenuWithRouter","Navigator","expandedMenu","groupIndex","menuIndex","isMenuHasSubMenuActive","subMenus","currentPath","checkActiveMenu","menus","outerLoop","group","j","menu","isSubMenuOpen","subMenu","subMenuIndex","closeOtherExpand","withRouterInnerRef","WrappedComponent","InnerComponentWithRef","forwardRef","rest","ref","ComponentWithRef","withRef","adminMenu","doctorMenu","Header","handleChangeLanguage","changeLanguageAppRedux","menuApp","ManageDoctor","buildDataInputSelect","object","labelVi","labelEn","label","contentMarkdown","contentHTML","handleSaveContentMarkdown","hasOldData","description","selectedOption","selectedPrice","selectedPayment","selectedProvince","nameClinic","addressClinic","note","clinicId","selectedClinic","specialtyId","selectedSpecialty","handleChangeSelect","listPayment","listProvince","listPrice","listSpecialty","listClinic","Markdown","markdown","paymentId","priceId","provinceId","Doctor_Infor","find","handleChangeSelectDoctorInfor","stateName","stateCopy","handleOnChangeText","listDoctors","getAllRequiredDoctorInfor","dataSelect","dataSelectPrice","dataSelectPayment","dataSelectProvince","dataSelectSpecialty","dataSelectClinic","selectedDoctor","options","ManageSpecialty","showHideDetailInfor","status","isShowDetailInfor","descriptionHTML","descriptionMarkdown","handleSaveNewSpecialty","ManageClinic","handleSaveNewClinic","ManageWallet","updateAccount","web3Api","web3","eth","getAccounts","accounts","accountAddress","getBalance","_balance","account","balance","loadProvider","CONTACT_ABI","CONTACT_ADDRESS","detectEthereumProvider","provider","Web3","myContract","Contract","contract","checkWalletIsConnected","window","ethereum","enable","request","method","connectWalletHandler","withdraw","withdrawAmount","weiAmount","utils","toWei","methods","send","checkContractBalance","withdrawForDoctor","checkCurrentAddressDebug","call","getBalanceByAdminAccount","ethBalance","fromWei","contractBalance","includes","getBalanceByDoctorAccount","handleAmountChange","smartContractAddress","abi","resAbi","defaultAccount","clearSubscriptions","min","System","component","ProfileDoctor","getInforDoctor","renderTimeBooking","time","timeTypeData","moment","unix","format","locale","dataProfile","isShowDescriptionDoctor","isShowLinkDetail","isShowPrice","priceTypeData","suffix","thousandSeparator","displayType","DatePicker","flatpickrNode","nodeRef","element","flatpickr","node","addEventListener","handleBlur","handlerKeyDown","which","preventDefault","valueMoment","toDate","onOpen","blur","checkDateValue","str","max","charAt","num","parseInt","isNaN","autoFormatOnChange","seperator","input","RegExp","test","substr","values","split","v","replace","join","onInputChange","DISPLAY_FORMAT","DATE_FORMAT_AUTO_FILL","converted","SEPERATOR","onInputBlur","removeEventListener","close","minDate","onClose","otherProps","dateFormat","allowInput","disableMobile","BookingModal","buildDataGender","handleOnchangeInput","valueInput","handleOnchangeDatePicker","birthday","selectedGender","handleConfirmBooking","isShowLoading","Date","getTime","timeString","buildTimeBooking","doctorName","buildDoctorName","fullName","reason","timeType","closeBookingModal","warn","doctorData","fetchGenders","isOpenModal","spinner","centered","fullname","DoctorSchedule","getArrDays","allDays","ddMM","add","today","capitalizeFirstLetter","startOf","valueOf","handleOnChangeSelect","doctorIdFromParent","allAvalableTime","handleClickScheduleTime","isOpenModalBooking","dataScheduleTimeModal","string","toUpperCase","slice","timeDisplay","DoctorExtraInfor","extraInfor","paymentTypeData","LikeAndShare","Comment","LiveChat","sendMessage","messagesContainerRef","useRef","useState","currentMessage","setCurrentMessage","content","owner","now","displayMessages","setDisplayMessages","useEffect","current","scrollTop","scrollHeight","handleSendMessage","dataForDisplay","rows","DetailDoctor","socket","detailDoctor","messageText","currentDoctorId","io","doctorIsOnline","match","params","dangerouslySetInnerHTML","__html","ManageSchedule","currentDate","handleClickBtnTime","rangeTime","isSelected","handleSaveSchedule","formatedDate","selectedTime","filter","schedule","arrSchedule","yesterday","setDate","getDate","RemedyModal","handleOnchangeEmail","imgBase64","handleSendRemedy","sendRemedy","dataModal","closeRemedyModal","aria-label","aria-hidden","ManagePatient","getDataPatient","dataPatient","handleBtnConfirm","patientId","patientData","patientName","isOpenRemedyModal","dataChild","timeTypeDataPatient","colSpan","textAlign","ManageChat","shortenName","selectedConversation","currentConversationList","conversations","conversation","initialMessage","doctorSession","some","getMessagesOfConversation","handleOnClickConversation","alt","data-target","Doctor","getFlattenedMessages","IntlProviderWrapper","defaultLocale","Payment","payBill","billId","initOrPayment","amount","checkTokenStatus","addFunds","changeToSuccessStatus","getBalanceByDoctorAccountDebug","isInitPayment","ethAmount","VerifyEmail","isSuccessStatus","statusVerify","search","urlParams","URLSearchParams","DetailSpecialty","arrDoctorId","arr","doctorSpecialty","dataDetailSpecialty","dataProvince","unshift","createAt","DetailClinic","dataDetailClinic","doctorClinic","App","handlePersistorState","bootstrapped","onBeforeLift","then","catch","CustomScrollbars","exact","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","theme","Boolean","hostname","ReactDOM","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","changeLanguage","returnToHome","logo","userInfor","CustomToast","titleId","hour","minute","second","hour12","autoHeight","autoHeightMin","autoHeightMax","msg","createRef","getScrollLeft","getScrollTop","scrollToBottom","targetScrollTop","getScrollHeight","scrollTo","targetTop","quickScroll","scrollbars","originalTop","iteration","scroll","setTimeout","renderTrackHorizontal","renderTrackVertical","renderThumbHorizontal","renderThumbVertical","renderNone","disableVerticalScroll","disableHorizontalScroll","autoHide","autoHideTimeout","hideTracksWhenNotNeeded"],"mappings":"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","file":"static/js/main.cf15ae6e.chunk.js","sourcesContent":["export const path = {\r\n    HOME: '/',\r\n    HOMEPAGE: '/home',\r\n    LOGIN: '/login',\r\n    LOG_OUT: '/logout',\r\n    SYSTEM: '/system',\r\n    DETAIL_DOCTOR: '/detail-doctor/:id',\r\n    VERIFY_EMAIL_BOOKING: '/verify-booking',\r\n    DETAIL_SPECIALTY: '/detail-specialty/:id',\r\n    DETAIL_CLINIC: '/detail-clinic/:id',\r\n    PAYMENT: '/payment'\r\n};\r\n\r\nexport const LANGUAGES = {\r\n    VI: 'vi',\r\n    EN: 'en'\r\n};\r\n\r\nexport const CRUD_ACTIONS = {\r\n    CREATE: \"CREATE\",\r\n    EDIT: \"EDIT\",\r\n    DELETE: \"DELETE\",\r\n    READ: \"READ\"\r\n};\r\n\r\nexport const dateFormat = {\r\n    SEND_TO_SERVER: 'DD/MM/YYYY'\r\n};\r\n\r\nexport const YesNoObj = {\r\n    YES: 'Y',\r\n    NO: 'N'\r\n}\r\n\r\nexport const USER_ROLE = {\r\n    ADMIN: 'R1',\r\n    DOCTOR: 'R2',\r\n    PATIENT: 'R3'\r\n}","class CommonUtils {\r\n    static getBase64(file) {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => resolve(reader.result);\r\n            reader.onerror = error => reject(error);\r\n        });\r\n    }\r\n\r\n    static getByteArray(file) {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.readAsArrayBuffer(file);\r\n            reader.onload = () => resolve(reader.result);\r\n            reader.onerror = error => reject(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport default CommonUtils;","class KeyCodeUtils {\r\n\r\n    static UP = 38;\r\n\r\n    static DOWN = 40;\r\n\r\n    static TAB = 9;\r\n\r\n    static ENTER = 13;\r\n\r\n    static E = 69;\r\n\r\n    static ESCAPE = 27; \r\n\r\n    static isNavigation(e) {\r\n        return (e >= 33 && e <= 40) || e === 9 || e === 8 || e === 46 || e === 14 || e === 13;\r\n    }\r\n\r\n    static isNumeric(e) {\r\n        return (e >= 48 && e <= 57) || (e >= 96 && e <= 105);\r\n    }\r\n    static isAlphabetic(e) {\r\n        return (e >= 65 && e <= 90);\r\n    }\r\n    static isDecimal(e) {\r\n        return e === 190 || e === 188 || e === 108 || e === 110;\r\n    }\r\n\r\n    static isDash(e) {\r\n        return e === 109 || e === 189;\r\n    }\r\n}\r\n\r\nexport default KeyCodeUtils;","import messages_vi from '../translations/vi.json';\r\nimport messages_en from '../translations/en.json';\r\n\r\nconst flattenMessages = ((nestedMessages, prefix = '') => {\r\n    if (nestedMessages == null) {\r\n        return {}\r\n    }\r\n    return Object.keys(nestedMessages).reduce((messages, key) => {\r\n        const value = nestedMessages[key];\r\n        const prefixedKey = prefix ? `${prefix}.${key}` : key;\r\n\r\n        if (typeof value === 'string') {\r\n            Object.assign(messages, { [prefixedKey]: value })\r\n        } else {\r\n            Object.assign(messages, flattenMessages(value, prefixedKey))\r\n        }\r\n\r\n        return messages\r\n    }, {})\r\n});\r\n\r\nconst messages = {\r\n    'vi': flattenMessages(messages_vi),\r\n    'en': flattenMessages(messages_en),\r\n};\r\n\r\nexport default class LanguageUtils {\r\n    static getMessageByKey(key, lang) {\r\n        return messages[lang][key]\r\n    }\r\n\r\n    static getFlattenedMessages() {\r\n        return messages;\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/co-xuong-khop.e76737be.jpg\";","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './Specialty.scss';\r\nimport { FormattedMessage } from 'react-intl'\r\nimport Slider from 'react-slick';\r\nimport { getAllSpecialty } from '../../../services/userService'\r\nimport specialtyImg from \"../../../assets/specialty/co-xuong-khop.jpg\"\r\nimport { withRouter } from 'react-router'\r\n\r\nclass Specialty extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dataSpecialty: []\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n        let res = await getAllSpecialty();\r\n        if (res && res.errCode === 0) {\r\n            this.setState({\r\n                dataSpecialty: res.data ? res.data : []\r\n            })\r\n        }\r\n    }\r\n\r\n    handleViewDetailSpecialty = (item) => {\r\n        this.props.history.push(`/detail-specialty/${item.id}`)\r\n\r\n    }\r\n    render() {\r\n        let { dataSpecialty } = this.state;\r\n        return (\r\n            <div className='section-share section-specialty'>\r\n                <div className='section-container'>\r\n                    <div className='section-header'>\r\n                        <span className='title-section'><FormattedMessage id=\"homepage.specialty-popular\" /></span>\r\n                        <button className='btn-section'><FormattedMessage id=\"homepage.more-infor\" /></button>\r\n                    </div>\r\n                    <div className='section-body'>\r\n                        <Slider {...this.props.settings}>\r\n                            {dataSpecialty && dataSpecialty.length > 0 &&\r\n                                dataSpecialty.map((item, index) => {\r\n                                    return (\r\n                                        <div key={index} className='section-customize specialty-child'\r\n                                            onClick={() => this.handleViewDetailSpecialty(item)}\r\n                                        >\r\n                                            <div className='bg-image section-specialty'\r\n                                                style={{ backgroundImage: `url(${item.image})` }}\r\n                                            ></div>\r\n                                            <div className='specialty-name'>{item.name}</div>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Slider>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Specialty));\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './MedicalFacility.scss'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport Slider from 'react-slick';\r\nimport { getAllClinic } from '../../../services/userService'\r\nimport { withRouter } from 'react-router'\r\n\r\nclass MedicalFacility extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dataClinics: []\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let res = await getAllClinic();\r\n        if (res && res.errCode === 0) {\r\n            this.setState({\r\n                dataClinics: res.data ? res.data : []\r\n            })\r\n        }\r\n    }\r\n\r\n    handleViewDetailClinic = (clinic) => {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/detail-clinic/${clinic.id}`)\r\n        }\r\n    }\r\n    render() {\r\n        let { dataClinics } = this.state;\r\n        return (\r\n            <div className='section-share section-medical-facility'>\r\n                <div className='section-container'>\r\n                    <div className='section-header'>\r\n                        <span className='title-section'>Cơ sở y tế nổi bật</span>\r\n                        <button className='btn-section'>Xem thêm</button>\r\n                    </div>\r\n                    <div className='section-body'>\r\n                        <Slider {...this.props.settings}>\r\n                            {dataClinics && dataClinics.length > 0 &&\r\n                                dataClinics.map((item, index) => {\r\n                                    return (\r\n                                        <div className='section-customize clinic-child' key={index}\r\n                                            onClick={() => this.handleViewDetailClinic(item)}>\r\n                                            <div className='bg-image section-medical-facility'\r\n\r\n                                                style={{ backgroundImage: `url(${item.image})` }}\r\n                                            ></div>\r\n                                            <div className='clinic-name'>{item.name}</div>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n\r\n                        </Slider>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MedicalFacility));\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl'\r\nimport Slider from 'react-slick';\r\n\r\nclass HandBook extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='section-share section-handbook'>\r\n                <div className='section-container'>\r\n                    <div className='section-header'>\r\n                        <span className='title-section'>Cẩm nang</span>\r\n                        <button className='btn-section'>Xem thêm</button>\r\n                    </div>\r\n                    <div className='section-body'>\r\n                        <Slider {...this.props.settings}>\r\n                            <div className='section-customize'>\r\n                                <div className='bg-image section-handbook'></div>\r\n                                <div>Cẩm nang 1</div>\r\n                            </div>\r\n                            <div className='section-customize'>\r\n                                <div className='bg-image section-handbook'></div>\r\n                                <div>Cẩm nang 2</div>\r\n                            </div>\r\n                            <div className='section-customize'>\r\n                                <div className='bg-image section-handbook'></div>\r\n                                <div>Cẩm nang 3</div>\r\n                            </div>\r\n                            <div className='section-customize'>\r\n                                <div className='bg-image section-handbook'></div>\r\n                                <div>Cẩm nang 4</div>\r\n                            </div>\r\n                            <div className='section-customize'>\r\n                                <div className='bg-image section-handbook'></div>\r\n                                <div>Cẩm nang 5</div>\r\n                            </div>\r\n                            <div className='section-customize'>\r\n                                <div className='bg-image section-handbook'></div>\r\n                                <div>Cẩm nang 6</div>\r\n                            </div>\r\n                        </Slider>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HandBook);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl'\r\n\r\nclass About extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='section-share section-about'>\r\n                <div className='section-about-header'>\r\n                    Truyền thông nói về BookingCare\r\n                </div>\r\n                <div className='section-about-content'>\r\n                    <div className='content-left'>\r\n                        <iframe width=\"100%\" height=\"400px\"\r\n                            src=\"https://www.youtube.com/embed/FyDQljKtWnI\"\r\n                            title=\"CÀ PHÊ KHỞI NGHIỆP VTV1 - BOOKINGCARE - HỆ THỐNG ĐẶT LỊCH KHÁM TRỰC TUYẾN\"\r\n                            frameBorder=\"0\"\r\n                            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                            allowFullScreen>\r\n                        </iframe>\r\n                    </div>\r\n                    <div className='content-right'>\r\n                        <p>RegExr was created by gskinner.com.\r\n\r\n                            Edit the Expression & Text to see matches. Roll over matches or the expression for details. PCRE & JavaScript flavors of RegEx are supported. Validate your expression with Tests mode.\r\n\r\n                            The side bar includes a Cheatsheet, full Reference, and Help. You can also Save & Share with the Community and view patterns you create or favorite in My Patterns.\r\n\r\n                            Explore results with the Tools below. Replace & List output custom results. Details lists capture groups. Explain describes your expression in plain English.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(About);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl'\r\n\r\nclass HomeFooter extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='home-footer'>\r\n                <p>&copy; 2021 Hung Tran. More information please contact me.\r\n                    <a target='_blank' href='#'>&#8594; Click here &#8592;</a></p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeFooter);\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport HomeHeader from './HomeHeader';\r\nimport Specialty from './Section/Specialty';\r\nimport MedicalFacility from './Section/MedicalFacility';\r\nimport OutStandingDoctor from './Section/OutStandingDoctor';\r\nimport './HomePage.scss'\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport HandBook from './Section/HandBook';\r\nimport About from './Section/About';\r\nimport HomeFooter from './HomeFooter';\r\n\r\nclass HomePage extends Component {\r\n    // handleAfterChange = (index, dontAnimate) => {\r\n\r\n    // }\r\n    render() {\r\n        let settings = {\r\n            dots: false,\r\n            infinite: false,\r\n            speed: 500,\r\n            slidesToShow: 4,\r\n            slidesToScroll: 2,\r\n            // slickGoTo: this.handleAfterChange\r\n        };\r\n        return (\r\n            <div>\r\n                <HomeHeader isShowBanner={true} />\r\n                <Specialty\r\n                    settings={settings} />\r\n                <MedicalFacility\r\n                    settings={settings} />\r\n                <OutStandingDoctor\r\n                    settings={settings} />\r\n                <HandBook\r\n                    settings={settings} />\r\n                <About />\r\n                <HomeFooter />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\n","import axios from 'axios';\r\nimport _ from 'lodash';\r\n\r\nconst instance = axios.create({\r\n    baseURL: process.env.REACT_APP_BACKEND_URL,\r\n    withCredentials: true\r\n});\r\n\r\n// const createError = (httpStatusCode, statusCode, errorMessage, problems, errorCode = '') => {\r\n//     const error = new Error();\r\n//     error.httpStatusCode = httpStatusCode;\r\n//     error.statusCode = statusCode;\r\n//     error.errorMessage = errorMessage;\r\n//     error.problems = problems;\r\n//     error.errorCode = errorCode + \"\";\r\n//     return error;\r\n// };\r\n\r\n// export const isSuccessStatusCode = (s) => {\r\n//     // May be string or number\r\n//     const statusType = typeof s;\r\n//     return (statusType === 'number' && s === 0) || (statusType === 'string' && s.toUpperCase() === 'OK');\r\n// };\r\n\r\ninstance.interceptors.response.use(\r\n    (response) => {\r\n        // Thrown error for request with OK status code\r\n        const { data } = response;\r\n        return response.data;\r\n        //         if (data.hasOwnProperty('s') && !isSuccessStatusCode(data['s']) && data.hasOwnProperty('errmsg')) {\r\n        //             return Promise.reject(createError(response.status, data['s'], data['errmsg'], null, data['errcode'] ? data['errcode'] : \"\"));\r\n        //         }\r\n\r\n        //         // Return direct data to callback\r\n        //         if (data.hasOwnProperty('s') && data.hasOwnProperty('d')) {\r\n        //             return data['d'];\r\n        //         }\r\n        //         // Handle special case\r\n        //         if (data.hasOwnProperty('s') && _.keys(data).length === 1) {\r\n        //             return null;\r\n        //         }\r\n        //         return response.data;\r\n        //     },\r\n        //     (error) => {\r\n        // const { response } = error;\r\n        // if (response == null) {\r\n        //     return Promise.reject(error);\r\n        // }\r\n\r\n        // const { data } = response;\r\n\r\n        // if (data.hasOwnProperty('s') && data.hasOwnProperty('errmsg')) {\r\n        //     return Promise.reject(createError(response.status, data['s'], data['errmsg']));\r\n        // }\r\n\r\n        // if (data.hasOwnProperty('code') && data.hasOwnProperty('message')) {\r\n        //     return Promise.reject(createError(response.status, data['code'], data['message'], data['problems']));\r\n        // }\r\n\r\n        // return Promise.reject(createError(response.status));\r\n    }\r\n);\r\n\r\nexport default instance;\r\n","export default function authHeader() {\r\n    // const user = JSON.parse(JSON.parse(localStorage.getItem('persist:user')).userInfo);\r\n    const accessToken = localStorage.getItem('accessToken')\r\n    // console.log(\"🚀 ~ file: auth-header.js:4 ~ authHeader ~ localStorage.getItem('persist:user')\", localStorage.getItem('persist:user'))\r\n    // console.log(\"🚀 ~ file: auth-header.js:3 ~ authHeader ~ user\", user)\r\n\r\n    if (accessToken) {\r\n        return { 'x-access-token': accessToken };\r\n    } else {\r\n        return {};\r\n    }\r\n}","import axios from \"../axios\"\r\nimport authHeader from './auth-header';\r\n\r\nconst handleLoginApi = (userEmail, userPassword) => {\r\n    return axios.post('/api/login', { email: userEmail, password: userPassword });\r\n}\r\n\r\nconst getAllUsers = (inputId) => {\r\n    return axios.get(`/api/get-all-users?id=${inputId}`, { headers: authHeader() })\r\n}\r\n\r\nconst createNewUserService = (data) => {\r\n    return axios.post('/api/create-new-user', data, { headers: authHeader() })\r\n}\r\n\r\nconst deleteUserService = (userId) => {\r\n    return axios.delete('/api/delete-user', { data: { id: userId }, headers: authHeader() });\r\n}\r\n\r\nconst editUserService = (inputData) => {\r\n    return axios.put('/api/edit-user', inputData, { headers: authHeader() });\r\n}\r\n\r\nconst getAllCodeService = (inputData) => {\r\n    return axios.get(`/api/allcode?type=${inputData}`)\r\n}\r\n\r\nconst getTopDoctorHomeService = (limit) => {\r\n    return axios.get(`/api/top-doctor-home?limit=${limit}`);\r\n}\r\n\r\nconst getAllDoctors = (limit) => {\r\n    return axios.get(`/api/get-all-doctors`, { headers: authHeader() });\r\n}\r\n\r\nconst saveDetailDoctorService = (data) => {\r\n    return axios.post(`/api/save-infor-doctors`, data, { headers: authHeader() });\r\n}\r\n\r\nconst getDetailInforDoctor = (inputId) => {\r\n    return axios.get(`/api/get-detail-doctor-by-id?id=${inputId}`);\r\n}\r\n\r\nconst saveBulkScheduleDoctor = (data) => {\r\n    console.log(\"debuggggggggggg5\")\r\n    return axios.post(`/api/bulk-create-schedule`, data, { headers: authHeader() });\r\n}\r\n\r\nconst getScheduleDoctorByDate = (doctorId, date) => {\r\n    return axios.get(`/api/get-schedule-doctor-by-date?doctorId=${doctorId}&date=${date}`);\r\n}\r\n\r\nconst getExtraInforDoctorById = (doctorId) => {\r\n    return axios.get(`/api/get-extra-infor-doctor-by-id?doctorId=${doctorId}`);\r\n}\r\n\r\nconst getProfileDoctorById = (doctorId) => {\r\n    return axios.get(`/api/get-profile-doctor-by-id?doctorId=${doctorId}`);\r\n}\r\n\r\nconst postPatientBookingAppointment = (data) => {\r\n    return axios.post(`/api/patient-book-appointment`, data);\r\n}\r\n\r\nconst postVerifyBookAppointment = (data) => {\r\n    return axios.post(`/api/verify-book-appointment`, data);\r\n}\r\n\r\nconst createNewSpecialty = (data) => {\r\n    return axios.post(`/api/create-new-specialty`, data, { headers: authHeader() });\r\n}\r\n\r\nconst getAllSpecialty = () => {\r\n    return axios.get(`/api/get-specialty`);\r\n}\r\nconst getDetailSpecialtyById = (data) => {\r\n    return axios.get(`/api/get-detail-specialty-by-id?id=${data.id}&location=${data.location}`);\r\n}\r\nconst createNewClinic = (data) => {\r\n    return axios.post(`/api/create-new-clinic`, data, { headers: authHeader() });\r\n}\r\nconst getAllClinic = () => {\r\n    return axios.get(`/api/get-clinic`);\r\n}\r\nconst getDetailClinicById = (data) => {\r\n    return axios.get(`/api/get-detail-clinic-by-id?id=${data.id}`);\r\n}\r\nconst getAllPatientForDoctor = (data) => {\r\n    return axios.get(`/api/get-list-patient-for-doctor?doctorId=${data.doctorId}&date=${data.date}`, { headers: authHeader() });\r\n}\r\nconst postSendRemedy = (data) => {\r\n    // const formData = new FormData();\r\n    // for (let key in data) {\r\n    //     // console.log(\"🚀 ~ file: userService.js:94 ~ postSendRemedy ~ data.key\", data[key])\r\n    //     formData.append(key, data[key]);\r\n    // }\r\n    // console.log(\"🚀 ~ file: userService.js:93 ~ postSendRemedy ~ formData\", formData)\r\n\r\n    return axios.post(`/api/send-remedy`, data, { headers: authHeader() });\r\n}\r\nconst getDoctorInfoById = (data) => {\r\n    return axios.get(`/api/get-doctor-info-by-id?doctorId=${data.doctorId}`, { headers: authHeader() });\r\n}\r\nconst getDetailBillByToken = (data) => {\r\n    return axios.get(`/api/get-detail-bill?token=${data.token}`);\r\n}\r\nconst getContractAbi = () => {\r\n    return axios.get(`/api/contract/abi`);\r\n}\r\nconst transfer = (data) => {\r\n    return axios.post(`/api/transfer`, data);\r\n}\r\nconst initBill = (data) => {\r\n    return axios.post(`/api/init-bill`, data);\r\n}\r\nconst verifyPayment = (data) => {\r\n    return axios.post(`/api/verify-payment`, data);\r\n}\r\nexport {\r\n    handleLoginApi, getAllUsers, createNewUserService, deleteUserService,\r\n    editUserService, getAllCodeService, getTopDoctorHomeService, getAllDoctors,\r\n    saveDetailDoctorService, getDetailInforDoctor, saveBulkScheduleDoctor,\r\n    getScheduleDoctorByDate, getExtraInforDoctorById, getProfileDoctorById,\r\n    postPatientBookingAppointment, postVerifyBookAppointment, createNewSpecialty,\r\n    getAllSpecialty, getDetailSpecialtyById, createNewClinic, getAllClinic,\r\n    getDetailClinicById, getAllPatientForDoctor, postSendRemedy, getDoctorInfoById,\r\n    getDetailBillByToken, getContractAbi, transfer, initBill, verifyPayment\r\n};","const actionTypes = Object.freeze({\r\n    //app\r\n    APP_START_UP_COMPLETE: 'APP_START_UP_COMPLETE',\r\n    SET_CONTENT_OF_CONFIRM_MODAL: 'SET_CONTENT_OF_CONFIRM_MODAL',\r\n    CHANGE_LANGUAGE: 'CHANGE_LANGUAGE',\r\n    //user\r\n    ADD_USER_SUCCESS: 'ADD_USER_SUCCESS',\r\n    USER_LOGIN_SUCCESS: 'USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_FALL: 'USER_LOGIN_FAIL',\r\n    PROCESS_LOGOUT: 'PROCESS_LOGOUT',\r\n\r\n    //admin\r\n    FETCH_GENDER_START: 'FETCH_GENDER_START',\r\n    FETCH_GENDER_SUCCESS: 'FETCH_GENDER_SUCCESS',\r\n    FETCH_GENDER_FAILED: 'FETCH_GENDER_FAILED',\r\n\r\n    FETCH_POSITION_SUCCESS: 'FETCH_POSITION_SUCCESS',\r\n    FETCH_POSITION_FAILED: 'FETCH_POSITION_SUCCESS',\r\n\r\n    FETCH_ROLE_SUCCESS: 'FETCH_ROLE_SUCCESS',\r\n    FETCH_ROLE_FAILED: 'FETCH_ROLE_FAILED',\r\n\r\n    CREATE_USER_SUCCESS: 'CREATE_USER_SUCCESS',\r\n    CREATE_USER_FAILED: 'CREATE_USER_FAILED',\r\n\r\n    EDIT_USER_SUCCESS: 'EDIT_USER_SUCCESS',\r\n    EDIT_USER_FAILED: 'EDIT_USER_FAILED',\r\n\r\n    DELETE_USER_SUCCESS: 'DELETE_USER_SUCCESS',\r\n    DELETE_USER_FAILED: 'DELETE_USER_FAILED',\r\n\r\n    FETCH_ALL_USERS_SUCCESS: 'FETCH_ALL_USERS_SUCCESS',\r\n    FETCH_ALL_USERS_FAILED: 'FETCH_ALL_USERS_FAILED',\r\n\r\n    FETCH_TOP_DOCTORS_SUCCESS: 'FETCH_TOP_DOCTORS_SUCCESS',\r\n    FETCH_TOP_DOCTORS_FAILED: 'FETCH_TOP_DOCTORS_FAILED',\r\n\r\n    FETCH_ALL_DOCTORS_SUCCESS: 'FETCH_ALL_DOCTORS_SUCCESS',\r\n    FETCH_ALL_DOCTORS_FAILED: 'FETCH_ALL_DOCTORS_FAILED',\r\n\r\n    FETCH_SAVE_DETAIL_DOCTOR_SUCCESS: 'FETCH_SAVE_DETAIL_DOCTOR_SUCCESS',\r\n    FETCH_SAVE_DETAIL_DOCTOR_FAILED: 'FETCH_SAVE_DETAIL_DOCTOR_FAILED',\r\n\r\n    FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS: 'FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS',\r\n    FETCH_ALLCODE_SCHEDULE_TIME_FAILED: 'FETCH_ALLCODE_SCHEDULE_TIME_FAILED',\r\n\r\n    FETCH_REQUIRED_DOCTOR_INFOR_START: 'FETCH_REQUIRED_DOCTOR_INFOR_START',\r\n    FETCH_REQUIRED_DOCTOR_INFOR_SUCCESS: 'FETCH_REQUIRED_DOCTOR_INFOR_SUCCESS',\r\n    FETCH_REQUIRED_DOCTOR_INFOR_FAILED: 'FETCH_REQUIRED_DOCTOR_INFOR_FAILED'\r\n})\r\n\r\nexport default actionTypes;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 151;","import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { getAllCodeService } from \"../../../services/userService\"\r\nimport { LANGUAGES, CRUD_ACTIONS, CommonUtils } from \"../../../utils\"\r\nimport * as actions from \"../../../store/actions\"\r\nimport \"./UserRedux.scss\"\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css'; // This only needs to be imported once in your app\r\nimport TableManageUser from './TableManageUser';\r\nimport { HighlightSpanKind } from 'typescript';\r\n\r\nclass UserRedux extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            genderArr: [],\r\n            roleArr: [],\r\n            positionArr: [],\r\n            previewImageURL: '',\r\n            isOpen: false,\r\n            email: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            phoneNumber: '',\r\n            address: '',\r\n            gender: '',\r\n            position: '',\r\n            role: '',\r\n            avatar: '',\r\n            action: '',\r\n            userEditId: '',\r\n            walletAddress: ''\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.props.getGenderStart();\r\n        this.props.getPositionStart();\r\n        this.props.getRoleStart()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (prevProps.genderRedux !== this.props.genderRedux) {\r\n            let arrGenders = this.props.genderRedux\r\n            this.setState({\r\n                genderArr: arrGenders,\r\n                gender: arrGenders && arrGenders.length > 0 ? arrGenders[0].keyMap : ''\r\n            })\r\n        }\r\n        if (prevProps.roleRedux !== this.props.roleRedux) {\r\n            let arrRoles = this.props.roleRedux\r\n            this.setState({\r\n                roleArr: arrRoles,\r\n                role: arrRoles && arrRoles.length > 0 ? arrRoles[0].keyMap : ''\r\n            })\r\n        }\r\n        if (prevProps.positionRedux !== this.props.positionRedux) {\r\n            let positionArr = this.props.positionRedux\r\n            this.setState({\r\n                positionArr: positionArr,\r\n                position: positionArr && positionArr.length > 0 ? positionArr[0].keyMap : ''\r\n            })\r\n        }\r\n        if (prevProps.listUsers !== this.props.listUsers) {\r\n            let arrGenders = this.props.genderRedux\r\n            let arrRoles = this.props.roleRedux\r\n            let positionArr = this.props.positionRedux\r\n            this.setState({\r\n                email: '',\r\n                password: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                phoneNumber: '',\r\n                address: '',\r\n                gender: arrGenders && arrGenders.length > 0 ? arrGenders[0].keyMap : '',\r\n                position: positionArr && positionArr.length > 0 ? positionArr[0].keyMap : '',\r\n                role: arrRoles && arrRoles.length > 0 ? arrRoles[0].keyMap : '',\r\n                avatar: '',\r\n                action: CRUD_ACTIONS.CREATE,\r\n                previewImageURL: '',\r\n                walletAddress: ''\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    handleOnchangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            let objectUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImageURL: objectUrl,\r\n                avatar: base64\r\n            })\r\n        }\r\n        event.target.value = null;\r\n    }\r\n\r\n    openPreviewImage = () => {\r\n        if (!this.state.previewImageURL) return;\r\n        this.setState({\r\n            isOpen: true\r\n        })\r\n    }\r\n\r\n    handleSaveUser = () => {\r\n        let isValid = this.checkValidateInput()\r\n        if (isValid === false) return;\r\n        let { action } = this.state;\r\n        if (action === CRUD_ACTIONS.CREATE) {\r\n            this.props.createNewUser({\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                firstName: this.state.firstName,\r\n                lastName: this.state.lastName,\r\n                address: this.state.address,\r\n                phonenumber: this.state.phoneNumber,\r\n                gender: this.state.gender,\r\n                roleId: this.state.role,\r\n                positionId: this.state.position,\r\n                avatar: this.state.avatar,\r\n                walletAddress: this.state.walletAddress\r\n            })\r\n        }\r\n        if (action === CRUD_ACTIONS.EDIT) {\r\n            this.props.editAUserRedux({\r\n                id: this.state.userEditId,\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                firstName: this.state.firstName,\r\n                lastName: this.state.lastName,\r\n                address: this.state.address,\r\n                phonenumber: this.state.phoneNumber,\r\n                gender: this.state.gender,\r\n                roleId: this.state.role,\r\n                positionId: this.state.position,\r\n                avatar: this.state.avatar,\r\n                walletAddress: this.state.walletAddress\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrCheck = ['email', 'password', 'firstName', 'lastName', 'phoneNumber', 'address', 'walletAddress']\r\n        for (let i = 0; i < arrCheck.length; i++) {\r\n            if (!this.state[arrCheck[i]]) {\r\n                isValid = false;\r\n                alert('This input is required: ' + arrCheck[i])\r\n                break;\r\n            }\r\n        }\r\n        return isValid\r\n    }\r\n\r\n    onChangeInput = (event, id) => {\r\n        let copyState = { ...this.state }\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState\r\n        })\r\n    }\r\n\r\n    handleEditUserFromParent = (user) => {\r\n        let imageBase64 = ''\r\n        if (user.image) {\r\n            imageBase64 = Buffer.from(user.image, 'base64').toString('binary');\r\n        }\r\n        this.setState({\r\n            email: user.email,\r\n            password: 'HARDCODE',\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            phoneNumber: user.phonenumber,\r\n            address: user.address,\r\n            gender: user.gender,\r\n            position: user.positionId,\r\n            role: user.roleId,\r\n            avatar: '',\r\n            previewImageURL: imageBase64,\r\n            action: CRUD_ACTIONS.EDIT,\r\n            userEditId: user.id,\r\n            walletAddress: user.walletAddress\r\n        })\r\n    }\r\n    render() {\r\n        let genders = this.state.genderArr;\r\n        let roles = this.state.roleArr;\r\n        let positions = this.state.positionArr;\r\n        let language = this.props.language;\r\n        let isGetGenders = this.props.isLoadingGender;\r\n\r\n        let { email, password, firstName, lastName, phoneNumber, address, gender,\r\n            position, role, avatar, walletAddress } = this.state\r\n\r\n        return (\r\n            <div className='user-redux-container'>\r\n                <div className='title'>\r\n                    Learn React-Redux\r\n                </div>\r\n                <div className=\"user-redux-body\" >\r\n                    <div className='container'>\r\n                        <div className='row'>\r\n                            <div className='col-12 my-3'><FormattedMessage id=\"manage-user.add\" /></div>\r\n                            <div className='col-12'>{isGetGenders === true ? 'Loading gender' : ''}</div>\r\n\r\n                            <div className='col-3'>\r\n                                <label><FormattedMessage id=\"manage-user.email\" /></label>\r\n                                <input className='form-control' type='email'\r\n                                    value={email}\r\n                                    onChange={(event) => { this.onChangeInput(event, 'email') }}\r\n                                    disabled={this.state.action === CRUD_ACTIONS.EDIT ? true : false}\r\n                                ></input>\r\n                            </div>\r\n                            <div className='col-3'>\r\n                                <label><FormattedMessage id=\"manage-user.password\" /></label>\r\n                                <input className='form-control' type='password'\r\n                                    value={password}\r\n                                    onChange={(event) => { this.onChangeInput(event, 'password') }}\r\n                                    disabled={this.state.action === CRUD_ACTIONS.EDIT ? true : false}\r\n                                ></input>\r\n                            </div>\r\n                            <div className='col-3'>\r\n                                <label><FormattedMessage id=\"manage-user.first-name\" /></label>\r\n                                <input className='form-control' type='text'\r\n                                    value={firstName}\r\n                                    onChange={(event) => { this.onChangeInput(event, 'firstName') }}\r\n                                ></input>\r\n                            </div>\r\n                            <div className='col-3'>\r\n                                <label><FormattedMessage id=\"manage-user.last-name\" /></label>\r\n                                <input className='form-control' type='text'\r\n                                    value={lastName}\r\n                                    onChange={(event) => { this.onChangeInput(event, 'lastName') }}\r\n                                ></input>\r\n                            </div>\r\n                            <div className='col-4'>\r\n                                <label><FormattedMessage id=\"manage-user.phone-number\" /></label>\r\n                                <input className='form-control' type='text'\r\n                                    value={phoneNumber}\r\n                                    onChange={(event) => { this.onChangeInput(event, 'phoneNumber') }}\r\n                                ></input>\r\n                            </div>\r\n                            <div className='col-4'>\r\n                                <label><FormattedMessage id=\"manage-user.address\" /></label>\r\n                                <input className='form-control' type='text'\r\n                                    value={address}\r\n                                    onChange={(event) => { this.onChangeInput(event, 'address') }}\r\n                                ></input>\r\n                            </div>\r\n                            <div className='col-4'>\r\n                                <label><FormattedMessage id=\"manage-user.wallet\" /></label>\r\n                                <input className='form-control' type='text'\r\n                                    value={walletAddress}\r\n                                    onChange={(event) => { this.onChangeInput(event, 'walletAddress') }}\r\n                                ></input>\r\n                            </div>\r\n                            <div className='col-3'>\r\n                                <label><FormattedMessage id=\"manage-user.gender\" /></label>\r\n                                <select className=\"inputState form-control\"\r\n                                    onChange={(event) => { this.onChangeInput(event, 'gender') }}\r\n                                    value={gender}\r\n                                >\r\n                                    {genders && genders.length > 0 &&\r\n                                        genders.map((item, index) => {\r\n                                            return (\r\n                                                <option key={index} value={item.keyMap} >\r\n                                                    {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                                                </option>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </select>\r\n                            </div>\r\n                            <div className='col-3'>\r\n                                <label><FormattedMessage id=\"manage-user.position\" /></label>\r\n                                <select className=\"inputState form-control\"\r\n                                    onChange={(event) => { this.onChangeInput(event, 'position') }}\r\n                                    value={position}\r\n                                >\r\n                                    {positions && positions.length > 0 &&\r\n                                        positions.map((item, index) => {\r\n                                            return (\r\n                                                <option key={index} value={item.keyMap}>\r\n                                                    {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                                                </option>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </select>\r\n                            </div>\r\n                            <div className='col-3'>\r\n                                <label><FormattedMessage id=\"manage-user.role\" /></label>\r\n                                <select className=\"inputState form-control\"\r\n                                    onChange={(event) => { this.onChangeInput(event, 'role') }}\r\n                                    value={role}\r\n                                >\r\n                                    {roles && roles.length > 0 &&\r\n                                        roles.map((item, index) => {\r\n                                            return (\r\n                                                <option key={index} value={item.keyMap}>\r\n                                                    {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                                                </option>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </select>\r\n                            </div>\r\n                            <div className='col-3'>\r\n                                <label><FormattedMessage id=\"manage-user.image\" /></label>\r\n                                <div className='preview-img-container'>\r\n                                    <input type='file' id='previewImg' hidden\r\n                                        onChange={(event) => this.handleOnchangeImage(event)}\r\n                                    />\r\n                                    <label className='lable-upload' htmlFor='previewImg'>Tải ảnh <i className=\"fas fa-upload\"></i></label>\r\n                                    <div className='preview-image'\r\n                                        style={{ backgroundImage: `url(${this.state.previewImageURL})` }}\r\n                                        onClick={() => this.openPreviewImage()}\r\n                                    ></div>\r\n                                </div>\r\n                            </div>\r\n                            <div className='col-12 my-3'>\r\n                                <button className={this.state.action === CRUD_ACTIONS.EDIT ? 'btn btn-warning' : 'btn btn-primary'}\r\n                                    onClick={() => this.handleSaveUser()}\r\n                                >{this.state.action === CRUD_ACTIONS.EDIT ?\r\n                                    <FormattedMessage id=\"manage-user.edit\" />\r\n                                    :\r\n                                    <FormattedMessage id=\"manage-user.save\" />\r\n                                    }</button>\r\n                            </div>\r\n                            <div className='col-12 mb-5'>\r\n                                <TableManageUser\r\n                                    handleEditUserFromParentKey={this.handleEditUserFromParent}\r\n                                    action={this.state.action}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {this.state.isOpen == true &&\r\n                        <Lightbox\r\n                            mainSrc={this.state.previewImageURL}\r\n                            onCloseRequest={() => this.setState({ isOpen: false })}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        genderRedux: state.admin.genders,\r\n        roleRedux: state.admin.roles,\r\n        positionRedux: state.admin.positions,\r\n        isLoadingGender: state.admin.isLoadingGender,\r\n        listUsers: state.admin.users\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getGenderStart: () => dispatch(actions.fetchGenderStart()),\r\n        getPositionStart: () => dispatch(actions.fetchPositionStart()),\r\n        getRoleStart: () => dispatch(actions.fetchRoleStart()),\r\n        createNewUser: (data) => dispatch(actions.createNewUser(data)),\r\n        fetchUserRedux: () => dispatch(actions.fetchAllUsersStart()),\r\n        editAUserRedux: (data) => dispatch(actions.editAUser(data)),\r\n        // processLogout: () => dispatch(actions.processLogout()),\r\n        // changeLanguageAppRedux: (language) => dispatch(actions.changeLanguageApp(language))\r\n\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserRedux);\r\n","import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './TableManageUser.scss'\r\nimport * as actions from \"../../../store/actions\"\r\n\r\n\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\n// import style manually\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\n\r\n// Register plugins if required\r\n// MdEditor.use(YOUR_PLUGINS_HERE);\r\n\r\n// Initialize a markdown parser\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\n// Finish!\r\nfunction handleEditorChange({ html, text }) {\r\n    console.log('handleEditorChange', html, text);\r\n}\r\n\r\nclass TableManageUser extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            usersRedux: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchUserRedux();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (prevProps.listUsers !== this.props.listUsers) {\r\n            this.setState({\r\n                usersRedux: [...this.props.listUsers]\r\n            })\r\n        }\r\n    }\r\n    handleDeleteUser = (user) => {\r\n        this.props.deleteAUser(user.id)\r\n    }\r\n\r\n    handleEditUser = (user) => {\r\n        this.props.handleEditUserFromParentKey(user)\r\n    }\r\n\r\n    render() {\r\n        let arrUsers = this.state.usersRedux;\r\n        return (\r\n            <React.Fragment>\r\n                <table id='TableManageUser'>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Email</th>\r\n                            <th>First Name</th>\r\n                            <th>Last Name</th>\r\n                            <th>Address</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                        {arrUsers && arrUsers.length > 0 &&\r\n                            arrUsers.map((item, index) => {\r\n                                return (\r\n                                    <tr key={index}>\r\n                                        <td>{item.email}</td>\r\n                                        <td>{item.firstName}</td>\r\n                                        <td>{item.lastName}</td>\r\n                                        <td>{item.address}</td>\r\n                                        <td>\r\n                                            <button className='btn-edit' ><i className=\"fas fa-pencil-alt\" onClick={() => this.handleEditUser(item)}></i></button>\r\n                                            <button className='btn-delete' ><i className=\"fas fa-trash\" onClick={() => this.handleDeleteUser(item)}></i></button>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                    </tbody>\r\n                </table>\r\n                <MdEditor style={{ height: '500px' }} renderHTML={text => mdParser.render(text)} onChange={handleEditorChange} />\r\n            </React.Fragment>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        listUsers: state.admin.users\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchUserRedux: () => dispatch(actions.fetchAllUsersStart()),\r\n        deleteAUser: (id) => dispatch(actions.deleteAUser(id))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableManageUser);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport Slider from 'react-slick';\r\nimport * as actions from '../../../store/actions';\r\nimport { LANGUAGES } from '../../../utils'\r\nimport HomePage from '../HomePage';\r\nimport { withRouter } from 'react-router'\r\n\r\nclass OutStandingDoctor extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            arrDoctors: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.props.loadTopDoctors();\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.topDoctorsRedux !== this.props.topDoctorsRedux) {\r\n            this.setState({\r\n                arrDoctors: this.props.topDoctorsRedux\r\n            })\r\n        }\r\n    }\r\n    handleViewDetailDoctor = (doctor) => {\r\n        this.props.history.push(`/detail-doctor/${doctor.id}`)\r\n\r\n    }\r\n    render() {\r\n        let { language } = this.props\r\n        let arrDoctors = this.state.arrDoctors\r\n\r\n        return (\r\n            <div className='section-share section-outstanding-doctor'>\r\n                <div className='section-container'>\r\n                    <div className='section-header'>\r\n                        <span className='title-section'><FormattedMessage id={\"homepage.outstanding-doctor\"} /></span>\r\n                        <button className='btn-section'><FormattedMessage id={\"homepage.more-infor\"} /></button>\r\n                    </div>\r\n                    <div className='section-body'>\r\n                        <Slider {...this.props.settings}>\r\n                            {arrDoctors && arrDoctors.length > 0\r\n                                && arrDoctors.map((item, index) => {\r\n                                    let imageBase64 = ''\r\n                                    if (item.image) {\r\n                                        imageBase64 = Buffer.from(item.image, 'base64').toString('binary');\r\n                                    }\r\n                                    let nameVi = `${item.positionData.valueVi}, ${item.lastName} ${item.firstName}`;\r\n                                    let nameEn = `${item.positionData.valueEn}, ${item.firstName} ${item.lastName}`;\r\n                                    return (\r\n                                        <div key={index} className='section-customize' onClick={() => this.handleViewDetailDoctor(item)}>\r\n                                            <div className='customize-border'>\r\n                                                <div className='outer-bg'>\r\n                                                    <div className='bg-image section-outstanding-doctor'\r\n                                                        style={{ backgroundImage: `url(${imageBase64})` }}>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='position text-center'>\r\n                                                    <div>{language === LANGUAGES.VI ? nameVi : nameEn}</div>\r\n                                                    <div>Cơ xương khớp 1</div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                        </Slider>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        topDoctorsRedux: state.admin.topDoctors\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        loadTopDoctors: () => dispatch(actions.fetchTopDoctor())\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(OutStandingDoctor));\r\n","import actionTypes from './actionTypes';\r\n\r\nexport const appStartUpComplete = () => ({\r\n    type: actionTypes.APP_START_UP_COMPLETE\r\n});\r\n\r\nexport const setContentOfConfirmModal = (contentOfConfirmModal) => ({\r\n    type: actionTypes.SET_CONTENT_OF_CONFIRM_MODAL,\r\n    contentOfConfirmModal: contentOfConfirmModal\r\n});\r\n\r\nexport const changeLanguageApp = (languageInput) => ({\r\n    type: actionTypes.CHANGE_LANGUAGE,\r\n    language: languageInput\r\n})","import actionTypes from './actionTypes';\r\n\r\nexport const addUserSuccess = () => ({\r\n    type: actionTypes.ADD_USER_SUCCESS\r\n})\r\n\r\nexport const userLoginSuccess = (userInfo) => ({\r\n    type: actionTypes.USER_LOGIN_SUCCESS,\r\n    userInfo: userInfo\r\n})\r\n\r\nexport const userLoginFail = () => ({\r\n    type: actionTypes.USER_LOGIN_FAIL\r\n})\r\n\r\nexport const processLogout = () => ({\r\n    type: actionTypes.PROCESS_LOGOUT\r\n})","import actionTypes from './actionTypes';\r\nimport {\r\n    getTopDoctorHomeService, getAllCodeService, createNewUserService, getAllUsers,\r\n    deleteUserService, editUserService, getAllDoctors, saveDetailDoctorService,\r\n    getAllSpecialty, getAllClinic\r\n} from '../../services/userService';\r\nimport { toast } from \"react-toastify\";\r\n// export const fetchGenderStart = () => ({\r\n//     type: actionTypes.FETCH_GENDER_START\r\n// })\r\nexport const fetchGenderStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({\r\n                type: actionTypes.FETCH_GENDER_START\r\n            })\r\n            let res = await getAllCodeService(\"GENDER\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(fetchGenderSuccess(res.data))\r\n            } else {\r\n                dispatch(fetchGenderFailed())\r\n            }\r\n        } catch (error) {\r\n            dispatch(fetchGenderFailed());\r\n            console.log('fetchGenderStart error', error);\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchGenderSuccess = (genderData) => ({\r\n    type: actionTypes.FETCH_GENDER_SUCCESS,\r\n    data: genderData\r\n})\r\n\r\nexport const fetchGenderFailed = () => ({\r\n    type: actionTypes.FETCH_GENDER_FAILED\r\n})\r\n\r\nexport const fetchPositionSuccess = (positionData) => ({\r\n    type: actionTypes.FETCH_POSITION_SUCCESS,\r\n    data: positionData\r\n})\r\n\r\nexport const fetchPositionFailed = () => ({\r\n    type: actionTypes.FETCH_POSITION_FAILED\r\n})\r\n\r\nexport const fetchRoleSuccess = (roleData) => ({\r\n    type: actionTypes.FETCH_ROLE_SUCCESS,\r\n    data: roleData\r\n})\r\n\r\nexport const fetchRoleFailed = () => ({\r\n    type: actionTypes.FETCH_ROLE_FAILED\r\n})\r\n\r\nexport const fetchPositionStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllCodeService(\"POSITION\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(fetchPositionSuccess(res.data))\r\n            } else {\r\n                dispatch(fetchPositionFailed())\r\n            }\r\n        } catch (error) {\r\n            dispatch(fetchPositionFailed());\r\n            console.log('fetchPositionFailed error', error);\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchRoleStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllCodeService(\"ROLE\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(fetchRoleSuccess(res.data))\r\n            } else {\r\n                dispatch(fetchRoleFailed())\r\n            }\r\n        } catch (error) {\r\n            dispatch(fetchRoleFailed());\r\n            console.log('fetchRoleFailed error', error);\r\n        }\r\n    }\r\n}\r\n\r\nexport const createNewUser = (data) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await createNewUserService(data);\r\n            if (res && res.errCode === 0) {\r\n                console.log(res)\r\n                toast.success(\"Create a new user succeed!\");\r\n                dispatch(saveUserSuccess());\r\n                dispatch(fetchAllUsersStart());\r\n            } else {\r\n                toast.error(res.errMessage)\r\n                dispatch(saveUserFailed());\r\n            }\r\n        } catch (error) {\r\n            dispatch(saveUserFailed());\r\n            console.log('saveUserFailed error', error);\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveUserSuccess = () => ({\r\n    type: actionTypes.CREATE_USER_SUCCESS\r\n})\r\n\r\nexport const saveUserFailed = () => ({\r\n    type: actionTypes.CREATE_USER_FAILED\r\n})\r\n\r\nexport const fetchAllUsersStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllUsers(\"ALL\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(fetchAllUsersSuccess(res.users.reverse()))\r\n            } else {\r\n                toast.error(\"Fetch all users error!\");\r\n                dispatch(fetchAllUsersFailed())\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Fetch all users error!\");\r\n            dispatch(fetchAllUsersFailed());\r\n            console.log('fetchAllUsersFailed error', error);\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchAllUsersSuccess = (data) => ({\r\n    type: actionTypes.FETCH_ALL_USERS_SUCCESS,\r\n    users: data\r\n})\r\n\r\nexport const fetchAllUsersFailed = () => ({\r\n    type: actionTypes.FETCH_ALL_USERS_FAILED\r\n})\r\n\r\nexport const deleteAUser = (userId) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await deleteUserService(userId);\r\n            if (res && res.errCode === 0) {\r\n                toast.success(\"Delete the user succeed!\");\r\n                dispatch(deleteUserSuccess());\r\n                dispatch(fetchAllUsersStart());\r\n            } else {\r\n                toast.error(\"Delete the user error!\");\r\n                dispatch(deleteUserFailed());\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Delete the user error!\");\r\n            dispatch(deleteUserFailed());\r\n            console.log('deleteUserFailed error', error);\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteUserSuccess = () => ({\r\n    type: actionTypes.DELETE_USER_SUCCESS,\r\n})\r\n\r\nexport const deleteUserFailed = () => ({\r\n    type: actionTypes.DELETE_USER_FAILED\r\n})\r\n\r\nexport const editAUser = (data) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await editUserService(data);\r\n            if (res && res.errCode === 0) {\r\n                toast.success(\"Update the user succeed!\");\r\n                dispatch(editUserSuccess());\r\n                dispatch(fetchAllUsersStart());\r\n            } else {\r\n                dispatch(editUserFailed());\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Update the user error!\");\r\n            dispatch(editUserFailed());\r\n            console.log('EditUserFailed error', error);\r\n        }\r\n    }\r\n}\r\n\r\nexport const editUserSuccess = () => ({\r\n    type: actionTypes.EDIT_USER_SUCCESS,\r\n})\r\n\r\nexport const editUserFailed = () => ({\r\n    type: actionTypes.EDIT_USER_FAILED\r\n})\r\n\r\nexport const fetchTopDoctor = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getTopDoctorHomeService('');\r\n            if (res && res.errCode === 0) {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_TOP_DOCTORS_SUCCESS,\r\n                    dataDoctors: res.data\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_TOP_DOCTORS_FAILED\r\n                })\r\n            }\r\n        } catch (error) {\r\n            console.log('FETCH_TOP_DOCTORS_FAILED:', error)\r\n            dispatch({\r\n                type: actionTypes.FETCH_TOP_DOCTORS_FAILED\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const fetchAllDoctors = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllDoctors();\r\n            if (res && res.errCode === 0) {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALL_DOCTORS_SUCCESS,\r\n                    dataDr: res.data\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALL_DOCTORS_FAILED\r\n                })\r\n            }\r\n        } catch (error) {\r\n            console.log('FETCH_ALL_DOCTORS_FAILED:', error)\r\n            dispatch({\r\n                type: actionTypes.FETCH_ALL_DOCTORS_FAILED\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveDetailDoctor = (data) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await saveDetailDoctorService(data);\r\n            if (res && res.errCode === 0) {\r\n                toast.success(\"Save infro detail doctor succeed!\");\r\n                dispatch({\r\n                    type: actionTypes.FETCH_SAVE_DETAIL_DOCTOR_SUCCESS,\r\n                })\r\n            } else {\r\n                toast.error(\"Save infro detail doctor error!\");\r\n                dispatch({\r\n                    type: actionTypes.FETCH_SAVE_DETAIL_DOCTOR_FAILED\r\n                })\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Save infro detail doctor error!\");\r\n            console.log('FETCH_SAVE_DETAIL_DOCTOR_FAILED:', error)\r\n            dispatch({\r\n                type: actionTypes.FETCH_SAVE_DETAIL_DOCTOR_FAILED\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const fetchAllScheduleTime = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllCodeService(\"TIME\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS,\r\n                    dataTime: res.data\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAILED\r\n                })\r\n            }\r\n        } catch (error) {\r\n            console.log('FETCH_ALLCODE_SCHEDULE_TIME_FAILED:', error)\r\n            dispatch({\r\n                type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAILED\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const getRequiredDoctorInfor = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({\r\n                type: actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_START\r\n            })\r\n            let resPrice = await getAllCodeService(\"PRICE\");\r\n            let resPayment = await getAllCodeService(\"PAYMENT\");\r\n            let resProvince = await getAllCodeService(\"PROVINCE\");\r\n            let resSpecialty = await getAllSpecialty();\r\n            let resClinic = await getAllClinic();\r\n\r\n            if (resPrice && resPrice.errCode === 0\r\n                && resPayment && resPayment.errCode === 0\r\n                && resProvince && resProvince.errCode === 0\r\n                && resSpecialty && resSpecialty.errCode === 0\r\n                && resClinic && resClinic.errCode === 0\r\n            ) {\r\n                let data = {\r\n                    resPrice: resPrice.data,\r\n                    resPayment: resPayment.data,\r\n                    resProvince: resProvince.data,\r\n                    resSpecialty: resSpecialty.data,\r\n                    resClinic: resClinic.data,\r\n                }\r\n                dispatch(fetchRequiredDoctorInforPriceSuccess(data))\r\n            } else {\r\n                dispatch(fetchRequiredDoctorInforPriceFailed())\r\n            }\r\n        } catch (error) {\r\n            dispatch(fetchRequiredDoctorInforPriceFailed());\r\n            console.log('fetchRequiredDoctorInforPriceFailed error', error);\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchRequiredDoctorInforPriceSuccess = (allRequiredData) => ({\r\n    type: actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_SUCCESS,\r\n    data: allRequiredData\r\n})\r\n\r\nexport const fetchRequiredDoctorInforPriceFailed = () => ({\r\n    type: actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_FAILED\r\n})","import actionTypes from '../actions/actionTypes';\r\n\r\nconst initContentOfConfirmModal = {\r\n    isOpen: false,\r\n    messageId: \"\",\r\n    handleFunc: null,\r\n    dataFunc: null\r\n}\r\n\r\nconst initialState = {\r\n    started: true,\r\n    language: 'vi',\r\n    systemMenuPath: '/system/user-redux',\r\n    contentOfConfirmModal: {\r\n        ...initContentOfConfirmModal\r\n    }\r\n}\r\n// /system/user-manage\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.APP_START_UP_COMPLETE:\r\n            return {\r\n                ...state,\r\n                started: true\r\n            }\r\n        case actionTypes.SET_CONTENT_OF_CONFIRM_MODAL:\r\n            return {\r\n                ...state,\r\n                contentOfConfirmModal: {\r\n                    ...state.contentOfConfirmModal,\r\n                    ...action.contentOfConfirmModal\r\n                }\r\n            }\r\n        case actionTypes.CHANGE_LANGUAGE:\r\n            return {\r\n                ...state,\r\n                language: action.language\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default appReducer;","import actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    isLoadingGender: false,\r\n    genders: [],\r\n    roles: [],\r\n    positions: [],\r\n    users: [],\r\n    topDoctors: [],\r\n    allDoctors: [],\r\n    allScheduleTime: [],\r\n    allRequiredDoctorInfor: []\r\n}\r\n\r\nconst adminReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_GENDER_START:\r\n            state.isLoadingGender = true;\r\n            return {\r\n                ...state,\r\n            }\r\n        case actionTypes.FETCH_GENDER_SUCCESS:\r\n            state.genders = action.data;\r\n            state.isLoadingGender = false;\r\n            return {\r\n                ...state\r\n            }\r\n        case actionTypes.FETCH_GENDER_FAILED:\r\n            state.genders = [];\r\n            state.isLoadingGender = false;\r\n            return {\r\n                ...state,\r\n            }\r\n        case actionTypes.FETCH_POSITION_SUCCESS:\r\n            state.positions = action.data;\r\n            return {\r\n                ...state\r\n            }\r\n        case actionTypes.FETCH_POSITION_FAILED:\r\n            state.positions = [];\r\n            return {\r\n                ...state,\r\n            }\r\n        case actionTypes.FETCH_ROLE_SUCCESS:\r\n            state.roles = action.data;\r\n            return {\r\n                ...state\r\n            }\r\n        case actionTypes.FETCH_ROLE_FAILED:\r\n            state.roles = [];\r\n            return {\r\n                ...state,\r\n            }\r\n        case actionTypes.FETCH_ALL_USERS_SUCCESS:\r\n            state.users = action.users;\r\n            return {\r\n                ...state\r\n            }\r\n        case actionTypes.FETCH_ALL_USERS_FAILED:\r\n            state.users = [];\r\n            return {\r\n                ...state,\r\n            }\r\n        case actionTypes.FETCH_TOP_DOCTORS_SUCCESS:\r\n            state.topDoctors = action.dataDoctors;\r\n            return {\r\n                ...state\r\n            }\r\n        case actionTypes.FETCH_TOP_DOCTORS_FAILED:\r\n            state.topDoctors = [];\r\n            return {\r\n                ...state,\r\n            }\r\n        case actionTypes.FETCH_ALL_DOCTORS_SUCCESS:\r\n            state.allDoctors = action.dataDr;\r\n            return {\r\n                ...state\r\n            }\r\n        case actionTypes.FETCH_ALL_DOCTORS_FAILED:\r\n            state.allDoctors = [];\r\n            return {\r\n                ...state,\r\n            }\r\n        case actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS:\r\n            state.allScheduleTime = action.dataTime;\r\n            return {\r\n                ...state\r\n            }\r\n        case actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAIL:\r\n            state.allScheduleTime = [];\r\n            return {\r\n                ...state,\r\n            }\r\n        // case actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_START:\r\n        //     state.allScheduleTime = action.dataTime;\r\n        //     return {\r\n        //         ...state\r\n        //     }\r\n        case actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_SUCCESS:\r\n            state.allRequiredDoctorInfor = action.data;\r\n            return {\r\n                ...state\r\n            }\r\n        case actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_FAILED:\r\n            state.allRequiredDoctorInfor = [];\r\n            return {\r\n                ...state,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default adminReducer;","import actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    userInfo: null\r\n}\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.USER_LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: true,\r\n                userInfo: action.userInfo\r\n            }\r\n        case actionTypes.USER_LOGIN_FAIL:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                userInfo: null\r\n            }\r\n        case actionTypes.PROCESS_LOGOUT:\r\n            localStorage.removeItem(\"accessToken\");\r\n            let localUserData = JSON.parse(localStorage.getItem(\"persist:user\"));\r\n            localUserData.isLoggedIn = false;\r\n            localStorage.setItem(\"persist:user\", JSON.stringify(localUserData));\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                userInfo: null\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default appReducer;","import { combineReducers } from 'redux';\r\nimport { connectRouter } from 'connected-react-router';\r\n\r\nimport appReducer from \"./appReducer\";\r\nimport adminReducer from \"./adminReducer\";\r\nimport userReducer from \"./userReducer\";\r\n\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { persistReducer } from 'redux-persist';\r\n\r\nconst persistCommonConfig = {\r\n    storage: storage,\r\n    stateReconciler: autoMergeLevel2,\r\n};\r\n\r\nconst userPersistConfig = {\r\n    ...persistCommonConfig,\r\n    key: 'user',\r\n    whitelist: ['isLoggedIn', 'userInfo']\r\n};\r\n\r\nconst appPersistConfig = {\r\n    ...persistCommonConfig,\r\n    key: 'app',\r\n    whitelist: ['language']\r\n}\r\n\r\nexport default (history) => combineReducers({\r\n    router: connectRouter(history),\r\n    user: persistReducer(userPersistConfig, userReducer),\r\n    app: persistReducer(appPersistConfig, appReducer),\r\n    admin: adminReducer\r\n})","import { logger } from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { routerMiddleware } from 'connected-react-router';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { createStateSyncMiddleware } from 'redux-state-sync';\r\nimport { persistStore } from 'redux-persist';\r\n\r\nimport createRootReducer from './store/reducers/rootReducer';\r\nimport actionTypes from './store/actions/actionTypes';\r\nimport reduxThunk from 'redux-thunk';\r\n\r\nconst environment = process.env.NODE_ENV || \"development\";\r\nlet isDevelopment = environment === \"development\";\r\n\r\n//hide redux logs\r\nisDevelopment = false;\r\n\r\n\r\nexport const history = createBrowserHistory({ basename: process.env.REACT_APP_ROUTER_BASE_NAME });\r\n\r\nconst reduxStateSyncConfig = {\r\n    whitelist: [\r\n        actionTypes.APP_START_UP_COMPLETE,\r\n        actionTypes.CHANGE_LANGUAGE\r\n    ]\r\n}\r\n\r\nconst rootReducer = createRootReducer(history);\r\nconst middleware = [\r\n    routerMiddleware(history),\r\n    thunkMiddleware,\r\n    createStateSyncMiddleware(reduxStateSyncConfig),\r\n    reduxThunk\r\n]\r\nif (isDevelopment) middleware.push(logger);\r\n\r\nconst composeEnhancers = (isDevelopment && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : compose;\r\n\r\nconst reduxStore = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(...middleware)),\r\n)\r\n// console.log(\"🚀 ~ file: redux.js:43 ~ reduxStore\", reduxStore.getState())\r\nexport const dispatch = reduxStore.dispatch;\r\n\r\nexport const persistor = persistStore(reduxStore);\r\n\r\nexport default reduxStore;","import locationHelperBuilder from \"redux-auth-wrapper/history4/locationHelper\";\r\nimport { connectedRouterRedirect } from \"redux-auth-wrapper/history4/redirect\";\r\n\r\nconst locationHelper = locationHelperBuilder({});\r\n\r\nexport const userIsAuthenticated = connectedRouterRedirect({\r\n    // authenticatedSelector: state => state.user.isLoggedIn,\r\n    authenticatedSelector: state => {\r\n        let userData = JSON.parse(localStorage.getItem('persist:user'))\r\n        if (userData && userData.isLoggedIn && userData.isLoggedIn === \"true\") {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    },\r\n    wrapperDisplayName: 'UserIsAuthenticated',\r\n    redirectPath: '/login'\r\n});\r\n// JSON.parse(JSON.parse(localStorage.getItem('persist:user')).userInfo)\r\nexport const UserIsNotAuthenticatedAndAdminRole = connectedRouterRedirect({\r\n    // Want to redirect the user when they are authenticated\r\n    authenticatedSelector: state => !state.user.isLoggedIn,\r\n    wrapperDisplayName: 'UserIsNotAuthenticatedAndAdminRole',\r\n    redirectPath: '/system/user-manage',\r\n    allowRedirectBack: false\r\n});\r\n\r\n\r\nexport const UserIsNotAuthenticatedAndDoctorRole = connectedRouterRedirect({\r\n    // Want to redirect the user when they are authenticated\r\n    authenticatedSelector: state => !state.user.isLoggedIn,\r\n    wrapperDisplayName: 'UserIsNotAuthenticatedAndDoctorRole',\r\n    redirectPath: '/doctor/manage-schedule',\r\n    allowRedirectBack: false\r\n});","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            linkToRedirect: '/home'\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n    }\r\n    render() {\r\n        let { linkToRedirect } = this.state\r\n        const { isLoggedIn, userInfo } = this.props;\r\n        console.log(\"🚀 ~ file: Home.js:54 ~ Home ~ render ~ userInfo\", userInfo)\r\n        // let linkToRedirect = ''\r\n        if (isLoggedIn && userInfo.roleId === \"R1\") {\r\n            linkToRedirect = '/system/user-manage'\r\n        } else if (isLoggedIn && userInfo.roleId === \"R2\") {\r\n            linkToRedirect = '/doctor/manage-schedule'\r\n        }\r\n        console.log(\"🚀 ~ file: Home.js:10 ~ Home ~ render ~ linkToRedirect\", linkToRedirect)\r\n        return (\r\n            <Redirect to={linkToRedirect} />\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        userInfo: state.user.userInfo\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { push } from \"connected-react-router\";\r\n\r\n// import * as actions from \"../store/actions\";\r\nimport * as actions from \"../../store/actions\";\r\nimport './Login.scss';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { handleLoginApi } from \"../../services/userService\"\r\nimport MyComponent from './Test';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            isShowPassword: false,\r\n            errorMessage: '',\r\n        }\r\n    }\r\n\r\n    handleOnChangeUsername = (event) => {\r\n        this.setState({\r\n            username: event.target.value\r\n        })\r\n    }\r\n    handleOnChangePassword = (event) => {\r\n        this.setState({\r\n            password: event.target.value\r\n        })\r\n    }\r\n    handleLogin = async () => {\r\n        this.setState({\r\n            errorMessage: ''\r\n        })\r\n        try {\r\n            let data = await handleLoginApi(this.state.username, this.state.password)\r\n            if (data && data.errCode !== 0) {\r\n                // console.log('data:', data)\r\n                this.setState({\r\n                    errorMessage: data.message\r\n                })\r\n            }\r\n            if (data && data.errCode === 0) {\r\n                localStorage.setItem(\"accessToken\", data.user.accessToken);\r\n                let localUserData = JSON.parse(localStorage.getItem(\"persist:user\"));\r\n                localUserData.isLoggedIn = \"true\";\r\n                localStorage.setItem(\"persist:user\", JSON.stringify(localUserData));\r\n                this.props.userLoginSuccess(data.user)\r\n            }\r\n        } catch (error) {\r\n            if (error.response) {\r\n                if (error.response.data) {\r\n                    this.setState({\r\n                        errorMessage: error.response.data.message\r\n                    })\r\n                }\r\n            }\r\n\r\n            // console.log(error)\r\n        }\r\n    }\r\n    handleShowPassowrd = () => {\r\n        this.setState({\r\n            isShowPassword: !this.state.isShowPassword\r\n        })\r\n    }\r\n    // testCount = () => {\r\n    //     this.setState({\r\n    //         count: this.state.count + 1\r\n    //     })\r\n    // }\r\n    handleKeyDown = (event) => {\r\n        if (event.key === \"Enter\" || event.keyCode === 13) {\r\n            this.handleLogin();\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                {/* <div>\r\n                    <MyComponent\r\n                    // count={this.state.count}\r\n                    />\r\n                </div>\r\n                <div><button onClick={() => this.testCount()} >Click</button></div> */}\r\n                <div className='login-background'>\r\n                    <div className='login-container'>\r\n                        <div className='login-content row'>\r\n                            <div className='col-12 text-login'>Login</div>\r\n                            <div className='col-12 form-group login-input'>\r\n                                <label>Username</label>\r\n                                <input type='text' className='form-control' placeholder='Enter your username'\r\n                                    value={this.state.username} onChange={(event) => this.handleOnChangeUsername(event)} />\r\n                            </div>\r\n                            <div className='col-12 form-group login-input'>\r\n                                <label>Password</label>\r\n                                <div className='custom-input-password'>\r\n                                    <input className='form-control' type={this.state.isShowPassword ? 'text' : 'password'} placeholder='Enter your passowrd'\r\n                                        value={this.state.password} onChange={(event) => this.handleOnChangePassword(event)}\r\n                                        onKeyDown={(event) => this.handleKeyDown(event)}\r\n                                    />\r\n                                    <span onClick={() => this.handleShowPassowrd()}><i className={this.state.isShowPassword ? \"fas fa-eye-slash\" : \"far fa-eye\"}></i></span>\r\n                                </div>\r\n                            </div>\r\n                            <div className='col-12' style={{ color: 'red' }}>\r\n                                {this.state.errorMessage}\r\n                            </div>\r\n                            <div className='col-12'>\r\n                                <button className='btn-login' onClick={() => this.handleLogin()}>Login</button>\r\n                            </div>\r\n                            <div className='col-12'>\r\n                                <span className='forgot-password'>Forgot your password?</span>\r\n                            </div>\r\n                            <div className='col-12 text-center mt-3'>\r\n                                <span className='text-other-login'>Or Login with:</span>\r\n                            </div>\r\n                            <div className='col-12 social-login'>\r\n                                <i className=\"fab fa-google-plus-g google\"></i>\r\n                                <i className=\"fab fa-facebook-f facebook\"></i>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        navigate: (path) => dispatch(push(path)),\r\n        // userLoginFail: () => dispatch(actions.adminLoginFail()),\r\n        userLoginSuccess: (userInfo) => dispatch(actions.userLoginSuccess(userInfo))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import React from \"react\";\r\n\r\nclass MyComponent extends React.Component {\r\n    render() {\r\n        let name = \"Hung Tran\";\r\n        console.log(this.props.count)\r\n        return (\r\n            <div>\r\n                {console.log(\"Hello world!\")}\r\n                hello my component, My name is {name}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MyComponent;\r\n","import EventEmitter from 'events';\r\n\r\nconst _emitter = new EventEmitter();\r\n_emitter.setMaxListeners(0);\r\n\r\nexport const emitter = _emitter","import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from 'reactstrap';\r\nimport { emitter } from '../../utils/emitter'\r\n\r\nclass ModalUser extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            address: ''\r\n        }\r\n        this.listenToEmitter();\r\n    }\r\n\r\n    listenToEmitter() {\r\n        emitter.on('EVENT_CLEAR_MODAL_DATA', () => {\r\n            this.setState({\r\n                email: '',\r\n                password: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                address: ''\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    toggle = () => {\r\n        this.props.toggleFromParent();\r\n    }\r\n\r\n    handleOnChangeInput = (event, id) => {\r\n        let copyState = { ...this.state };\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState\r\n        })\r\n    }\r\n\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrInput = ['email', 'password', 'firstName', 'lastName', 'address']\r\n        for (let i = 0; i < arrInput.length; i++) {\r\n            if (!this.state[arrInput[i]]) {\r\n                isValid = false;\r\n                alert('Missing data: ' + arrInput[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    handleAddNewUser = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid == true) {\r\n            this.props.creatNewuser(this.state);\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal\r\n                isOpen={this.props.isOpen}\r\n                toggle={this.toggle}\r\n                className={'modal-user-container'}\r\n                size=\"lg\"\r\n            >\r\n                <ModalHeader toggle={() => { this.toggle() }}>\r\n                    Create a new user\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <div className='modal-user-body'>\r\n                        <div className='input-container'>\r\n                            <label>Email</label>\r\n                            <input className='' type='text'\r\n                                onChange={(e) => this.handleOnChangeInput(e, 'email')}\r\n                                value={this.state.email}\r\n                            ></input>\r\n                        </div>\r\n                        <div className='input-container'>\r\n                            <label>Password</label>\r\n                            <input className='' type='password'\r\n                                onChange={(e) => this.handleOnChangeInput(e, 'password')}\r\n                                value={this.state.password}\r\n                            ></input>\r\n                        </div>\r\n                        <div className='input-container'>\r\n                            <label>First Name</label>\r\n                            <input className='' type='text'\r\n                                onChange={(e) => this.handleOnChangeInput(e, 'firstName')}\r\n                                value={this.state.firstName}\r\n                            ></input>\r\n                        </div>\r\n                        <div className='input-container'>\r\n                            <label>Last Name</label>\r\n                            <input className='' type='text'\r\n                                onChange={(e) => this.handleOnChangeInput(e, 'lastName')}\r\n                                value={this.state.lastName}\r\n                            ></input>\r\n                        </div>\r\n                        <div className='input-container max-width-input'>\r\n                            <label>Address</label>\r\n                            <input className='' type='text'\r\n                                onChange={(e) => this.handleOnChangeInput(e, 'address')}\r\n                                value={this.state.address}\r\n                            ></input>\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color='primary' className='px-3' onClick={() => { this.handleAddNewUser() }}>Add new</Button>{' '}\r\n                    <Button color='secondary' className='px-3' onClick={() => { this.toggle() }}>Close</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalUser);\r\n","import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from 'reactstrap';\r\nimport { emitter } from '../../utils/emitter'\r\nimport _ from 'lodash';\r\n\r\n\r\nclass ModalEditUser extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: '',\r\n            email: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            address: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let user = this.props.currentUser\r\n        if (user && !_.isEmpty(user)) {\r\n            this.setState({\r\n                id: user.id,\r\n                email: user.email,\r\n                password: \"user.password\",\r\n                firstName: user.firstName,\r\n                lastName: user.lastName,\r\n                address: user.address\r\n            })\r\n        }\r\n    }\r\n\r\n    toggle = () => {\r\n        this.props.toggleFromParent();\r\n    }\r\n\r\n    handleOnChangeInput = (event, id) => {\r\n        let copyState = { ...this.state };\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState\r\n        })\r\n    }\r\n\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrInput = ['email', 'password', 'firstName', 'lastName', 'address']\r\n        for (let i = 0; i < arrInput.length; i++) {\r\n            if (!this.state[arrInput[i]]) {\r\n                isValid = false;\r\n                alert('Missing data: ' + arrInput[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    handleAddNewUser = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === true) {\r\n            this.props.creatNewuser(this.state);\r\n        }\r\n    }\r\n\r\n    handleSaveUser = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === true) {\r\n            this.props.editUser(this.state);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                isOpen={this.props.isOpen}\r\n                toggle={this.toggle}\r\n                className={'modal-user-container'}\r\n                size=\"lg\"\r\n            >\r\n                <ModalHeader toggle={() => { this.toggle() }}>\r\n                    Edit a new user\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <div className='modal-user-body'>\r\n                        <div className='input-container'>\r\n                            <label>Email</label>\r\n                            <input className='' type='text'\r\n                                onChange={(e) => this.handleOnChangeInput(e, 'email')}\r\n                                value={this.state.email}\r\n                                disabled\r\n                            ></input>\r\n                        </div>\r\n                        <div className='input-container'>\r\n                            <label>Password</label>\r\n                            <input className='' type='password'\r\n                                onChange={(e) => this.handleOnChangeInput(e, 'password')}\r\n                                value={this.state.password}\r\n                                disabled\r\n                            ></input>\r\n                        </div>\r\n                        <div className='input-container'>\r\n                            <label>First Name</label>\r\n                            <input className='' type='text'\r\n                                onChange={(e) => this.handleOnChangeInput(e, 'firstName')}\r\n                                value={this.state.firstName}\r\n                            ></input>\r\n                        </div>\r\n                        <div className='input-container'>\r\n                            <label>Last Name</label>\r\n                            <input className='' type='text'\r\n                                onChange={(e) => this.handleOnChangeInput(e, 'lastName')}\r\n                                value={this.state.lastName}\r\n                            ></input>\r\n                        </div>\r\n                        <div className='input-container max-width-input'>\r\n                            <label>Address</label>\r\n                            <input className='' type='text'\r\n                                onChange={(e) => this.handleOnChangeInput(e, 'address')}\r\n                                value={this.state.address}\r\n                            ></input>\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color='primary' className='px-3' onClick={() => { this.handleSaveUser() }}>Save changes</Button>{' '}\r\n                    <Button color='secondary' className='px-3' onClick={() => { this.toggle() }}>Close</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalEditUser);\r\n","import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './UserManage.scss'\r\nimport { getAllUsers, createNewUserService, deleteUserService, editUserService } from '../../services/userService'\r\nimport ModalUser from './ModalUser';\r\nimport { emitter } from '../../utils/emitter'\r\nimport ModalEditUser from './ModalEditUser';\r\nimport { toast } from 'react-toastify';\r\nclass UserManage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arrUsers: [],\r\n            isOpenModalUser: false,\r\n            isOpenModalEditUser: false,\r\n            userEdit: {}\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.getAllUsersFromReact();\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        // if (prevProps.userInfo !== this.props.userInfo) {\r\n        //     await this.getAllUsersFromReact();\r\n        // }\r\n    }\r\n\r\n    getAllUsersFromReact = async () => {\r\n        let response = await getAllUsers('ALL');\r\n        if (response && response.errCode === 0) {\r\n            this.setState({\r\n                arrUsers: response['users']\r\n            })\r\n        }\r\n    }\r\n\r\n    handleAddNewUser = () => {\r\n        this.setState({\r\n            isOpenModalUser: true,\r\n        })\r\n    }\r\n\r\n    toggleUserModal = () => {\r\n        this.setState({\r\n            isOpenModalUser: !this.state.isOpenModalUser,\r\n        })\r\n    }\r\n\r\n    toggleUserEditModal = () => {\r\n        this.setState({\r\n            isOpenModalEditUser: !this.state.isOpenModalEditUser,\r\n        })\r\n    }\r\n\r\n    creatNewuser = async (data) => {\r\n        try {\r\n            let response = await createNewUserService(data);\r\n            if (response && response.errCode !== 0) {\r\n                alert(response.errMessage)\r\n            } else {\r\n                await this.getAllUsersFromReact();\r\n                this.setState({\r\n                    isOpenModalUser: false\r\n                })\r\n                emitter.emit('EVENT_CLEAR_MODAL_DATA')\r\n                // emitter.emit('EVENT_CLEAR_MODAL_DATA', { 'id': 123 })\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    handleDeleteUser = async (user) => {\r\n        try {\r\n            let res = await deleteUserService(user.id);\r\n            if (res && res.errCode === 0) {\r\n                await this.getAllUsersFromReact();\r\n            } else {\r\n                alert(res.errMessage)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    handleEditUser = (user) => {\r\n        this.setState({\r\n            isOpenModalEditUser: true,\r\n            userEdit: user\r\n        })\r\n    }\r\n\r\n    doEditUser = async (user) => {\r\n        try {\r\n            let res = await editUserService(user);\r\n            if (res && res.errCode === 0) {\r\n                this.setState({\r\n                    isOpenModalEditUser: false\r\n                })\r\n                await this.getAllUsersFromReact()\r\n                toast.success('Update successfully')\r\n            } else {\r\n                toast.error('Error')\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let arrUsers = [...this.state.arrUsers]\r\n        return (\r\n            <div className='users-container'>\r\n                <ModalUser\r\n                    isOpen={this.state.isOpenModalUser}\r\n                    toggleFromParent={this.toggleUserModal}\r\n                    creatNewuser={this.creatNewuser}\r\n                />\r\n                {\r\n                    this.state.isOpenModalEditUser &&\r\n                    < ModalEditUser\r\n                        isOpen={this.state.isOpenModalEditUser}\r\n                        toggleFromParent={this.toggleUserEditModal}\r\n                        currentUser={this.state.userEdit}\r\n                        editUser={this.doEditUser}\r\n                    />\r\n                }\r\n\r\n                <div className=\"title text-center\">Manage users</div>\r\n                <div className='mx-1'>\r\n                    <button className='btn btn-primary px-3' onClick={() => this.handleAddNewUser()}>\r\n                        <i className=\"fas fa-plus\"></i>&nbsp;&nbsp;Add new users\r\n                    </button>\r\n                </div>\r\n                <div className='users-table mt-3 mx-1'>\r\n                    <table id=\"customers\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Email</th>\r\n                                <th>First Name</th>\r\n                                <th>Last Name</th>\r\n                                <th>Address</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {arrUsers && arrUsers.map((item, index) => {\r\n                                return (\r\n                                    <tr className='divClass' key={item.id}>\r\n                                        <td>{item.email}</td>\r\n                                        <td>{item.firstName}</td>\r\n                                        <td>{item.lastName}</td>\r\n                                        <td>{item.address}</td>\r\n                                        <td>\r\n                                            <button className='btn-edit' onClick={() => this.handleEditUser(item)}><i className=\"fas fa-pencil-alt\"></i></button>\r\n                                            <button className='btn-delete' onClick={() => this.handleDeleteUser(item)}><i className=\"fas fa-trash\"></i></button>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        userInfo: state.user.userInfo\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManage);\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './Navigator.scss';\r\n\r\nclass MenuGroup extends Component {\r\n\r\n    render() {\r\n        const { name, children } = this.props;\r\n        return (\r\n            <li className=\"menu-group\">\r\n                <div className=\"menu-group-name\">\r\n                    <FormattedMessage id={name} />\r\n                </div>\r\n                <ul className=\"menu-list list-unstyled\">\r\n                    {children}\r\n                </ul>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nclass Menu extends Component {\r\n\r\n    render() {\r\n        const { name, active, link, children, onClick, hasSubMenu, onLinkClick } = this.props;\r\n        return (\r\n            <li className={\"menu\" + (hasSubMenu ? \" has-sub-menu\" : \"\") + (\"\") + (active ? \" active\" : \"\")}>\r\n                {hasSubMenu ? (\r\n                    <Fragment>\r\n                        <span\r\n                            data-toggle=\"collapse\"\r\n                            className={\"menu-link collapsed\"}\r\n                            onClick={onClick}\r\n                            aria-expanded={\"false\"}\r\n                        >\r\n                            <FormattedMessage id={name} />\r\n                            <div className=\"icon-right\">\r\n                                <i className={\"far fa-angle-right\"} />\r\n                            </div>\r\n                        </span>\r\n                        <div>\r\n                            <ul className=\"sub-menu-list list-unstyled\">\r\n                                {children}\r\n                            </ul>\r\n                        </div>\r\n                    </Fragment>\r\n                ) : (\r\n                    <Link to={link} className=\"menu-link\" onClick={onLinkClick}>\r\n                        <FormattedMessage id={name} />\r\n                    </Link>\r\n                )}\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nclass SubMenu extends Component {\r\n\r\n    getItemClass = path => {\r\n        return this.props.location.pathname === path ? \"active\" : \"\";\r\n    };\r\n\r\n    render() {\r\n        const { name, link, onLinkClick } = this.props;\r\n        return (\r\n            <li className={\"sub-menu \" + this.getItemClass(link)}>\r\n                <Link to={link} className=\"sub-menu-link\" onClick={onLinkClick}>\r\n                    <FormattedMessage id={name} />\r\n                </Link>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nconst MenuGroupWithRouter = withRouter(MenuGroup);\r\nconst MenuWithRouter = withRouter(Menu);\r\nconst SubMenuWithRouter = withRouter(SubMenu);\r\n\r\nconst withRouterInnerRef = (WrappedComponent) => {\r\n\r\n    class InnerComponentWithRef extends React.Component {\r\n        render() {\r\n            const { forwardRef, ...rest } = this.props;\r\n            return <WrappedComponent {...rest} ref={forwardRef} />;\r\n        }\r\n    }\r\n\r\n    const ComponentWithRef = withRouter(InnerComponentWithRef, { withRef: true });\r\n\r\n    return React.forwardRef((props, ref) => {\r\n        return <ComponentWithRef {...props} forwardRef={ref} />;\r\n    });\r\n};\r\n\r\nclass Navigator extends Component {\r\n    state = {\r\n        expandedMenu: {}\r\n    };\r\n\r\n    toggle = (groupIndex, menuIndex) => {\r\n        const expandedMenu = {};\r\n        const needExpand = !(this.state.expandedMenu[groupIndex + '_' + menuIndex] === true);\r\n        if (needExpand) {\r\n            expandedMenu[groupIndex + '_' + menuIndex] = true;\r\n        }\r\n\r\n        this.setState({\r\n            expandedMenu: expandedMenu\r\n        });\r\n    };\r\n\r\n    isMenuHasSubMenuActive = (location, subMenus, link) => {\r\n        if (subMenus) {\r\n            if (subMenus.length === 0) {\r\n                return false;\r\n            }\r\n\r\n            const currentPath = location.pathname;\r\n            for (let i = 0; i < subMenus.length; i++) {\r\n                const subMenu = subMenus[i];\r\n                if (subMenu.link === currentPath) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (link) {\r\n            return this.props.location.pathname === link;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    checkActiveMenu = () => {\r\n        const { menus, location } = this.props;\r\n        outerLoop:\r\n        for (let i = 0; i < menus.length; i++) {\r\n            const group = menus[i];\r\n            if (group.menus && group.menus.length > 0) {\r\n                for (let j = 0; j < group.menus.length; j++) {\r\n                    const menu = group.menus[j];\r\n                    if (menu.subMenus && menu.subMenus.length > 0) {\r\n                        if (this.isMenuHasSubMenuActive(location, menu.subMenus, null)) {\r\n                            const key = i + '_' + j;\r\n                            this.setState({\r\n                                expandedMenu: {\r\n                                    [key]: true\r\n                                }\r\n                            });\r\n                            break outerLoop;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.checkActiveMenu();\r\n    };\r\n\r\n    // componentWillReceiveProps(nextProps, prevState) {\r\n    //     const { location, setAccountMenuPath, setSettingMenuPath } = this.props;\r\n    //     const { location: nextLocation } = nextProps;\r\n    //     if (location !== nextLocation) {\r\n    //         let pathname = nextLocation && nextLocation.pathname;\r\n    //         if ((pathname.startsWith('/account/') || pathname.startsWith('/fds/account/'))) {\r\n    //             setAccountMenuPath(pathname);\r\n    //         }\r\n    //         if (pathname.startsWith('/settings/')) {\r\n    //             setSettingMenuPath(pathname);\r\n    //         };\r\n    //     };\r\n    // };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { location } = this.props;\r\n        const { location: prevLocation } = prevProps;\r\n        if (location !== prevLocation) {\r\n            this.checkActiveMenu();\r\n        };\r\n    };\r\n\r\n    render() {\r\n        const { menus, location, onLinkClick } = this.props;\r\n        return (\r\n            <Fragment>\r\n                <ul className=\"navigator-menu list-unstyled\">\r\n                    {\r\n                        menus.map((group, groupIndex) => {\r\n                            return (\r\n                                <Fragment key={groupIndex}>\r\n                                    <MenuGroupWithRouter name={group.name}>\r\n                                        {group.menus ? (\r\n                                            group.menus.map((menu, menuIndex) => {\r\n                                                const isMenuHasSubMenuActive = this.isMenuHasSubMenuActive(location, menu.subMenus, menu.link);\r\n                                                const isSubMenuOpen = this.state.expandedMenu[groupIndex + '_' + menuIndex] === true;\r\n                                                return (\r\n                                                    <MenuWithRouter\r\n                                                        key={menuIndex}\r\n                                                        active={isMenuHasSubMenuActive}\r\n                                                        name={menu.name}\r\n                                                        link={menu.link}\r\n                                                        hasSubMenu={menu.subMenus}\r\n                                                        isOpen={isSubMenuOpen}\r\n                                                        onClick={() => this.toggle(groupIndex, menuIndex)}\r\n                                                        onLinkClick={onLinkClick}\r\n                                                    >\r\n                                                        {menu.subMenus && menu.subMenus.map((subMenu, subMenuIndex) => (\r\n                                                            <SubMenuWithRouter\r\n                                                                key={subMenuIndex}\r\n                                                                name={subMenu.name}\r\n                                                                link={subMenu.link}\r\n                                                                onClick={this.closeOtherExpand}\r\n                                                                onLinkClick={onLinkClick}\r\n                                                            />\r\n                                                        ))}\r\n                                                    </MenuWithRouter>\r\n                                                );\r\n                                            })\r\n                                        ) : null}\r\n                                    </MenuGroupWithRouter>\r\n                                </Fragment>\r\n                            );\r\n                        })\r\n                    }\r\n                </ul>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default withRouterInnerRef(connect(mapStateToProps, mapDispatchToProps)(Navigator));\r\n","export const adminMenu = [\r\n    { //quản lý người dùng\r\n        name: 'menu.admin.manage-user', menus: [\r\n            {\r\n                name: 'menu.admin.crud', link: '/system/user-manage'\r\n            },\r\n            {\r\n                name: 'menu.admin.crud-redux', link: '/system/user-redux'\r\n            },\r\n            {\r\n                name: 'menu.admin.manage-doctor', link: '/system/manage-doctor'\r\n                // subMenus: [\r\n                //     { name: 'menu.system.system-administrator.user-manage', link: '/system/user-manage' },\r\n                //     { name: 'menu.system.system-administrator.user-redux', link: '/system/user-redux' },\r\n                // ]\r\n            },\r\n            // {\r\n            //     name: 'menu.admin.manage-admin', link: '/system/user-admin'\r\n            // }\r\n            // { //quản lý kế hoạch của bác sĩ\r\n            //     name: 'menu.doctor.manage-schedule', link: '/doctor/manage-schedule'\r\n            //     // { name: 'menu.system.system-parameter.header', link: '/system/system-parameter' },\r\n            // },\r\n            {\r\n                name: 'menu.admin.manage-wallet', link: '/system/manage-wallet'\r\n            }\r\n            // { name: 'menu.system.system-parameter.header', link: '/system/system-parameter' },\r\n        ]\r\n    },\r\n    { //quản lý phòng khám\r\n        name: 'menu.admin.clinic', menus: [\r\n            {\r\n                name: 'menu.admin.manage-clinic', link: '/system/manage-clinic'\r\n            }\r\n        ]\r\n    },\r\n    { //quản lý chuyên khoa\r\n        name: 'menu.admin.specialty', menus: [\r\n            {\r\n                name: 'menu.admin.manage-specialty', link: '/system/manage-specialty'\r\n            }\r\n        ]\r\n    },\r\n    { //quản lý bài đăng\r\n        name: 'menu.admin.handbook', menus: [\r\n            {\r\n                name: 'menu.admin.manage-handbook', link: '/system/manage-handbook'\r\n            }\r\n        ]\r\n    },\r\n];\r\n\r\nexport const doctorMenu = [\r\n    { //quản lý kế hoạch của bác sĩ\r\n        name: 'menu.admin.manage-user',\r\n        menus: [\r\n            {\r\n                // name: 'menu.doctor.manage-schedule', link: '/system/user-manage'\r\n                name: 'menu.doctor.manage-schedule', link: '/doctor/manage-schedule'\r\n                // { name: 'menu.system.system-parameter.header', link: '/system/system-parameter' },\r\n            },\r\n            {\r\n                name: 'menu.doctor.manage-patient', link: '/doctor/manage-patient'\r\n            },\r\n            {\r\n                name: 'menu.admin.manage-wallet', link: '/system/manage-wallet'\r\n            },\r\n            {\r\n                name: 'menu.doctor.manage-live-chat', link: '/doctor/live-chat'\r\n            }\r\n        ]\r\n    }\r\n];","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport * as actions from \"../../store/actions\";\r\nimport Navigator from '../../components/Navigator';\r\nimport { adminMenu, doctorMenu } from './menuApp';\r\nimport './Header.scss';\r\nimport { LANGUAGES, USER_ROLE } from '../../utils'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport _ from 'lodash';\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            menuApp: []\r\n        }\r\n    }\r\n    handleChangeLanguage = (language) => {\r\n        this.props.changeLanguageAppRedux(language);\r\n    }\r\n    componentDidMount() {\r\n        // this.props.userInfo\r\n        let { userInfo } = this.props;\r\n        let menu = []\r\n        if (userInfo && !_.isEmpty(userInfo)) {\r\n            let role = userInfo.roleId;\r\n            if (role === USER_ROLE.ADMIN) {\r\n                menu = adminMenu\r\n            }\r\n            if (role === USER_ROLE.DOCTOR) {\r\n                menu = doctorMenu\r\n            }\r\n        }\r\n        this.setState({\r\n            menuApp: menu\r\n        })\r\n\r\n    }\r\n    render() {\r\n        const { processLogout, language, userInfo } = this.props;\r\n        return (\r\n            <div className=\"header-container\">\r\n                {/* thanh navigator */}\r\n                <div className=\"header-tabs-container\">\r\n                    <Navigator menus={this.state.menuApp} />\r\n                </div>\r\n                <div className='languages'>\r\n                    <span className='welcome'>\r\n                        <FormattedMessage id=\"homeheader.welcome\" />, {userInfo && userInfo.firstName ? userInfo.firstName : ''}!\r\n                    </span>\r\n                    <span className={language === LANGUAGES.VI ? 'language-vi active' : 'language-vi'}\r\n                        onClick={() => this.handleChangeLanguage(LANGUAGES.VI)}>\r\n                        VN\r\n                    </span>\r\n                    <span className={language === LANGUAGES.EN ? 'language-en active' : 'language-en'}\r\n                        onClick={() => this.handleChangeLanguage(LANGUAGES.EN)}>\r\n                        EN\r\n                    </span>\r\n                    <div className=\"btn btn-logout\" onClick={processLogout} title=\"Log out\">\r\n                        <i className=\"fas fa-sign-out-alt\"></i>\r\n                    </div>\r\n                </div>\r\n                {/* nút logout */}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n        userInfo: state.user.userInfo\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        processLogout: () => dispatch(actions.processLogout()),\r\n        changeLanguageAppRedux: (language) => dispatch(actions.changeLanguageApp(language))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './ManageDoctor.scss';\r\nimport * as actions from \"../../../store/actions\";\r\nimport { CRUD_ACTIONS, LANGUAGES } from '../../../utils';\r\n\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\n// import style manually\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\nimport Select from 'react-select';\r\nimport { getDetailInforDoctor } from \"../../../services/userService\"\r\n\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\nclass ManageDoctor extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //save to markdown table\r\n            contentMarkdown: '',\r\n            contentHTML: '',\r\n            selectedOption: '',\r\n            description: '',\r\n            listDoctors: [],\r\n            hasOldData: false,\r\n\r\n            //save to doctor_infor table\r\n            listPrice: [],\r\n            listPayment: [],\r\n            listProvince: [],\r\n            listClinic: [],\r\n            listSpecialty: [],\r\n            selectedPrice: '',\r\n            selectedPayment: '',\r\n            selectedProvince: '',\r\n            selectedClinic: '',\r\n            selectedSpecialty: '',\r\n            nameClinic: '',\r\n            addressClinic: '',\r\n            note: '',\r\n            clinicId: '',\r\n            specialtyId: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchAllDoctors();\r\n        this.props.getAllRequiredDoctorInfor();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (prevProps.allDoctors !== this.props.allDoctors) {\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors, 'USERS')\r\n            this.setState({\r\n                listDoctors: dataSelect\r\n            })\r\n        }\r\n        if (prevProps.allRequiredDoctorInfor !== this.props.allRequiredDoctorInfor) {\r\n            let { resPayment, resPrice, resProvince, resSpecialty, resClinic } = this.props.allRequiredDoctorInfor;\r\n            let dataSelectPrice = this.buildDataInputSelect(resPrice, 'PRICE')\r\n            let dataSelectPayment = this.buildDataInputSelect(resPayment, 'PAYMENT')\r\n            let dataSelectProvince = this.buildDataInputSelect(resProvince, 'PROVINCE')\r\n            let dataSelectSpecialty = this.buildDataInputSelect(resSpecialty, 'SPECIALTY')\r\n            let dataSelectClinic = this.buildDataInputSelect(resClinic, 'CLINIC')\r\n            this.setState({\r\n                listPrice: dataSelectPrice,\r\n                listPayment: dataSelectPayment,\r\n                listProvince: dataSelectProvince,\r\n                listSpecialty: dataSelectSpecialty,\r\n                listClinic: dataSelectClinic\r\n            })\r\n        }\r\n        if (prevProps.language !== this.props.language) {\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors, 'USERS')\r\n            let { resPayment, resPrice, resProvince } = this.props.allRequiredDoctorInfor;\r\n            let dataSelectPrice = this.buildDataInputSelect(resPrice, 'PRICE')\r\n            let dataSelectPayment = this.buildDataInputSelect(resPayment, 'PAYMENT')\r\n            let dataSelectProvince = this.buildDataInputSelect(resProvince, 'PROVINCE')\r\n\r\n            this.setState({\r\n                listDoctors: dataSelect,\r\n                listPrice: dataSelectPrice,\r\n                listPayment: dataSelectPayment,\r\n                listProvince: dataSelectProvince\r\n            })\r\n        }\r\n    }\r\n\r\n    buildDataInputSelect = (inputData, type) => {\r\n        let result = [];\r\n        let { language } = this.props;\r\n        if (inputData && inputData.length > 0) {\r\n            if (type === \"USERS\") {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    let labelVi = `${item.lastName} ${item.firstName}`;\r\n                    let labelEn = `${item.firstName} ${item.lastName}`;\r\n                    object.label = language === LANGUAGES.VI ? labelVi : labelEn\r\n                    object.value = item.id;\r\n                    result.push(object)\r\n                })\r\n            }\r\n            if (type === 'PRICE') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    let labelVi = `${item.valueVi}`;\r\n                    let labelEn = `${item.valueEn} USD`;\r\n                    object.label = language === LANGUAGES.VI ? labelVi : labelEn\r\n                    object.value = item.keyMap;\r\n                    result.push(object)\r\n                })\r\n            }\r\n            if (type === 'PAYMENT' || type === 'PROVINCE') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    let labelVi = `${item.valueVi}`;\r\n                    let labelEn = `${item.valueEn}`;\r\n                    object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                    object.value = item.keyMap;\r\n                    result.push(object)\r\n                })\r\n            }\r\n            if (type === 'SPECIALTY') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    object.label = item.name;\r\n                    object.value = item.id;\r\n                    result.push(object)\r\n                })\r\n            }\r\n            if (type === 'CLINIC') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    object.label = item.name;\r\n                    object.value = item.id;\r\n                    result.push(object)\r\n                })\r\n            }\r\n\r\n        }\r\n        return result\r\n    }\r\n\r\n    handleEditorChange = ({ html, text }) => {\r\n        this.setState({\r\n            contentMarkdown: text,\r\n            contentHTML: html\r\n        })\r\n    }\r\n\r\n    handleSaveContentMarkdown = () => {\r\n        let { hasOldData } = this.state;\r\n        this.props.saveDetailDoctor({\r\n            contentHTML: this.state.contentHTML,\r\n            contentMarkdown: this.state.contentMarkdown,\r\n            description: this.state.description,\r\n            doctorId: this.state.selectedOption.value,\r\n            action: hasOldData === true ? CRUD_ACTIONS.EDIT : CRUD_ACTIONS.CREATE,\r\n\r\n            selectedPrice: this.state.selectedPrice.value,\r\n            selectedPayment: this.state.selectedPayment.value,\r\n            selectedProvince: this.state.selectedProvince.value,\r\n            // selectedProvince: this.state.selectedProvince.value,\r\n            nameClinic: this.state.nameClinic,\r\n            addressClinic: this.state.addressClinic,\r\n            note: this.state.note,\r\n            clinicId: this.state.selectedClinic && this.state.selectedClinic.value ? this.state.selectedClinic.value : '',\r\n            specialtyId: this.state.selectedSpecialty.value\r\n        })\r\n    }\r\n\r\n    handleChangeSelect = async (selectedOption) => {\r\n        this.setState({ selectedOption });\r\n        let { listPayment, listProvince, listPrice, listSpecialty, listClinic } = this.state;\r\n        let res = await getDetailInforDoctor(selectedOption.value);\r\n        if (res && res.errCode === 0 && res.data && res.data.Markdown\r\n            && (res.data.Markdown.contentHTML || res.data.Markdown.contentMarkdown || res.data.Markdown.description)) {\r\n            let markdown = res.data.Markdown;\r\n            let addressClinic = '', nameClinic = '', note = '', paymentId = '', priceId = '', clinicId = '',\r\n                provinceId = '', selectedPayment = '', selectedPrice = '', selectedProvince = '',\r\n                specialtyId = '', selectedSpecialty = '', selectedClinic = ''\r\n\r\n            if (res.data.Doctor_Infor) {\r\n                addressClinic = res.data.Doctor_Infor.addressClinic;\r\n                nameClinic = res.data.Doctor_Infor.nameClinic;\r\n                note = res.data.Doctor_Infor.note;\r\n                paymentId = res.data.Doctor_Infor.paymentId;\r\n                priceId = res.data.Doctor_Infor.priceId;\r\n                provinceId = res.data.Doctor_Infor.provinceId;\r\n                specialtyId = res.data.Doctor_Infor.specialtyId;\r\n                clinicId = res.data.Doctor_Infor.clinicId;\r\n\r\n                selectedPayment = listPayment.find(item => {\r\n                    return item && item.value === paymentId\r\n                })\r\n                selectedPrice = listPrice.find(item => {\r\n                    return item && item.value === priceId\r\n                })\r\n                selectedProvince = listProvince.find(item => {\r\n                    return item && item.value === provinceId\r\n                })\r\n                selectedSpecialty = listSpecialty.find(item => {\r\n                    return item && item.value === specialtyId\r\n                })\r\n                selectedClinic = listClinic.find(item => {\r\n                    return item && item.value === clinicId\r\n                })\r\n            }\r\n            this.setState({\r\n                contentHTML: markdown.contentHTML,\r\n                contentMarkdown: markdown.contentMarkdown,\r\n                description: markdown.description,\r\n                hasOldData: true,\r\n                addressClinic: addressClinic,\r\n                nameClinic: nameClinic,\r\n                note: note,\r\n                selectedPayment: selectedPayment,\r\n                selectedPrice: selectedPrice,\r\n                selectedProvince: selectedProvince,\r\n                selectedSpecialty: selectedSpecialty,\r\n                selectedClinic: selectedClinic\r\n            })\r\n        } else {\r\n            this.setState({\r\n                contentHTML: \"\",\r\n                contentMarkdown: \"\",\r\n                description: \"\",\r\n                hasOldData: false,\r\n                addressClinic: \"\",\r\n                nameClinic: \"\",\r\n                note: \"\",\r\n                selectedPayment: \"\",\r\n                selectedPrice: \"\",\r\n                selectedProvince: \"\",\r\n                selectedSpecialty: \"\",\r\n                selectedClinic: \"\"\r\n            })\r\n        }\r\n    };\r\n\r\n    handleChangeSelectDoctorInfor = async (selectedOption, name) => {\r\n        let stateName = name.name;\r\n        let stateCopy = { ...this.state }\r\n        stateCopy[stateName] = selectedOption;\r\n        this.setState({\r\n            ...stateCopy\r\n        })\r\n\r\n    }\r\n\r\n    handleOnChangeText = (event, id) => {\r\n        let stateCopy = { ...this.state }\r\n        stateCopy[id] = event.target.value\r\n        this.setState({\r\n            ...stateCopy\r\n        })\r\n    }\r\n    render() {\r\n        let { hasOldData, listSpecialty } = this.state;\r\n        console.log(\"🚀 ~ file: ManageDoctor.js:147 ~ ManageDoctor ~ render ~ this.state\", this.state)\r\n        return (\r\n            <div className='manage-doctor-container'>\r\n                <div className='manage-doctor-title'><FormattedMessage id={\"admin.manage-doctor.title\"} /></div>\r\n                <div className='more-infor'>\r\n                    <div className='content-left'>\r\n                        <label><FormattedMessage id={\"admin.manage-doctor.select-doctor\"} /></label>\r\n                        <Select\r\n                            value={this.state.selectedDoctor}\r\n                            onChange={this.handleChangeSelect}\r\n                            options={this.state.listDoctors}\r\n                            placeholder={'Chọn bác sĩ'}\r\n                            name={\"selectedOption\"}\r\n                        />\r\n                    </div>\r\n                    <div className='content-right'>\r\n                        <label><FormattedMessage id={\"admin.manage-doctor.intro\"} /></label>\r\n                        <textarea className='form-control'\r\n                            onChange={(event) => this.handleOnChangeText(event, 'description')}\r\n                            value={this.state.description}\r\n                        >\r\n                        </textarea>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className='more-infor-extra row'>\r\n                    <div className='col-4 form-group'>\r\n                        <label><FormattedMessage id={\"admin.manage-doctor.price\"} /></label>\r\n                        <Select\r\n                            value={this.state.selectedPrice}\r\n                            onChange={this.handleChangeSelectDoctorInfor}\r\n                            options={this.state.listPrice}\r\n                            placeholder={<FormattedMessage id={\"admin.manage-doctor.price\"} />}\r\n                            name=\"selectedPrice\"\r\n                        />\r\n                    </div>\r\n                    <div className='col-4 form-group'>\r\n                        <label><FormattedMessage id={\"admin.manage-doctor.payment\"} /></label>\r\n                        <Select\r\n                            value={this.state.selectedPayment}\r\n                            onChange={this.handleChangeSelectDoctorInfor}\r\n                            options={this.state.listPayment}\r\n                            placeholder={<FormattedMessage id={\"admin.manage-doctor.payment\"} />}\r\n                            name=\"selectedPayment\"\r\n                        />\r\n                    </div>\r\n                    <div className='col-4 form-group'>\r\n                        <label><FormattedMessage id={\"admin.manage-doctor.province\"} /></label>\r\n                        <Select\r\n                            value={this.state.selectedProvince}\r\n                            onChange={this.handleChangeSelectDoctorInfor}\r\n                            options={this.state.listProvince}\r\n                            placeholder={<FormattedMessage id={\"admin.manage-doctor.province\"} />}\r\n                            name=\"selectedProvince\"\r\n                        />\r\n                    </div>\r\n                    <div className='col-4 form-group'>\r\n                        <label><FormattedMessage id={\"admin.manage-doctor.nameClinic\"} /></label>\r\n                        <input className='form-control'\r\n                            onChange={(event) => this.handleOnChangeText(event, 'nameClinic')}\r\n                            value={this.state.nameClinic}\r\n                        ></input>\r\n                    </div>\r\n                    <div className='col-4 form-group'>\r\n                        <label><FormattedMessage id={\"admin.manage-doctor.addressClinic\"} /></label>\r\n                        <input className='form-control'\r\n                            onChange={(event) => this.handleOnChangeText(event, 'addressClinic')}\r\n                            value={this.state.addressClinic}\r\n                        ></input>\r\n                    </div>\r\n                    <div className='col-4 form-group'>\r\n                        <label><FormattedMessage id={\"admin.manage-doctor.note\"} /></label>\r\n                        <input className='form-control'\r\n                            onChange={(event) => this.handleOnChangeText(event, 'note')}\r\n                            value={this.state.note}\r\n                        ></input>\r\n                    </div>\r\n                    <div className='col-4 form-group'>\r\n                        <label><FormattedMessage id={\"admin.manage-doctor.specialty\"} /></label>\r\n                        <Select\r\n                            value={this.state.selectedSpecialty}\r\n                            onChange={this.handleChangeSelectDoctorInfor}\r\n                            options={this.state.listSpecialty}\r\n                            placeholder={<FormattedMessage id={\"admin.manage-doctor.specialty\"} />}\r\n                            name=\"selectedSpecialty\"\r\n                        />\r\n                    </div>\r\n                    <div className='col-4 form-group'>\r\n                        <label><FormattedMessage id={\"admin.manage-doctor.select-clinic\"} /></label>\r\n                        <Select\r\n                            value={this.state.selectedClinic}\r\n                            onChange={this.handleChangeSelectDoctorInfor}\r\n                            options={this.state.listClinic}\r\n                            placeholder={<FormattedMessage id={\"admin.manage-doctor.select-clinic\"} />}\r\n                            name=\"selectedClinic\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n                {/* <div className='row'> */}\r\n\r\n                {/* </div> */}\r\n                <div className='manage-doctor-editor'>\r\n                    <MdEditor\r\n                        style={{ height: '300px' }}\r\n                        renderHTML={text => mdParser.render(text)}\r\n                        onChange={this.handleEditorChange}\r\n                        value={this.state.contentMarkdown}\r\n                    />\r\n\r\n                </div>\r\n                <button className={hasOldData === true ? 'save-content-doctor' : 'create-content-doctor'} onClick={() => this.handleSaveContentMarkdown()}>\r\n                    {hasOldData === true ?\r\n                        <span><FormattedMessage id={\"admin.manage-doctor.save\"} /></span> : <span><FormattedMessage id={\"admin.manage-doctor.add\"} /></span>}\r\n                </button>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        allDoctors: state.admin.allDoctors,\r\n        language: state.app.language,\r\n        allRequiredDoctorInfor: state.admin.allRequiredDoctorInfor\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\r\n        getAllRequiredDoctorInfor: () => dispatch(actions.getRequiredDoctorInfor()),\r\n        saveDetailDoctor: (data) => dispatch(actions.saveDetailDoctor(data))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageDoctor);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { LANGUAGES } from '../../../utils';\r\nimport './ManageSpecialty.scss'\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport { CommonUtils } from '../../../utils'\r\nimport { createNewSpecialty } from '../../../services/userService'\r\nimport { toast } from 'react-toastify'\r\n\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\nclass ManageSpecialty extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            imageBase64: '',\r\n            descriptionHTML: '',\r\n            descriptionMarkdown: ''\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n    }\r\n\r\n    showHideDetailInfor = (status) => {\r\n        this.setState({\r\n            isShowDetailInfor: status\r\n        })\r\n    }\r\n\r\n    handleOnChangeInput = (event, id) => {\r\n        let stateCopy = { ...this.state }\r\n        stateCopy[id] = event.target.value\r\n        this.setState({\r\n            ...stateCopy\r\n        })\r\n    }\r\n\r\n    handleEditorChange = ({ html, text }) => {\r\n        this.setState({\r\n            descriptionHTML: html,\r\n            descriptionMarkdown: text\r\n        })\r\n    }\r\n\r\n    handleOnchangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            this.setState({\r\n                imageBase64: base64\r\n            })\r\n        }\r\n        // event.target.value = null;\r\n    }\r\n\r\n    handleSaveNewSpecialty = async () => {\r\n        let res = await createNewSpecialty({\r\n            ...this.state\r\n        })\r\n        if (res && res.errCode === 0) {\r\n            toast.success('Add new specialty succeeds')\r\n            this.setState({\r\n                name: '',\r\n                imageBase64: '',\r\n                descriptionHTML: '',\r\n                descriptionMarkdown: ''\r\n            })\r\n        } else {\r\n            toast.error('Add new specialty error')\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='manage-specialty-container'>\r\n                <div className='ms-title'>Quản lý chuyên khoa</div>\r\n\r\n                <div className='add-new-specialty row'>\r\n                    <div className='col-6 form-group'>\r\n                        <label>Tên chuyên khoa</label>\r\n                        <input type='text' className='form-control' value={this.state.name}\r\n                            onChange={(event) => this.handleOnChangeInput(event, 'name')}\r\n                        ></input>\r\n                    </div>\r\n                    <div className='col-6 form-group'>\r\n                        <label>Ảnh chuyên khoa</label>\r\n                        <input type='file' className='form-control-file' onChange={(event) => this.handleOnchangeImage(event)}></input>\r\n                    </div>\r\n                    <div className='col-12'>\r\n                        <MdEditor\r\n                            style={{ height: '300px' }}\r\n                            renderHTML={text => mdParser.render(text)}\r\n                            onChange={this.handleEditorChange}\r\n                            value={this.state.descriptionMarkdown}\r\n                        />\r\n                    </div>\r\n                    <div className='col-12'>\r\n                        <button className='btn-save-new-specialty'\r\n                            onClick={() => this.handleSaveNewSpecialty()}\r\n                        >Save</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageSpecialty);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { LANGUAGES } from '../../../utils';\r\nimport './ManageClinic.scss'\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport { CommonUtils } from '../../../utils'\r\nimport { createNewClinic } from '../../../services/userService'\r\nimport { toast } from 'react-toastify'\r\n\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\nclass ManageClinic extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            imageBase64: '',\r\n            descriptionHTML: '',\r\n            descriptionMarkdown: '',\r\n            address: ''\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n    }\r\n\r\n    showHideDetailInfor = (status) => {\r\n        this.setState({\r\n            isShowDetailInfor: status\r\n        })\r\n    }\r\n\r\n    handleOnChangeInput = (event, id) => {\r\n        let stateCopy = { ...this.state }\r\n        stateCopy[id] = event.target.value\r\n        this.setState({\r\n            ...stateCopy\r\n        })\r\n    }\r\n\r\n    handleEditorChange = ({ html, text }) => {\r\n        this.setState({\r\n            descriptionHTML: html,\r\n            descriptionMarkdown: text\r\n        })\r\n    }\r\n\r\n    handleOnchangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            this.setState({\r\n                imageBase64: base64\r\n            })\r\n        }\r\n        // event.target.value = null;\r\n    }\r\n\r\n    handleSaveNewClinic = async () => {\r\n        let res = await createNewClinic({\r\n            ...this.state\r\n        })\r\n        if (res && res.errCode === 0) {\r\n            console.log(\"🚀 ~ file: ManageClinic.js:70 ~ ManageClinic ~ handleSaveNewClinic= ~ res\", res)\r\n            toast.success('Add new clinic succeeds')\r\n            this.setState({\r\n                name: '',\r\n                imageBase64: '',\r\n                address: '',\r\n                descriptionHTML: '',\r\n                descriptionMarkdown: ''\r\n            })\r\n        } else {\r\n            toast.error('Add new clinic error')\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='manage-specialty-container'>\r\n                <div className='ms-title'>Quản lý phòng khám</div>\r\n\r\n                <div className='add-new-specialty row'>\r\n                    <div className='col-6 form-group'>\r\n                        <label>Tên phòng khám</label>\r\n                        <input type='text' className='form-control' value={this.state.name}\r\n                            onChange={(event) => this.handleOnChangeInput(event, 'name')}\r\n                        ></input>\r\n                    </div>\r\n                    <div className='col-6 form-group'>\r\n                        <label>Ảnh phòng khám</label>\r\n                        <input type='file' className='form-control-file' onChange={(event) => this.handleOnchangeImage(event)}></input>\r\n                    </div>\r\n                    <div className='col-6 form-group'>\r\n                        <label>Địa chỉ phòng khám</label>\r\n                        <input type='text' className='form-control' value={this.state.address}\r\n                            onChange={(event) => this.handleOnChangeInput(event, 'address')}\r\n                        ></input>\r\n                    </div>\r\n                    <div className='col-12'>\r\n                        <MdEditor\r\n                            style={{ height: '300px' }}\r\n                            renderHTML={text => mdParser.render(text)}\r\n                            onChange={this.handleEditorChange}\r\n                            value={this.state.descriptionMarkdown}\r\n                        />\r\n                    </div>\r\n                    <div className='col-12'>\r\n                        <button className='btn-save-new-specialty'\r\n                            onClick={() => this.handleSaveNewClinic()}\r\n                        >Save</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageClinic);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport './ManageWallet.scss'\r\nimport Web3 from \"web3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\nimport { toast } from 'react-toastify'\r\nimport { getContractAbi } from '../../services/userService'\r\n\r\nclass ManageWallet extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: '',\r\n            balance: '',\r\n            web3Api: {\r\n                provider: null,\r\n                web3: null,\r\n                contract: null\r\n            },\r\n            smartContractAddress: '',\r\n            abi: {},\r\n            withdrawAmount: '',\r\n            contractBalance: '',\r\n            role: ''\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let { user } = this.props\r\n        if (user && user.roleId) {\r\n            this.setState({\r\n                role: user.roleId\r\n            })\r\n        }\r\n        let resAbi = await getContractAbi()\r\n        this.checkWalletIsConnected();\r\n        if (resAbi && resAbi.errCode === 0) {\r\n            let { address, abi } = resAbi.data\r\n            this.setState({\r\n                smartContractAddress: address,\r\n                abi: abi\r\n            })\r\n            await this.loadProvider(abi, address);\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (this.state.account !== preState.account) {\r\n            let { web3Api } = this.state;\r\n            web3Api.web3.eth.defaultAccount = this.state.account;\r\n            let web3 = web3Api.web3;\r\n            let { smartContractAddress, abi } = this.state;\r\n            web3Api.contract = new web3.eth.Contract(abi, smartContractAddress);\r\n            this.checkContractBalance()\r\n            this.setState({\r\n                web3Api: web3Api\r\n            })\r\n        }\r\n        if (this.props.role !== prevProps.role) {\r\n            if (this.props.user && this.props.user.roleId) {\r\n                this.setState({\r\n                    role: this.props.user.roleId\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        let { web3Api } = this.state;\r\n        if (web3Api && web3Api.web3) {\r\n            web3Api.web3.eth.clearSubscriptions();\r\n        }\r\n        // clear event listeners\r\n    }\r\n    updateAccount = async () => {\r\n        console.log('Debug1')\r\n        let { web3Api } = this.state;\r\n        if (web3Api && web3Api.web3 && web3Api.web3.eth) {\r\n            console.log('Debug2')\r\n            const accounts = await this.state.web3Api.web3.eth.getAccounts();\r\n            console.log(\"🚀 ~ file: ManageWallet.js:59 ~ ManageWallet ~ updateAccount= ~ accounts\", accounts)\r\n            if (accounts && accounts.length > 0) {\r\n                const accountAddress = accounts[0];\r\n                console.log(\"🚀 ~ file: ManageWallet.js:60 ~ ManageWallet ~ updateAccount= ~ accountAddress\", accountAddress)\r\n                let _balance = await this.state.web3Api.web3.eth.getBalance(accountAddress)\r\n                console.log(\"🚀 ~ file: ManageWallet.js:62 ~ ManageWallet ~ updateAccount= ~ _balance\", _balance)\r\n                this.setState({\r\n                    account: accountAddress,\r\n                    balance: _balance,\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    balance: '',\r\n                    account: ''\r\n                })\r\n            }\r\n        }\r\n    };\r\n\r\n    loadProvider = async (CONTACT_ABI, CONTACT_ADDRESS) => {\r\n        const provider = await detectEthereumProvider();\r\n        const web3 = new Web3(provider);\r\n        const myContract = new web3.eth.Contract(CONTACT_ABI, CONTACT_ADDRESS);\r\n        this.setState({\r\n            web3Api: {\r\n                web3: new Web3(provider),\r\n                provider: provider,\r\n                contract: myContract\r\n            }\r\n        })\r\n    }\r\n\r\n    checkWalletIsConnected = async () => {\r\n        const { ethereum } = window;\r\n        if (!ethereum) {\r\n            console.log('debug123')\r\n            console.log(\"Make sure you have Metamask installed!\");\r\n            toast.error(\"Make sure you have Metamask installed!\");\r\n            return;\r\n        } else {\r\n            console.log('debug123')\r\n            await window.ethereum.enable();\r\n            console.log('debug123')\r\n            window.ethereum.on('accountsChanged', this.updateAccount);\r\n            console.log(\"Wallet exists! We're ready to go!\");\r\n        }\r\n\r\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n        if (accounts.length !== 0) {\r\n            console.log(\"Found an authorized account: \", accounts[0]);\r\n            console.log('debug1')\r\n            let _balance = '';\r\n            if (this.state.web3Api.web3 && this.state.web3Api.web3.eth) {\r\n                _balance = await this.state.web3Api.web3.eth.getBalance(accounts[0])\r\n            }\r\n            console.log('debug2')\r\n            this.setState({\r\n                account: accounts[0],\r\n                balance: _balance\r\n            })\r\n        } else {\r\n            // await window.ethereum.enable();\r\n            console.log(\"No authorized account found\");\r\n            // await this.connectWalletHandler()\r\n        }\r\n    }\r\n\r\n    connectWalletHandler = async () => {\r\n        const { ethereum } = window;\r\n        if (!ethereum) {\r\n            alert(\"Please install Metamask!\");\r\n        }\r\n        try {\r\n            const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\r\n            console.log(\"Found an account! Address: \", accounts[0]);\r\n            let _balance = await this.state.web3Api.web3.eth.getBalance(accounts[0])\r\n            this.setState({\r\n                account: accounts[0],\r\n                balance: _balance\r\n            })\r\n            toast.success('Connect wallet succeed!');\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    withdraw = async () => {\r\n        const { contract, web3 } = this.state.web3Api;\r\n        const { account, role, withdrawAmount } = this.state;\r\n        if (withdrawAmount) {\r\n            let weiAmount = Web3.utils.toWei(withdrawAmount, 'ether');\r\n            if (role === 'R1') {\r\n                try {\r\n                    await contract.methods.withdraw(weiAmount).send({\r\n                        from: account\r\n                    })\r\n                    await this.checkContractBalance()\r\n                    let _balance = await web3.eth.getBalance(account)\r\n                    toast.success('Withdraw successfully!')\r\n                    this.setState({\r\n                        withdrawAmount: '',\r\n                        balance: _balance\r\n                    })\r\n                } catch (error) {\r\n                    console.log(\"🚀 ~ file: ManageWallet.js:175 ~ ManageWallet ~ withdraw= ~ error\", error)\r\n                    toast.error('Something went wrong!')\r\n                }\r\n            } else if (role === 'R2') {\r\n                try {\r\n                    await contract.methods.withdrawForDoctor(weiAmount).send({\r\n                        from: account\r\n                    })\r\n                    await this.checkContractBalance()\r\n                    let _balance = await web3.eth.getBalance(account)\r\n                    toast.success('Withdraw successfully!')\r\n                    this.setState({\r\n                        withdrawAmount: '',\r\n                        balance: _balance\r\n                    })\r\n                } catch (error) {\r\n                    console.log(\"🚀 ~ file: ManageWallet.js:175 ~ ManageWallet ~ withdrawForDoctor= ~ error\", error)\r\n                    toast.error('Something went wrong!')\r\n                }\r\n            } else {\r\n                toast.error(\"Permission denied!\");\r\n            }\r\n        } else {\r\n            toast.error('Please input ETH value!')\r\n        }\r\n\r\n    }\r\n\r\n    checkContractBalance = async () => {\r\n        const { contract, web3 } = this.state.web3Api;\r\n        const { account, role } = this.state;\r\n        if (role === 'R1') {\r\n            try {\r\n                let temp = await contract.methods.checkCurrentAddressDebug().call()\r\n                let balance = await contract.methods.getBalanceByAdminAccount().call()\r\n                let ethBalance = web3.utils.fromWei(balance, \"ether\");\r\n                this.setState({\r\n                    contractBalance: ethBalance\r\n                })\r\n            } catch (error) {\r\n                if (error.message.includes('Your account can not request this feature')) {\r\n                    toast.error(\"Your account is not allowed to withdraw!\");\r\n                } else {\r\n                    toast.error(\"Something went wrong!\");\r\n                }\r\n            }\r\n        } else if (role === 'R2') {\r\n            try {\r\n                let balance = await contract.methods.getBalanceByDoctorAccount().call()\r\n                let ethBalance = web3.utils.fromWei(balance, \"ether\");\r\n                this.setState({\r\n                    contractBalance: ethBalance\r\n                })\r\n            } catch (error) {\r\n                if (error.message.includes('Your account can not request this feature')) {\r\n                    toast.error(\"Your account is not allowed to withdraw!\");\r\n                } else {\r\n                    toast.error(\"Something went wrong!\");\r\n                }\r\n            }\r\n        } else {\r\n            toast.error(\"Permission denied!\");\r\n        }\r\n    }\r\n\r\n    handleAmountChange = (e) => {\r\n        this.setState({\r\n            withdrawAmount: e.target.value\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        let { web3 } = this.state.web3Api\r\n        let { balance, account, withdrawAmount, contractBalance } = this.state;\r\n        if (web3) {\r\n            balance = web3.utils.fromWei(balance, \"ether\");\r\n            // contractBalance = web3.utils.fromWei(balance, \"ether\");\r\n        }\r\n        return (\r\n            <div className='container'>\r\n                <div className='payment-title'>\r\n                    <h1>Manage your wallet</h1>\r\n                </div>\r\n                <div className=\"faucet-wrapper\">\r\n                    <div className=\"faucet\">\r\n                        <div className=\"wallet-balance-view is-size-3\">\r\n                            <strong className='balance-title'>Wallet balance: </strong><strong>{balance}</strong> ETH\r\n                        </div>\r\n                        <div className=\"contract-balance-view is-size-3\">\r\n                            <strong className='balance-title'>Contract balance: </strong><strong>{contractBalance}</strong> ETH\r\n                        </div>\r\n                        <span className='detail-account'>\r\n                            <p>\r\n                                <strong>Accounts Address: </strong>\r\n                                {\r\n                                    account ? account : \"Accounts Denied\"\r\n                                }\r\n                            </p>\r\n                        </span>\r\n                        <div className=\"input-wrapper input-group\">\r\n                            <input\r\n                                type=\"number\"\r\n                                min=\"0\"\r\n                                placeholder=\"Enter the amount in ETH\"\r\n                                onChange={(event) => this.handleAmountChange(event)}\r\n                                value={withdrawAmount}\r\n                                className=\"form-control amount-input\"\r\n                            />\r\n                            <div className=\"input-group-append\">\r\n                                <span className=\"input-group-text\">ETH</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className='button-container'>\r\n                            <button className=\"button is-danger mr-5 payment-button\" onClick={() => this.withdraw()}>Withdraw</button>\r\n                            <button className=\"button is-link connect-button\"\r\n                                onClick={() =>\r\n                                    this.connectWalletHandler()}\r\n                            >\r\n                                Connect Wallets\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    {/* <button onClick={() => this.test()}>Test</button> */}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        user: state.user.userInfo\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageWallet);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport UserManage from '../containers/System/UserManage';\r\nimport UserRedux from '../containers/System/Admin/UserRedux';\r\nimport Header from '../containers/Header/Header';\r\nimport ManageDoctor from '../containers/System/Admin/ManageDoctor';\r\nimport ManageSpecialty from '../containers/System/Specialty/ManageSpecialty';\r\nimport ManageClinic from '../containers/System/Clinic/ManageClinic';\r\nimport ManageWallet from '../containers/System/ManageWallet';\r\nclass System extends Component {\r\n    render() {\r\n        const { systemMenuPath, isLoggedIn } = this.props;\r\n        return (\r\n            <React.Fragment>\r\n                {isLoggedIn && <Header />}\r\n                < div className=\"system-container\" >\r\n                    <div className=\"system-list\">\r\n                        <Switch>\r\n                            <Route path=\"/system/manage-doctor\" component={ManageDoctor} />\r\n                            <Route path=\"/system/user-manage\" component={UserManage} />\r\n                            <Route path=\"/system/user-redux\" component={UserRedux} />\r\n                            <Route path=\"/system/manage-wallet\" component={ManageWallet} />\r\n                            <Route path=\"/system/manage-specialty\" component={ManageSpecialty} />\r\n                            <Route path=\"/system/manage-clinic\" component={ManageClinic} />\r\n                            <Route component={() => { return (<Redirect to={systemMenuPath} />) }} />\r\n                        </Switch>\r\n                    </div>\r\n                </div >\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        systemMenuPath: state.app.systemMenuPath,\r\n        isLoggedIn: state.user.isLoggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(System);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { LANGUAGES } from '../../../utils';\r\nimport './ProfileDoctor.scss'\r\nimport { getProfileDoctorById } from '../../../services/userService'\r\nimport { Label } from 'reactstrap';\r\nimport NumberFormat from 'react-number-format';\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nimport { FormattedMessage } from 'react-intl'\r\nimport { Link } from 'react-router-dom'\r\nclass ProfileDoctor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dataProfile: {}\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n        let data = await this.getInforDoctor(this.props.doctorId);\r\n        this.setState({\r\n            dataProfile: data\r\n        })\r\n    }\r\n\r\n    getInforDoctor = async (id) => {\r\n        let result = {};\r\n        if (id) {\r\n            let res = await getProfileDoctorById(id);\r\n            if (res && res.errCode === 0) {\r\n                result = res.data;\r\n            }\r\n\r\n        }\r\n        return result\r\n    }\r\n    async componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n        if (this.props.doctorId !== prevProps.doctorId) {\r\n            let data = await this.getInforDoctor(this.props.doctorId);\r\n            this.setState({\r\n                dataProfile: data,\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    showHideDetailInfor = (status) => {\r\n        this.setState({\r\n            isShowDetailInfor: status\r\n        })\r\n    }\r\n\r\n    renderTimeBooking = (dataTime) => {\r\n        let { language } = this.props;\r\n        if (dataTime && !_.isEmpty(dataTime)) {\r\n            let time = language === LANGUAGES.VI ? dataTime.timeTypeData.valueVi : dataTime.timeTypeData.valueEn\r\n            let date = language === LANGUAGES.VI ?\r\n                moment.unix(+dataTime.date / 1000).format('dddd - DD/MM/YYYY')\r\n                :\r\n                moment.unix(+dataTime.date / 1000).locale('en').format('ddd - MM/DD/YYYY')\r\n            return (\r\n                <>\r\n                    <div>{time} - {date}</div>\r\n                    <div><FormattedMessage id={\"patient.booking-modal.priceBooking\"} /></div>\r\n                </>\r\n            )\r\n        }\r\n        return <></>\r\n    }\r\n    render() {\r\n        let { dataProfile } = this.state;\r\n        let { language, isShowDescriptionDoctor, dataTime, isShowLinkDetail, isShowPrice,\r\n            doctorId } = this.props\r\n        let nameVi = '', nameEn = '';\r\n        if (dataProfile && dataProfile.positionData) {\r\n            nameVi = `${dataProfile.positionData.valueVi}, ${dataProfile.lastName} ${dataProfile.firstName}`;\r\n            nameEn = `${dataProfile.positionData.valueEn}, ${dataProfile.firstName} ${dataProfile.lastName}`;\r\n        }\r\n        return (\r\n            <div className='profile-doctor-container'>\r\n                <div className='intro-doctor'>\r\n                    <div className='content-left'\r\n                        style={{ backgroundImage: `url(${dataProfile && dataProfile.image ? dataProfile.image : ''})` }}\r\n                    >\r\n                    </div>\r\n                    <div className='content-right'>\r\n                        <div className='up'>\r\n                            {language === LANGUAGES.VI ? nameVi : nameEn}\r\n                        </div>\r\n                        <div className='down'>\r\n                            {isShowDescriptionDoctor === true ?\r\n                                <>\r\n                                    {dataProfile.Markdown\r\n                                        && dataProfile\r\n                                        && dataProfile.Markdown.description\r\n                                        &&\r\n                                        <span>\r\n                                            {dataProfile.Markdown.description}\r\n                                        </span>\r\n                                    }\r\n                                </>\r\n                                :\r\n                                <>\r\n                                    {this.renderTimeBooking(dataTime)}\r\n                                </>\r\n                            }\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {isShowLinkDetail === true &&\r\n                    <div className='view-detail-doctor'>\r\n                        <Link to={`/detail-doctor/${doctorId}`}>Xem thêm</Link>\r\n                    </div>\r\n                }\r\n                {isShowPrice === true &&\r\n                    <div className='price'>\r\n                        <FormattedMessage id={\"patient.booking-modal.price\"} />\r\n                        {dataProfile && dataProfile.Doctor_Infor && language === LANGUAGES.VI &&\r\n                            <NumberFormat\r\n                                className='currency'\r\n                                value={dataProfile.Doctor_Infor.priceTypeData.valueVi}\r\n                                suffix={'VND'}\r\n                                thousandSeparator={true}\r\n                                displayType={'text'}\r\n                            />\r\n                        }\r\n                        {dataProfile && dataProfile.Doctor_Infor && language === LANGUAGES.EN &&\r\n                            <NumberFormat\r\n                                className='currency'\r\n                                value={dataProfile.Doctor_Infor.priceTypeData.valueEn}\r\n                                suffix={'USD'}\r\n                                thousandSeparator={true}\r\n                                displayType={'text'}\r\n                            />\r\n                        }\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileDoctor);\r\n","import React, { Component } from 'react';\r\nimport Flatpickr from 'react-flatpickr';\r\nimport moment from 'moment';\r\n\r\nimport { KeyCodeUtils } from \"../../utils\";\r\nimport './DatePicker.scss';\r\n\r\n// const CustomInput = ({ value, defaultValue, inputRef, onInputChange, onInputBlur, ...props }) => {\r\n//     return <input {...props} className='custom-form-control custom-date-input' defaultValue={defaultValue} ref={inputRef}\r\n//         onChange={onInputChange}\r\n//         onBlur={onInputBlur}\r\n//     />;\r\n// };\r\n\r\nclass DatePicker extends Component {\r\n\r\n    flatpickrNode = null;\r\n\r\n    nodeRef = element => {\r\n        this.flatpickr = element && element.flatpickr;\r\n        this.flatpickrNode = element && element.node;\r\n        if (this.flatpickrNode) {\r\n            this.flatpickrNode.addEventListener('blur', this.handleBlur);\r\n            this.flatpickrNode.addEventListener('keydown', this.handlerKeyDown);\r\n        }\r\n    };\r\n\r\n    handlerKeyDown = (event) => {\r\n        const keyCode = event.which || event.keyCode;\r\n        if (keyCode === KeyCodeUtils.ENTER) {\r\n            event.preventDefault();\r\n            const { onChange } = this.props;\r\n            const value = event.target.value;\r\n\r\n            // Take the blur event and process the string value\r\n            const valueMoment = moment(value, 'DD/MM/YYYY');\r\n            onChange([valueMoment.toDate(), valueMoment.toDate()]);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.flatpickrNode) {\r\n            this.flatpickrNode.removeEventListener('blur', this.handleBlur);\r\n            this.flatpickrNode.removeEventListener('keydown', this.handlerKeyDown);\r\n        }\r\n    }\r\n\r\n    handleBlur = (event) => {\r\n        const { onChange } = this.props;\r\n        const value = event.target.value;\r\n\r\n        // Take the blur event and process the string value\r\n        event.preventDefault();\r\n        const valueMoment = moment(value, 'DD/MM/YYYY');\r\n        onChange([valueMoment.toDate(), valueMoment.toDate()]);\r\n    };\r\n\r\n    onOpen = () => {\r\n        if (this.flatpickrNode) {\r\n            this.flatpickrNode.blur();\r\n        }\r\n    }\r\n\r\n    close() {\r\n        this.flatpickr.close();\r\n    }\r\n\r\n    checkDateValue = (str, max) => {\r\n        if (str.charAt(0) !== '0' || str === '00') {\r\n            var num = parseInt(str);\r\n            if (isNaN(num) || num <= 0 || num > max) num = 1;\r\n            str = num > parseInt(max.toString().charAt(0)) && num.toString().length === 1 ? '0' + num : num.toString();\r\n        };\r\n        return str;\r\n    }\r\n\r\n    // autoFormatonBlur = (value) => {\r\n    //     var input = value;\r\n    //     var values = input.split('/').map(function (v, i) {\r\n    //         return v.replace(/\\D/g, '')\r\n    //     });\r\n    //     var output = '';\r\n\r\n    //     if (values.length == 3) {\r\n    //         var year = values[2].length !== 4 ? parseInt(values[2]) + 2000 : parseInt(values[2]);\r\n    //         var month = parseInt(values[0]) - 1;\r\n    //         var day = parseInt(values[1]);\r\n    //         var d = new Date(year, month, day);\r\n    //         if (!isNaN(d)) {\r\n    //             //document.getElementById('result').innerText = d.toString();\r\n    //             var dates = [d.getMonth() + 1, d.getDate(), d.getFullYear()];\r\n    //             output = dates.map(function (v) {\r\n    //                 v = v.toString();\r\n    //                 return v.length == 1 ? '0' + v : v;\r\n    //             }).join(' / ');\r\n    //         };\r\n    //     };\r\n    //     // this.value = output;\r\n    //     return output;\r\n    // }\r\n\r\n    autoFormatOnChange = (value, seperator) => {\r\n        var input = value;\r\n\r\n        let regexForDeleting = new RegExp(`\\\\D\\\\${seperator}$`);\r\n\r\n        //if (/\\D\\/$/.test(input)) input = input.substr(0, input.length - 3); // dat.nt: Xóa thêm 1 ký tự nếu xóa dấu cách sau / (VD: 12 / 12 /=> 12 / 1)\r\n\r\n        if (regexForDeleting.test(input)) input = input.substr(0, input.length - 3);\r\n\r\n        var values = input.split(seperator).map(function (v) {\r\n            return v.replace(/\\D/g, '')\r\n        });\r\n\r\n        if (values[0]) values[0] = this.checkDateValue(values[0], 31);\r\n        if (values[1]) values[1] = this.checkDateValue(values[1], 12);\r\n        var output = values.map(function (v, i) {\r\n            return v.length === 2 && i < 2 ? v + ' ' + seperator + ' ' : v;\r\n        });\r\n        return output.join('').substr(0, 14);\r\n    }\r\n\r\n    onInputChange = (e) => {\r\n        if (this.DISPLAY_FORMAT === this.DATE_FORMAT_AUTO_FILL) {\r\n            let converted = this.autoFormatOnChange(e.target.value, this.SEPERATOR);\r\n            e.target.value = converted;\r\n        }\r\n    }\r\n\r\n    onInputBlur = (e) => {\r\n    }\r\n\r\n    //dat.nt : Auto Fill cho dạng ngăn cách và format cụ thể (seperator có thể dc thay thế)\r\n    SEPERATOR = \"/\";\r\n    DATE_FORMAT_AUTO_FILL = \"d/m/Y\"; // Format không thay đổi\r\n\r\n    // dat.nt : Format ngày hiển thị\r\n    DISPLAY_FORMAT = \"d/m/Y\";\r\n\r\n    render() {\r\n        const { value, onChange, minDate, onClose, ...otherProps } = this.props;\r\n        const options = {\r\n            dateFormat: this.DISPLAY_FORMAT,\r\n            allowInput: true,\r\n            disableMobile: true,\r\n            onClose: onClose,\r\n            onOpen: this.onOpen\r\n        };\r\n        if (minDate) {\r\n            options.minDate = minDate;\r\n        }\r\n        return (\r\n            <Flatpickr\r\n                ref={this.nodeRef}\r\n                value={value}\r\n                onChange={onChange}\r\n                options={options}\r\n                // render={\r\n                //     ({ defaultValue, value, ...props }, ref) => {\r\n                //         return <CustomInput defaultValue={defaultValue} inputRef={ref} onInputChange={this.onInputChange} onInputBlur={this.onInputBlur} />\r\n                //     }\r\n                // }\r\n                {...otherProps}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default DatePicker;\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from 'react-intl'\r\nimport './BookingModal.scss'\r\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from 'reactstrap';\r\nimport ProfileDoctor from '../ProfileDoctor';\r\nimport _ from 'lodash';\r\nimport DatePicker from '../../../../components/Input/DatePicker';\r\nimport * as actions from '../../../../store/actions'\r\nimport { LANGUAGES } from '../../../../utils';\r\nimport Select from 'react-select';\r\nimport { postPatientBookingAppointment } from '../../../../services/userService'\r\nimport { toast } from 'react-toastify'\r\nimport moment from 'moment';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nclass BookingModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fullName: '',\r\n            phoneNumber: '',\r\n            email: '',\r\n            address: '',\r\n            reason: '',\r\n            birthday: '',\r\n            selectedGender: '',\r\n            doctorId: '',\r\n            genders: '',\r\n            timeType: '',\r\n            isShowLoading: false\r\n\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n        this.props.fetchGenders()\r\n    }\r\n\r\n    buildDataGender = (data) => {\r\n        let result = [];\r\n        let language = this.props.language;\r\n        if (data && data.length > 0) {\r\n            data.map(item => {\r\n                let object = {};\r\n                object.label = language === LANGUAGES.VI ? item.valueVi : item.valueEn;\r\n                object.value = item.keyMap;\r\n                result.push(object);\r\n            })\r\n        }\r\n        return result\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n            this.setState({\r\n                genders: this.buildDataGender(this.props.genders)\r\n            })\r\n        }\r\n        if (this.props.genders !== prevProps.genders) {\r\n            this.setState({\r\n                genders: this.buildDataGender(this.props.genders)\r\n            })\r\n        }\r\n        if (this.props.dataTime !== prevProps.dataTime) {\r\n            if (this.props.dataTime && !_.isEmpty(this.props.dataTime)) {\r\n                let doctorId = this.props.dataTime.doctorId;\r\n                let timeType = this.props.dataTime.timeType;\r\n                this.setState({\r\n                    doctorId: doctorId,\r\n                    timeType: timeType\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    showHideDetailInfor = (status) => {\r\n        this.setState({\r\n            isShowDetailInfor: status\r\n        })\r\n    }\r\n    handleOnchangeInput = (event, id) => {\r\n        let valueInput = event.target.value;\r\n        let stateCopy = { ...this.state };\r\n        stateCopy[id] = valueInput;\r\n        this.setState({\r\n            ...stateCopy\r\n        })\r\n    }\r\n    handleOnchangeDatePicker = (date) => {\r\n        this.setState({\r\n            birthday: date[0]\r\n        })\r\n    }\r\n    handleChangeSelect = (selectedOption) => {\r\n        this.setState({ selectedGender: selectedOption });\r\n    }\r\n\r\n    handleConfirmBooking = async () => {\r\n        this.setState({\r\n            isShowLoading: true\r\n        })\r\n        let date = new Date(this.state.birthday).getTime();\r\n        let timeString = this.buildTimeBooking(this.props.dataTime)\r\n        let doctorName = this.buildDoctorName(this.props.dataTime)\r\n\r\n        let res = await postPatientBookingAppointment({\r\n            fullName: this.state.fullName,\r\n            phoneNumber: this.state.phoneNumber,\r\n            email: this.state.email,\r\n            address: this.state.address,\r\n            reason: this.state.reason,\r\n            date: this.props.dataTime.date,\r\n            birthday: date.toString(),\r\n            selectedGender: this.state.selectedGender.value,\r\n            doctorId: this.state.doctorId,\r\n            timeType: this.state.timeType,\r\n            language: this.props.language,\r\n            timeString: timeString,\r\n            doctorName: doctorName\r\n        })\r\n\r\n        this.setState({\r\n            isShowLoading: false\r\n        })\r\n        if (res && res.errCode === 0) {\r\n            toast.success('Booking a new appointment succeed!');\r\n            this.props.closeBookingModal();\r\n        } else if (res && res.errCode === 2) {\r\n            toast.warn(res.errMessage);\r\n        } else {\r\n            toast.error('Booking a new appointment error!');\r\n        }\r\n    }\r\n\r\n    buildTimeBooking = (dataTime) => {\r\n        let { language } = this.props;\r\n        if (dataTime && !_.isEmpty(dataTime)) {\r\n            let time = language === LANGUAGES.VI ? dataTime.timeTypeData.valueVi : dataTime.timeTypeData.valueEn\r\n            let date = language === LANGUAGES.VI ?\r\n                moment.unix(+dataTime.date / 1000).format('dddd - DD/MM/YYYY')\r\n                :\r\n                moment.unix(+dataTime.date / 1000).locale('en').format('ddd - MM/DD/YYYY')\r\n            return `${time} - ${date}`\r\n\r\n        }\r\n        return ''\r\n    }\r\n\r\n    buildDoctorName = (dataTime) => {\r\n        let { language } = this.props;\r\n        if (dataTime && !_.isEmpty(dataTime)) {\r\n            let name = language === LANGUAGES.VI ?\r\n                `${dataTime.doctorData.lastName} ${dataTime.doctorData.firstName}`\r\n                :\r\n                `${dataTime.doctorData.firstName} ${dataTime.doctorData.lastName}`\r\n            return name;\r\n\r\n        }\r\n        return ''\r\n    }\r\n    render() {\r\n        // toggle={ }\r\n        let { isOpenModal, closeBookingModal, dataTime } = this.props\r\n        let doctorId = '';\r\n        if (dataTime && !_.isEmpty(dataTime)) {\r\n            doctorId = dataTime.doctorId\r\n        }\r\n        return (\r\n            <LoadingOverlay\r\n                active={this.state.isShowLoading}\r\n                spinner\r\n                text='Loading...'\r\n            >\r\n                <Modal isOpen={isOpenModal}\r\n                    className={'booking-modal-container'}\r\n                    size=\"lg\"\r\n                    centered\r\n                >\r\n                    <div className='booking-modal-content'>\r\n                        <div className='booking-modal-header'>\r\n                            <span className='left'><FormattedMessage id={\"patient.booking-modal.title\"} /></span>\r\n                            <span className='right'\r\n                                onClick={closeBookingModal}\r\n                            ><i className='fas fa-times'></i></span>\r\n                        </div>\r\n                        <div className='booking-modal-body'>\r\n                            {/* {JSON.stringify(dataTime)} */}\r\n                            <div className='doctor-infor'>\r\n                                <ProfileDoctor\r\n                                    doctorId={doctorId}\r\n                                    isShowDescriptionDoctor={false}\r\n                                    dataTime={dataTime}\r\n                                    isShowLinkDetail={false}\r\n                                    isShowPrice={true}\r\n                                />\r\n                            </div>\r\n                            <div className='row'>\r\n                                <div className='col-6 form-group'>\r\n                                    <label><FormattedMessage id={\"patient.booking-modal.fullname\"} /></label>\r\n                                    <input className='form-control'\r\n                                        value={this.state.fullname}\r\n                                        onChange={(event) => this.handleOnchangeInput(event, 'fullName')}\r\n                                    />\r\n                                </div>\r\n                                <div className='col-6 form-group'>\r\n                                    <label><FormattedMessage id={\"patient.booking-modal.phonenumber\"} /></label>\r\n                                    <input className='form-control'\r\n                                        value={this.state.phoneNumber}\r\n                                        onChange={(event) => this.handleOnchangeInput(event, 'phoneNumber')}\r\n                                    />\r\n                                </div>\r\n                                <div className='col-6 form-group'>\r\n                                    <label><FormattedMessage id={\"patient.booking-modal.email\"} /></label>\r\n                                    <input className='form-control'\r\n                                        value={this.state.email}\r\n                                        onChange={(event) => this.handleOnchangeInput(event, 'email')}\r\n                                    />\r\n                                </div>\r\n                                <div className='col-6 form-group'>\r\n                                    <label><FormattedMessage id={\"patient.booking-modal.address\"} /></label>\r\n                                    <input className='form-control'\r\n                                        value={this.state.address}\r\n                                        onChange={(event) => this.handleOnchangeInput(event, 'address')}\r\n                                    />\r\n                                </div>\r\n                                <div className='col-12 form-group'>\r\n                                    <label><FormattedMessage id={\"patient.booking-modal.reason\"} /></label>\r\n                                    <input className='form-control'\r\n                                        value={this.state.reason}\r\n                                        onChange={(event) => this.handleOnchangeInput(event, 'reason')}\r\n                                    />\r\n                                </div>\r\n                                <div className='col-6 form-group'>\r\n                                    <label><FormattedMessage id={\"patient.booking-modal.birthday\"} /></label>\r\n                                    <DatePicker\r\n                                        onChange={this.handleOnchangeDatePicker}\r\n                                        className=\"form-control\"\r\n                                        value={this.state.birthday}\r\n                                    // minDate={yesterday}\r\n                                    />\r\n                                </div>\r\n                                <div className='col-6 form-group'>\r\n                                    <label><FormattedMessage id={\"patient.booking-modal.gender\"} /></label>\r\n                                    <Select\r\n                                        value={this.state.selectedDoctor}\r\n                                        onChange={this.handleChangeSelect}\r\n                                        options={this.state.genders}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='booking-modal-footer'>\r\n                            <button className='btn-booking-confirm'\r\n                                onClick={() => this.handleConfirmBooking()}\r\n                            ><FormattedMessage id={\"patient.booking-modal.btnConfirm\"} /></button>\r\n                            <button className='btn-booking-cancel'\r\n                                onClick={closeBookingModal}><FormattedMessage id={\"patient.booking-modal.btnCancel\"} /></button>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            </LoadingOverlay>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        genders: state.admin.genders,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchGenders: () => dispatch(actions.fetchGenderStart())\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BookingModal);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport './DoctorSchedule.scss';\r\nimport Select from 'react-select'\r\nimport moment from 'moment';\r\nimport localization from 'moment/locale/vi';\r\nimport { LANGUAGES } from '../../../utils';\r\nimport { getScheduleDoctorByDate } from '../../../services/userService'\r\nimport { trimEnd } from 'lodash';\r\nimport { FormattedMessage } from 'react-intl'\r\nimport BookingModal from './Modal/BookingModal';\r\n\r\nclass DoctorSchedule extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allDays: [],\r\n            allAvalableTime: [],\r\n            isOpenModalBooking: false,\r\n            dataScheduleTimeModal: {}\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n        let { language } = this.props;\r\n        let allDays = this.getArrDays(language);\r\n\r\n        if (this.props.doctorIdFromParent) {\r\n            let res = await getScheduleDoctorByDate(this.props.doctorIdFromParent, allDays[0].value);\r\n            this.setState({\r\n                allAvalableTime: res.data ? res.data : []\r\n            })\r\n        }\r\n\r\n        if (allDays && allDays.length > 0) {\r\n            this.setState({\r\n                allDays: allDays,\r\n            })\r\n        }\r\n        console.log(\"🚀 ~ file: DoctorSchedule.js:22 ~ DoctorSchedule ~ componentDidMount ~ allDays\", allDays)\r\n    }\r\n\r\n    capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    getArrDays = (language) => {\r\n        let allDays = []\r\n        for (let i = 0; i < 7; i++) {\r\n            let object = {};\r\n            if (language === LANGUAGES.VI) {\r\n                if (i === 0) {\r\n                    let ddMM = moment(new Date()).add(i, 'days').format('DD/MM');\r\n                    let today = `Hôm nay - ${ddMM}`\r\n                    object.label = today;\r\n                } else {\r\n                    let labelVi = moment(new Date()).add(i, 'days').format('dddd - DD/MM');\r\n                    object.label = this.capitalizeFirstLetter(labelVi)\r\n                }\r\n            } else {\r\n                if (i === 0) {\r\n                    let ddMM = moment(new Date()).add(i, 'days').locale('en').format('DD/MM');\r\n                    let today = `Today - ${ddMM}`;\r\n                    object.label = today;\r\n                } else {\r\n                    object.label = moment(new Date()).add(i, 'days').locale('en').format('dddd - DD/MM');\r\n                }\r\n            }\r\n            object.value = moment(new Date()).add(i, 'days').startOf('day').valueOf();\r\n            allDays.push(object);\r\n        }\r\n        return allDays;\r\n    }\r\n    async componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n            let allDays = this.getArrDays(this.props.language)\r\n            this.setState({\r\n                allDays: allDays\r\n            })\r\n        }\r\n        if (this.props.doctorIdFromParent !== prevProps.doctorIdFromParent) {\r\n            let allDays = this.getArrDays(this.props.language)\r\n            let res = await getScheduleDoctorByDate(this.props.doctorIdFromParent, allDays[0].value);\r\n            this.setState({\r\n                allAvalableTime: res.data ? res.data : []\r\n            })\r\n        }\r\n    }\r\n    handleOnChangeSelect = async (event) => {\r\n        if (this.props.doctorIdFromParent && this.props.doctorIdFromParent !== -1) {\r\n            let doctorId = this.props.doctorIdFromParent\r\n            let date = event.target.value\r\n            let res = await getScheduleDoctorByDate(doctorId, date);\r\n            let allTime = []\r\n            if (res && res.errCode === 0) {\r\n                this.setState({\r\n                    allAvalableTime: res.data ? res.data : []\r\n                })\r\n            }\r\n            console.log(\"🚀 ~ file: DoctorSchedule.js:49 ~ DoctorSchedule ~ handleOnChangeSelect= ~ res\", res)\r\n        }\r\n\r\n    }\r\n    handleClickScheduleTime = (time) => {\r\n        this.setState({\r\n            isOpenModalBooking: true,\r\n            dataScheduleTimeModal: time\r\n        })\r\n    }\r\n\r\n    closeBookingModal = () => {\r\n        this.setState({\r\n            isOpenModalBooking: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { allDays, allAvalableTime, isOpenModalBooking, dataScheduleTimeModal } = this.state\r\n        let { language } = this.props\r\n        return (\r\n            <>\r\n                <div className='doctor-schedule-container'>\r\n                    <div className='all-schedule'>\r\n                        <select onChange={(event) => this.handleOnChangeSelect(event)}>\r\n                            {allDays && allDays.length > 0 && allDays.map((item, index) => {\r\n                                return (\r\n                                    <option value={item.value} key={index}>{item.label}</option>\r\n                                )\r\n                            })}\r\n                        </select>\r\n                    </div>\r\n                    <div className='all-available-time'>\r\n                        <div className='text-calendar'>\r\n                            <i className='fas fa-calendar-alt'><span><FormattedMessage id={\"patient.detail-doctor.schedule\"} /></span></i>\r\n                        </div>\r\n                        <div className='time-content'>\r\n                            {allAvalableTime && allAvalableTime.length > 0 ?\r\n                                <>\r\n                                    <div className='time-content-btns'>\r\n                                        {allAvalableTime.map((item, index) => {\r\n                                            let timeDisplay = language === LANGUAGES.VI ?\r\n                                                item.timeTypeData.valueVi : item.timeTypeData.valueEn\r\n                                            return (\r\n                                                <button className={language === LANGUAGES.VI ? 'btn-vie' : 'btn-en'}\r\n                                                    key={index}\r\n                                                    onClick={() => this.handleClickScheduleTime(item)}\r\n                                                >{timeDisplay}\r\n                                                </button>\r\n                                            )\r\n                                        })}\r\n                                    </div>\r\n\r\n                                    <div className='book-free'>\r\n                                        <span><FormattedMessage id={\"patient.detail-doctor.choose\"} /> <i className='far fa-hand-point-up'></i> <FormattedMessage id={\"patient.detail-doctor.book-free\"} /></span>\r\n                                    </div>\r\n                                </>\r\n                                :\r\n                                <div className='no-schedule'>{<FormattedMessage id={\"patient.detail-doctor.no-schedule\"} />}</div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <BookingModal\r\n                    isOpenModal={isOpenModalBooking}\r\n                    closeBookingModal={this.closeBookingModal}\r\n                    dataTime={dataScheduleTimeModal}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DoctorSchedule);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport './DoctorExtraInfor.scss';\r\nimport { LANGUAGES } from '../../../utils';\r\nimport { getExtraInforDoctorById } from '../../../services/userService'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nclass DoctorExtraInfor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isShowDetailInfor: false,\r\n            extraInfor: {}\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n        if (this.props.doctorIdFromParent) {\r\n            let res = await getExtraInforDoctorById(this.props.doctorIdFromParent);\r\n            if (res && res.errCode === 0) {\r\n                this.setState({\r\n                    extraInfor: res.data\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n        if (this.props.doctorIdFromParent !== prevProps.doctorIdFromParent) {\r\n            let res = await getExtraInforDoctorById(this.props.doctorIdFromParent);\r\n            if (res && res.errCode === 0) {\r\n                this.setState({\r\n                    extraInfor: res.data\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    showHideDetailInfor = (status) => {\r\n        this.setState({\r\n            isShowDetailInfor: status\r\n        })\r\n    }\r\n    render() {\r\n        let { isShowDetailInfor, extraInfor } = this.state;\r\n        let { language } = this.props\r\n        return (\r\n            <div className='doctor-extra-infor-container'>\r\n                <div className='content-up'>\r\n                    <div className='text-address'><FormattedMessage id=\"patient.extra-doctor-infor.text-address\" /></div>\r\n                    <div className='name-clinic'>\r\n                        {extraInfor && extraInfor.nameClinic ? extraInfor.nameClinic : ''}\r\n                    </div>\r\n                    <div className='detail-address'>\r\n                        {extraInfor && extraInfor.addressClinic ? extraInfor.addressClinic : ''}\r\n                    </div>\r\n                </div>\r\n                <div className='content-down'>\r\n\r\n                    {isShowDetailInfor === false &&\r\n                        <div className='short-infor'>\r\n                            <FormattedMessage id=\"patient.extra-doctor-infor.price\" />\r\n                            {extraInfor && extraInfor.priceTypeData && language === LANGUAGES.VI\r\n                                &&\r\n                                <NumberFormat\r\n                                    className='currency'\r\n                                    value={extraInfor.priceTypeData.valueVi}\r\n                                    suffix={'VND'}\r\n                                    thousandSeparator={true}\r\n                                    displayType={'text'}\r\n                                />\r\n                            }\r\n                            {extraInfor && extraInfor.priceTypeData && language === LANGUAGES.EN\r\n                                &&\r\n                                <NumberFormat\r\n                                    className='currency'\r\n                                    value={extraInfor.priceTypeData.valueEn}\r\n                                    suffix={'USD'}\r\n                                    thousandSeparator={true}\r\n                                    displayType={'text'}\r\n                                />\r\n                            }\r\n                            <span className='detail'\r\n                                onClick={() => this.showHideDetailInfor(true)}>\r\n                                <FormattedMessage id=\"patient.extra-doctor-infor.detail\" />\r\n                            </span>\r\n                        </div>\r\n                    }\r\n                    {isShowDetailInfor === true &&\r\n                        <>\r\n                            <div className='title-price'><FormattedMessage id=\"patient.extra-doctor-infor.price\" /> .</div>\r\n                            <div className='detail-infor'>\r\n                                <div className='price'>\r\n                                    <span className='left'><FormattedMessage id=\"patient.extra-doctor-infor.price\" /></span>\r\n                                    <span className='right'>\r\n                                        {extraInfor && extraInfor.priceTypeData && language === LANGUAGES.VI\r\n                                            &&\r\n                                            <NumberFormat\r\n                                                className='currency'\r\n                                                value={extraInfor.priceTypeData.valueVi}\r\n                                                suffix={'VND'}\r\n                                                thousandSeparator={true}\r\n                                                displayType={'text'}\r\n                                            />\r\n                                        }\r\n                                        {extraInfor && extraInfor.priceTypeData && language === LANGUAGES.EN\r\n                                            &&\r\n                                            <NumberFormat\r\n                                                className='currency'\r\n                                                value={extraInfor.priceTypeData.valueEn}\r\n                                                suffix={'USD'}\r\n                                                thousandSeparator={true}\r\n                                                displayType={'text'}\r\n                                            />\r\n                                        }\r\n                                    </span>\r\n                                </div>\r\n                                <div className='note'>\r\n                                    {extraInfor && extraInfor.note ? extraInfor.note : ''}\r\n                                </div>\r\n                            </div>\r\n                            <div className='payment'>\r\n                                <FormattedMessage id=\"patient.extra-doctor-infor.payment\" />\r\n                                {extraInfor && extraInfor.paymentTypeData && language == LANGUAGES.VI\r\n                                    ?\r\n                                    extraInfor.paymentTypeData.valueVi : ''}\r\n                                {extraInfor && extraInfor.paymentTypeData && language == LANGUAGES.EN\r\n                                    ?\r\n                                    extraInfor.paymentTypeData.valueEn : ''}\r\n                            </div>\r\n                            <div className='hide-price'>\r\n                                <span onClick={() => this.showHideDetailInfor(false)}><FormattedMessage id=\"patient.extra-doctor-infor.hide-price\" /></span>\r\n                            </div>\r\n                        </>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DoctorExtraInfor);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport './DoctorExtraInfor.scss';\r\nimport { LANGUAGES } from '../../../utils';\r\nimport { getExtraInforDoctorById } from '../../../services/userService'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nclass DoctorExtraInfor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n        console.log(\"Debug:\", this.props)\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (this.props !== prevProps) {\r\n            console.log(\"Debug1:\", this.props)\r\n        }\r\n\r\n    }\r\n\r\n    showHideDetailInfor = (status) => {\r\n        this.setState({\r\n            isShowDetailInfor: status\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DoctorExtraInfor);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nclass LikeAndShare extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n    }\r\n\r\n    showHideDetailInfor = (status) => {\r\n        this.setState({\r\n            isShowDetailInfor: status\r\n        })\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LikeAndShare);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Comment extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n    }\r\n\r\n    showHideDetailInfor = (status) => {\r\n        this.setState({\r\n            isShowDetailInfor: status\r\n        })\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment);\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport './LiveChat.scss';\r\nimport { format } from 'timeago.js'\r\n\r\nconst LiveChat = ({ messages, sendMessage }) => {\r\n    const messagesContainerRef = useRef(null);\r\n    const [currentMessage, setCurrentMessage] = useState(\"\");\r\n    const [displayMessages, setDisplayMessages] = useState([{\r\n        content: 'Xin chào, mình là admin phòng khám. Mình có thể giúp gì cho bạn?',\r\n        owner: false,\r\n        time: format(Date.now())\r\n    }])\r\n\r\n    useEffect(() => {\r\n        if (messages && Object.keys(messages).length !== 0) {\r\n            console.log(\"Debug\", messages)\r\n            setDisplayMessages(prevState => [...prevState, messages])\r\n            messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;\r\n        }\r\n    }, [messages]);\r\n\r\n    useEffect(() => {\r\n        messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;\r\n    }, [displayMessages]);\r\n\r\n\r\n    const handleSendMessage = async () => {\r\n        let result = await sendMessage(currentMessage)\r\n        if (result === true) {\r\n            let dataForDisplay = {\r\n                content: currentMessage,\r\n                owner: true,\r\n                time: format(Date.now())\r\n            }\r\n            setDisplayMessages(prevState => [...prevState, dataForDisplay])\r\n            setCurrentMessage('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container d-flex justify-content-center chat-card-container\">\r\n                <div className=\"card mt-5\">\r\n                    <div className=\"d-flex flex-row justify-content-between p-3 adiv text-white\">\r\n                        <i className=\"fas fa-chevron-left\"></i>\r\n                        <span className=\"pb-3\">Live chat</span>\r\n                        <i className=\"fas fa-times\"></i>\r\n                    </div>\r\n                    <div className=\"messages-container\" ref={messagesContainerRef}>\r\n                        {displayMessages && displayMessages.map((message, index) => {\r\n                            return (\r\n                                <div key={index}>\r\n                                    {\r\n                                        message.owner ?\r\n                                            (<div className=\"d-flex flex-row p-3 owner\" >\r\n                                                <div className=\"bg-white mr-2 p-3\"><span className=\"text-muted\">{message.content}</span></div>\r\n                                                <img src=\"https://img.icons8.com/color/48/000000/circled-user-male-skin-type-7.png\" width=\"30\" height=\"30\" />\r\n                                            </div>)\r\n                                            :\r\n                                            (<div className=\"d-flex flex-row p-3\">\r\n                                                <img src=\"https://img.icons8.com/color/48/000000/circled-user-female-skin-type-7.png\" width=\"30\" height=\"30\" />\r\n                                                <div className=\"chat ml-2 p-3\">{message.content}</div>\r\n                                            </div>)\r\n                                    }\r\n                                </div>)\r\n\r\n                        })}\r\n\r\n                    </div>\r\n                    <div className=\"form-group px-3 text-area-container\">\r\n                        <textarea className=\"form-control\" rows=\"5\" placeholder=\"Type your message\" onChange={(e) => setCurrentMessage(e.target.value)} value={currentMessage}></textarea>\r\n                        <button onClick={() => handleSendMessage()} className=\"send-btn\">Send</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LiveChat","import React, { Component } from 'react';\r\nimport { Fragment } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport HomeHeader from '../../../containers/HomePage/HomeHeader';\r\nimport './DetailDoctor.scss';\r\nimport { getDetailInforDoctor } from '../../../services/userService';\r\nimport { LANGUAGES } from '../../../utils';\r\nimport DoctorSchedule from './DoctorSchedule';\r\nimport DoctorExtraInfor from './DoctorExtraInfor';\r\nimport Test from './Test';\r\nimport LikeAndShare from '../SocialPlugin/LikeAndShare';\r\nimport Comment from '../SocialPlugin/Comment';\r\nimport LiveChat from '../../../components/LiveChat';\r\nimport { io } from 'socket.io-client'\r\nimport { format } from 'timeago.js'\r\n\r\nclass DetailDoctor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            detailDoctor: {},\r\n            currentDoctorId: -1,\r\n            socket: io(\"ws://localhost:3001\"),\r\n            messages: {},\r\n            doctorIsOnline: false,\r\n        }\r\n    }\r\n\r\n    sendMessage = async (message) => {\r\n        let { socket, detailDoctor } = this.state;\r\n        let data = {\r\n            messageText: message,\r\n            doctorId: detailDoctor?.id,\r\n        }\r\n        await socket.emit('sendMessage', data);\r\n        return true;\r\n    }\r\n\r\n    async componentDidMount() {\r\n        console.log(this.state.messages)\r\n        let { socket } = this.state;\r\n        socket.emit('getAnonymousUser', +this.props.match.params.id);\r\n        socket.on('messageToClient', (message) => {\r\n            console.log(message)\r\n            this.setState({\r\n                messages: {\r\n                    content: message,\r\n                    owner: false,\r\n                    time: format(Date.now())\r\n                }\r\n            })\r\n        });\r\n        socket.on('isDoctorOnline', (doctorId) => {\r\n            if (doctorId === +this.props.match.params.id) {\r\n                this.setState({\r\n                    doctorIsOnline: true\r\n                })\r\n            }\r\n        })\r\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            let id = this.props.match.params.id\r\n            this.setState({\r\n                currentDoctorId: id\r\n            })\r\n            let res = await getDetailInforDoctor(id)\r\n            if (res && res.errCode === 0) {\r\n                this.setState({\r\n                    detailDoctor: res.data,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        let { socket } = this.state;\r\n        socket.close();\r\n    }\r\n    render() {\r\n\r\n        let { language } = this.props;\r\n        let { detailDoctor, messages, doctorIsOnline } = this.state;\r\n        let nameVi = '', nameEn = '';\r\n        if (detailDoctor && detailDoctor.positionData) {\r\n            nameVi = `${detailDoctor.positionData.valueVi}, ${detailDoctor.lastName} ${detailDoctor.firstName}`;\r\n            nameEn = `${detailDoctor.positionData.valueEn}, ${detailDoctor.firstName} ${detailDoctor.lastName}`;\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n                <HomeHeader\r\n                    isShowBanner={false}\r\n                />\r\n                <div className='doctor-detail-container'>\r\n                    <div className='intro-doctor'>\r\n                        <div className='content-left'\r\n                            style={{ backgroundImage: `url(${detailDoctor && detailDoctor.image ? detailDoctor.image : ''})` }}\r\n                        >\r\n                        </div>\r\n                        <div className='content-right'>\r\n                            <div className='up'>\r\n                                {language === LANGUAGES.VI ? nameVi : nameEn}\r\n                            </div>\r\n                            <div className='down'>\r\n                                {detailDoctor.Markdown\r\n                                    && detailDoctor\r\n                                    && detailDoctor.Markdown.description\r\n                                    &&\r\n                                    <span>\r\n                                        {detailDoctor.Markdown.description}\r\n                                    </span>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='schedule-doctor'>\r\n                        <div className='content-left'>\r\n                            <DoctorSchedule\r\n                                doctorIdFromParent={this.state.currentDoctorId}\r\n                            />\r\n                        </div>\r\n                        <div className='content-right'>\r\n                            {/* <Test test1={\"abc\"}> */}\r\n                            <DoctorExtraInfor\r\n                                doctorIdFromParent={this.state.currentDoctorId}\r\n                            />\r\n                            {/* </Test> */}\r\n                        </div>\r\n                    </div>\r\n                    <div className='detail-infor-doctor'>\r\n                        {detailDoctor && detailDoctor.Markdown && detailDoctor.Markdown.contentHTML &&\r\n                            <div dangerouslySetInnerHTML={{ __html: detailDoctor.Markdown.contentHTML }}>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div className='comment-doctor'>\r\n\r\n                    </div>\r\n                </div>\r\n                {doctorIsOnline &&\r\n                    <div className='live-chat-container'>\r\n                        <LiveChat\r\n                            messages={messages}\r\n                            sendMessage={this.sendMessage}\r\n                        />\r\n                    </div>\r\n                }\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailDoctor);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport './ManageSchedule.scss'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport Select from 'react-select';\r\nimport * as actions from \"../../../store/actions\";\r\nimport { CRUD_ACTIONS, LANGUAGES, dateFormat } from '../../../utils';\r\nimport DatePicker from '../../../components/Input/DatePicker';\r\nimport moment from 'moment';\r\nimport { toast } from \"react-toastify\";\r\nimport _ from 'lodash';\r\nimport { saveBulkScheduleDoctor, getDoctorInfoById } from '../../../services/userService'\r\n\r\nclass ManageSchedule extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // listDoctors: [],\r\n            doctor: [],\r\n            selectedDoctor: {},\r\n            currentDate: '',\r\n            rangeTime: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // if(this.userInfo)\r\n        // await getDoctorInfoById()\r\n        // this.props.fetchAllDoctors();\r\n        this.props.fetchAllScheduleTime();\r\n        let data = this.buildDataInputSelect();\r\n        if (data && data.length > 0) {\r\n            this.setState({\r\n                doctor: [...data],\r\n                selectedDoctor: data[0]\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, preState, snapshot) {\r\n        // if (prevProps.allDoctors !== this.props.allDoctors) {\r\n        //     let dataSelect = this.buildDataInputSelect(this.props.allDoctors)\r\n        //     this.setState({\r\n        //         doctor: dataSelect\r\n        //     })\r\n        // }\r\n        if (prevProps.allScheduleTime !== this.props.allScheduleTime) {\r\n            let data = this.props.allScheduleTime\r\n            if (data && data.length > 0) {\r\n                data = data.map(item => ({\r\n                    ...item,\r\n                    isSelected: false\r\n                }))\r\n            }\r\n            this.setState({\r\n                rangeTime: data\r\n            })\r\n        }\r\n\r\n        // if (prevProps.language !== this.props.language) {\r\n        //     let dataSelect = this.buildDataInputSelect(this.props.allDoctors)\r\n        //     this.setState({\r\n        //         doctor: dataSelect\r\n        //     })\r\n        // }\r\n    }\r\n\r\n    buildDataInputSelect = () => {\r\n        let result = [];\r\n        let { language } = this.props;\r\n        // if (inputData && inputData.length > 0) {\r\n        //     inputData.map((item, index) => {\r\n        //         let object = {};\r\n        //         let labelVi = `${item.lastName} ${item.firstName}`\r\n        //         let labelEn = `${item.firstName} ${item.lastName}`\r\n        //         object.label = language === LANGUAGES.VI ? labelVi : labelEn\r\n        //         object.value = item.id;\r\n        //         result.push(object)\r\n        //     })\r\n        // }\r\n        if (this.props.userInfo) {\r\n            let item = this.props.userInfo;\r\n            let object = {};\r\n            let labelVi = `${item.lastName} ${item.firstName}`\r\n            let labelEn = `${item.firstName} ${item.lastName}`\r\n            object.label = language === LANGUAGES.VI ? labelVi : labelEn\r\n            object.value = item.id;\r\n            // object.isDisabled = true;\r\n            result.push(object)\r\n        }\r\n        return result\r\n    }\r\n\r\n    handleChangeSelect = async (selectedOption) => {\r\n        this.setState({ selectedDoctor: selectedOption });\r\n    };\r\n\r\n    handleOnchangeDatePicker = (date) => {\r\n        this.setState({\r\n            currentDate: date[0]\r\n        })\r\n    }\r\n\r\n    handleClickBtnTime = (time) => {\r\n        let { rangeTime } = this.state;\r\n        if (rangeTime && rangeTime.length > 0) {\r\n            rangeTime = rangeTime.map(item => {\r\n                if (item.id === time.id) item.isSelected = !item.isSelected;\r\n                return item;\r\n            }\r\n            )\r\n            this.setState({\r\n                rangeTime: rangeTime\r\n            })\r\n        }\r\n    }\r\n\r\n    handleSaveSchedule = async () => {\r\n        let { rangeTime, selectedDoctor, currentDate } = this.state;\r\n        let result = [];\r\n        if (!currentDate) {\r\n            toast.error(\"Invalid date!\");\r\n            return;\r\n        }\r\n        if (selectedDoctor && _.isEmpty(selectedDoctor)) {\r\n            toast.error(\"Invalid selected doctor!\");\r\n            return;\r\n        }\r\n\r\n        let formatedDate = new Date(currentDate).getTime();\r\n\r\n        if (formatedDate === 'Invalid date') {\r\n            toast.error(\"Invalid date!\");\r\n            return;\r\n        }\r\n        if (rangeTime && rangeTime.length > 0) {\r\n            let selectedTime = rangeTime.filter(item => item.isSelected === true);\r\n            if (selectedTime && selectedTime.length > 0) {\r\n                selectedTime.map((schedule, index) => {\r\n                    let object = {};\r\n                    object.doctorId = selectedDoctor.value;\r\n                    object.date = formatedDate;\r\n                    object.timeType = schedule.keyMap;\r\n                    result.push(object)\r\n                })\r\n\r\n            } else {\r\n                toast.error(\"Invalid selected time!\");\r\n                return;\r\n            }\r\n        }\r\n        let res = null;\r\n        try {\r\n            res = await saveBulkScheduleDoctor({\r\n                arrSchedule: result,\r\n                doctorId: selectedDoctor.value,\r\n                formatedDate: formatedDate.toString()\r\n            })\r\n            if (res && res.errCode === 0) {\r\n                toast.success(\"Save Infor Succeed\");\r\n            } else if (res && res.errCode === 2) {\r\n                toast.error(res.errMessage);\r\n            } else {\r\n                toast.error(\"error saveBulkScheduleDoctor\");\r\n            }\r\n        } catch (error) {\r\n            if (error.response && error.response.status === 403) {\r\n                toast.error(\"Permission denied!\");\r\n            } else {\r\n                toast.error(\"error saveBulkScheduleDoctor\");\r\n            }\r\n        }\r\n\r\n        // let res = new Promise(async (resolve, reject) => {\r\n        //     try {\r\n        //         let data = await saveBulkScheduleDoctor({\r\n        //             arrSchedule: result,\r\n        //             doctorId: selectedDoctor.value,\r\n        //             formatedDate: formatedDate.toString()\r\n        //         })\r\n        //         resolve(data)\r\n        //     } catch (error) {\r\n        //         reject(error)\r\n        //     }\r\n        // })\r\n        // res.then((data) => console.log(data));\r\n        // console.log(\"debuggggggggggg3\")\r\n\r\n\r\n    }\r\n    render() {\r\n        let { rangeTime } = this.state\r\n        let { language } = this.props\r\n        let yesterday = new Date(new Date().setDate(new Date().getDate() - 1));\r\n        console.log(\"=====Debug22222222=====\")\r\n        return (\r\n            <div className='manage-schedule-container'>\r\n                <div className='m-s-title'>\r\n                    <FormattedMessage id=\"manage-schedule.title\" />\r\n                </div>\r\n                <div className='container'>\r\n                    <div className='row'>\r\n                        <div className='col-6'>\r\n                            <label><FormattedMessage id=\"manage-schedule.choose-doctor\" /></label>\r\n                            <Select\r\n                                value={this.state.selectedDoctor}\r\n                                onChange={this.handleChangeSelect}\r\n                                options={this.state.doctor}\r\n                            // isOptionDisabled={(option) => option.disabled}\r\n                            // isOptionDisabled={false}\r\n                            />\r\n                        </div>\r\n                        <div className='col-6'>\r\n                            <label><FormattedMessage id=\"manage-schedule.choose-date\" /></label>\r\n                            <DatePicker\r\n                                onChange={this.handleOnchangeDatePicker}\r\n                                className=\"form-control\"\r\n                                value={this.state.currentDate}\r\n                                minDate={yesterday}\r\n                            />\r\n                        </div>\r\n                        <div className='col-12 pick-hour-container'>\r\n                            {rangeTime && rangeTime.length > 0 &&\r\n                                rangeTime.map((item, index) => {\r\n                                    return (\r\n                                        <button\r\n                                            className={item.isSelected === true ? 'btn btn-schedule active' : 'btn btn-schedule'}\r\n                                            key={index}\r\n                                            onClick={() => this.handleClickBtnTime(item)}\r\n                                        >\r\n                                            {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                                        </button>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                        <div className='col-12'>\r\n                            <button className='btn btn-primary btn-save-schedule'\r\n                                onClick={() => this.handleSaveSchedule()}\r\n                            ><FormattedMessage id=\"manage-schedule.save\" /></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        // allDoctors: state.admin.allDoctors,\r\n        language: state.app.language,\r\n        allScheduleTime: state.admin.allScheduleTime,\r\n        userInfo: state.user.userInfo\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        // fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\r\n        fetchAllScheduleTime: () => dispatch(actions.fetchAllScheduleTime())\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageSchedule);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from 'react-intl'\r\nimport './RemedyModal.scss'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport _ from 'lodash';\r\n// import * as actions from '../../../../store/actions'\r\nimport { LANGUAGES, CRUD_ACTIONS, CommonUtils } from \"../../../utils\"\r\nimport { toast } from 'react-toastify'\r\n\r\nclass RemedyModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            imgBase64: ''\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n        if (this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (this.props.dataModal !== prevProps.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email\r\n            })\r\n        }\r\n    }\r\n\r\n    handleOnchangeEmail = (event) => {\r\n        this.setState({\r\n            email: event.target.value\r\n        })\r\n    }\r\n\r\n    handleOnchangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            this.setState({\r\n                imgBase64: base64\r\n            })\r\n        }\r\n        // event.target.value = null;\r\n    }\r\n\r\n    handleSendRemedy = () => {\r\n        this.props.sendRemedy(this.state)\r\n    }\r\n    render() {\r\n        // toggle={ }\r\n        let { isOpenModal, closeRemedyModal, dataModal, sendRemedy } = this.props\r\n\r\n        return (\r\n            <>\r\n                {/* <Button color=\"danger\" onClick={this.toggle}>{this.props.buttonLabel}</Button> */}\r\n                <Modal isOpen={isOpenModal}\r\n                    className={'booking-modal-container'}\r\n                    size=\"md\"\r\n                    centered\r\n                >\r\n                    {/* <ModalHeader toggle={closeRemedyModal}>Modal title</ModalHeader> */}\r\n                    <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\">Gửi hóa đơn khám bênh thành công</h5>\r\n                        <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={closeRemedyModal}>\r\n                            <span aria-hidden=\"true\">×</span>\r\n                        </button>\r\n                    </div>\r\n                    <ModalBody>\r\n                        <div className='row'>\r\n                            <div className='col-6 form-group'>\r\n                                <label>Email bệnh nhân</label>\r\n                                <input className='form-control' type='email' value={this.state.email}\r\n                                    onChange={(event) => this.handleOnchangeEmail(event)}\r\n                                />\r\n                            </div>\r\n                            <div className='col-6 form-group'>\r\n                                <div className=''>\r\n                                    <label>Chọn file đơn thuốc</label>\r\n                                    <input className='form-control-file' type='file'\r\n                                        onChange={(event) => this.handleOnchangeImage(event)}\r\n                                    ></input>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"primary\" onClick={() => this.handleSendRemedy()}>Send</Button>{' '}\r\n                        <Button color=\"secondary\" onClick={closeRemedyModal}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        // genders: state.admin.genders,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        // fetchGenders: () => dispatch(actions.fetchGenderStart())\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RemedyModal);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { LANGUAGES } from '../../../utils';\r\nimport './ManagePatient.scss'\r\nimport DatePicker from '../../../components/Input/DatePicker';\r\nimport { getAllPatientForDoctor, postSendRemedy } from '../../../services/userService'\r\nimport moment from 'moment';\r\nimport RemedyModal from './RemedyModal';\r\nimport { toast } from 'react-toastify';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nclass ManagePatient extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentDate: moment(new Date()).startOf('day').valueOf(),\r\n            dataPatient: [],\r\n            isOpenRemedyModal: false,\r\n            dataModal: {},\r\n            isShowLoading: false\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n        // this.getDataPatient = await this.getDataPatient()\r\n        console.log(\"Debug2\");\r\n        this.getDataPatient()\r\n    }\r\n\r\n\r\n\r\n    getDataPatient = async () => {\r\n        let { user } = this.props;\r\n        if (user) {\r\n            let { currentDate } = this.state;\r\n            let formatedDate = new Date(currentDate).getTime();\r\n            let res = await getAllPatientForDoctor({\r\n                doctorId: user.id,\r\n                date: formatedDate.toString()\r\n            })\r\n            if (res && res.errCode === 0) {\r\n                this.setState({\r\n                    dataPatient: res.data\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (this.props.user !== prevProps.user) {\r\n            console.log(\"Debug3\");\r\n            this.getDataPatient()\r\n        }\r\n        if (JSON.stringify(this.state.currentDate) !== JSON.stringify(preState.currentDate)) {\r\n            this.getDataPatient()\r\n        }\r\n    }\r\n\r\n    showHideDetailInfor = (status) => {\r\n        this.setState({\r\n            isShowDetailInfor: status\r\n        })\r\n    }\r\n\r\n    handleOnchangeDatePicker = (date) => {\r\n        this.setState({\r\n            currentDate: date[0]\r\n        })\r\n    }\r\n    handleBtnConfirm = (item) => {\r\n        let data = {\r\n            doctorId: item.doctorId,\r\n            patientId: item.patientId,\r\n            email: item.patientData.email,\r\n            timeType: item.timeType,\r\n            patientName: item.patientData.firstName\r\n        }\r\n        this.setState({\r\n            isOpenRemedyModal: true,\r\n            dataModal: data\r\n        })\r\n    }\r\n    closeRemedyModal = () => {\r\n        this.setState({\r\n            isOpenRemedyModal: false,\r\n            dataModal: {\r\n                doctorId: '',\r\n                patientId: '',\r\n                email: '',\r\n                timeType: ''\r\n            }\r\n        })\r\n    }\r\n\r\n    sendRemedy = async (dataChild) => {\r\n        let { dataModal } = this.state;\r\n        this.setState({\r\n            isShowLoading: true\r\n\r\n        })\r\n        let res = await postSendRemedy({\r\n            email: dataChild.email,\r\n            imgBase64: dataChild.imgBase64,\r\n            doctorId: dataModal.doctorId,\r\n            patientId: dataModal.patientId,\r\n            timeType: dataModal.timeType,\r\n            language: this.props.language,\r\n            patientName: dataModal.patientName\r\n        })\r\n        if (res && res.errCode === 0) {\r\n            this.setState({\r\n                isShowLoading: false\r\n            })\r\n            toast.success('Send Remedy successfully')\r\n            this.closeRemedyModal();\r\n            await this.getDataPatient();\r\n        } else {\r\n            this.setState({\r\n                isShowLoading: false\r\n            })\r\n            toast.error('Something wrongs...')\r\n        }\r\n    }\r\n    render() {\r\n        let { dataPatient, isOpenRemedyModal, dataModal } = this.state\r\n        let { language } = this.props\r\n        return (\r\n            <>\r\n                <LoadingOverlay\r\n                    active={this.state.isShowLoading}\r\n                    spinner\r\n                    text='Loading...'\r\n                >\r\n                    <div className='manage-patient-container'>\r\n                        <div className='m-p-title'>\r\n                            Quản lý bệnh nhân khám bệnh\r\n                        </div>\r\n                        <div className='manage-patient-body row'>\r\n                            <div className='col-4 form-group'>\r\n                                <label>Chọn ngày khám</label>\r\n                                <DatePicker\r\n                                    onChange={this.handleOnchangeDatePicker}\r\n                                    className=\"form-control\"\r\n                                    value={this.state.currentDate}\r\n                                // minDate={yesterday}\r\n                                />\r\n                            </div>\r\n                            <div className='col-12'>\r\n                                <table className='table-manage-patient' style={{ width: '100%' }}>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <th>STT</th>\r\n                                            <th>Thời gian</th>\r\n                                            <th>Họ và tên</th>\r\n                                            <th>Địa chỉ</th>\r\n                                            <th>Giới tính</th>\r\n                                            <th>Action</th>\r\n                                        </tr>\r\n                                        {dataPatient && dataPatient.length > 0 ?\r\n                                            dataPatient.map((item, index) => {\r\n                                                let time = language === LANGUAGES.VI ? item.timeTypeDataPatient.valueVi : item.timeTypeDataPatient.valueEn;\r\n                                                let gender = language === LANGUAGES.VI ? item.patientData.genderData.valueVi : item.patientData.genderData.valueEn;\r\n\r\n                                                return (\r\n                                                    <tr key={index}>\r\n                                                        <td>{index + 1}</td>\r\n                                                        <td>{time}</td>\r\n                                                        <td>{item.patientData.firstName}</td>\r\n                                                        <td>{item.patientData.address}</td>\r\n                                                        <td>{gender}</td>\r\n                                                        <td>\r\n                                                            <button className='mp-btn-confirm' onClick={() => this.handleBtnConfirm(item)}>Xác nhận</button>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                )\r\n                                            })\r\n                                            :\r\n                                            <tr>\r\n                                                <td colSpan=\"6\" style={{ textAlign: \"center\" }}>no data</td>\r\n                                            </tr>\r\n                                        }\r\n\r\n\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <RemedyModal\r\n                        isOpenModal={isOpenRemedyModal}\r\n                        dataModal={dataModal}\r\n                        closeRemedyModal={this.closeRemedyModal}\r\n                        sendRemedy={this.sendRemedy}\r\n                    />\r\n                </LoadingOverlay>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        user: state.user.userInfo,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManagePatient);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport './ManageChat.scss'\r\nimport { io } from 'socket.io-client'\r\nimport { format } from 'timeago.js'\r\n\r\nclass ManageChat extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentMessage: '',\r\n            selectedConversation: null,\r\n            socket: io(\"ws://localhost:3001\"),\r\n            conversations: [],\r\n            initialMessage: {\r\n                content: 'Xin chào, mình là admin phòng khám. Mình có thể giúp gì cho bạn?',\r\n                owner: true,\r\n                time: format(Date.now())\r\n            },\r\n        }\r\n    }\r\n    // {\r\n    //     patientId: 'hung',\r\n    //     displayMessages: [{\r\n    //         content: 'Xin chào, mình là admin phòng khám. Mình có thể giúp gì cho bạn?',\r\n    //         owner: true,\r\n    //         time: format(Date.now())\r\n    //     }]\r\n    // }\r\n    async componentDidMount() {\r\n        let { conversations, socket } = this.state\r\n        // if (conversations) {\r\n        //     this.setState({\r\n        //         selectedConversation: conversations[0].patientId\r\n        //     })\r\n        // }\r\n        // const socket = io(\"ws://localhost:3001\");\r\n        socket.emit(\"getDoctorInfo\", {\r\n            doctorSession: this.props?.user?.accessToken,\r\n            doctorId: this.props?.user?.id\r\n        })\r\n\r\n        socket.on(\"messageToDoctor\", (data) => {\r\n            let currentConversationList = this.state.conversations;\r\n            let checkConversationExist = currentConversationList.some((conversation) => conversation.patientId === data.patientId)\r\n            if (!checkConversationExist) {\r\n                this.setState({\r\n                    conversations: [\r\n                        ...currentConversationList,\r\n                        {\r\n                            patientId: data.patientId,\r\n                            displayMessages: [this.state.initialMessage, {\r\n                                content: data.messageText,\r\n                                owner: false,\r\n                                time: format(Date.now())\r\n                            }]\r\n                        }\r\n                    ]\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    conversations: currentConversationList.map((conversation) => {\r\n                        if (conversation.patientId === data.patientId) {\r\n                            conversation.displayMessages.push({\r\n                                content: data.messageText,\r\n                                owner: false,\r\n                                time: format(Date.now())\r\n                            })\r\n                        }\r\n                        return conversation\r\n                    })\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, preState, snapshot) {\r\n    }\r\n\r\n    handleOnClickConversation(id) {\r\n        this.setState({ selectedConversation: id })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        let { socket } = this.state;\r\n        socket.close();\r\n    }\r\n    getMessagesOfConversation() {\r\n        let data = this.state.conversations.find((conversation) => {\r\n            return conversation.patientId === this.state.selectedConversation\r\n        })\r\n        if (data) {\r\n            return data.displayMessages\r\n        } else {\r\n            return []\r\n        }\r\n    }\r\n\r\n    shortenName = (patientId) => {\r\n        return \"User \" + patientId.slice(0, 3) + \"...\" + patientId.slice(-3);\r\n    }\r\n\r\n    handleSendMessage = async () => {\r\n        let { socket, selectedConversation, currentMessage } = this.state;\r\n        let currentConversationList = this.state.conversations;\r\n        let data = {\r\n            messageText: currentMessage,\r\n            patientId: selectedConversation\r\n        }\r\n        await socket.emit('messageFromDoctor', data);\r\n        this.setState({\r\n            conversations: currentConversationList.map((conversation) => {\r\n                if (conversation.patientId === selectedConversation) {\r\n                    conversation.displayMessages.push({\r\n                        content: currentMessage,\r\n                        owner: true,\r\n                        time: format(Date.now())\r\n                    })\r\n                }\r\n                return conversation\r\n            }),\r\n            currentMessage: ''\r\n        })\r\n        // return true;\r\n        // console.log(this.state.currentMessage)\r\n    }\r\n\r\n    render() {\r\n        let { conversations, selectedConversation, currentMessage } = this.state\r\n        let displayMessages = this.getMessagesOfConversation()\r\n        return (\r\n            <>\r\n                <div className=\"container manage-chat-container\">\r\n                    <div className=\"row clearfix manage-chat-block\">\r\n                        <div className=\"col-lg-12\">\r\n                            <div className=\"card chat-app\">\r\n                                <div id=\"plist\" className=\"people-list\">\r\n                                    <ul className=\"list-unstyled chat-list mt-2 mb-0\">\r\n                                        {conversations && conversations.map((item, index) => {\r\n                                            return (\r\n                                                <li className={selectedConversation === item.patientId ? 'clearfix active' : 'clearfix'} key={index} onClick={() => this.handleOnClickConversation(item.patientId)}>\r\n                                                    <img src=\"https://bootdey.com/img/Content/avatar/avatar1.png\" alt=\"avatar\" />\r\n                                                    <div className=\"about\">\r\n                                                        <div className=\"name\">{this.shortenName(item.patientId)}</div>\r\n                                                        <div className=\"status\"> <i className=\"fa fa-circle offline\"></i> left 7 mins ago </div>\r\n                                                    </div>\r\n                                                </li>\r\n                                            )\r\n                                        })\r\n                                        }\r\n                                    </ul>\r\n                                </div>\r\n                                <div className=\"chat\">\r\n                                    <div className=\"chat-header clearfix\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-lg-6\">\r\n                                                <a href=\"javascript:void(0);\" data-toggle=\"modal\" data-target=\"#view_info\">\r\n                                                    <img src=\"https://bootdey.com/img/Content/avatar/avatar1.png\" alt=\"avatar\" />\r\n                                                </a>\r\n                                                <div className=\"chat-about\">\r\n                                                    <h6 className=\"m-b-0\">{selectedConversation}</h6>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"chat-history\">\r\n                                        <ul className=\"m-b-0\">\r\n                                            {displayMessages && displayMessages.map((message, index) => {\r\n                                                return (\r\n                                                    <li className=\"clearfix\" key={index}>\r\n                                                        {message.owner ?\r\n                                                            (\r\n                                                                <div>\r\n                                                                    <div className=\"message-data text-right\">\r\n                                                                        <span className=\"message-data-time\">{message.time}</span>\r\n                                                                    </div>\r\n                                                                    <div className=\"message other-message float-right\"> {message.content} </div>\r\n                                                                </div>\r\n                                                            )\r\n                                                            :\r\n                                                            (\r\n                                                                <div>\r\n                                                                    <div className=\"message-data\">\r\n                                                                        <span className=\"message-data-time\">{message.time}</span>\r\n                                                                    </div>\r\n                                                                    <div className=\"message my-message\">{message.content}</div>\r\n                                                                </div>\r\n                                                            )\r\n                                                        }\r\n                                                    </li>\r\n                                                )\r\n                                            })}\r\n                                        </ul>\r\n                                    </div>\r\n                                    <div className=\"chat-message clearfix\">\r\n                                        <div className=\"input-group mb-0\">\r\n                                            <div className=\"input-group-prepend\">\r\n                                                <span className=\"input-group-text\"><i className=\"fa fa-send\"></i></span>\r\n                                            </div>\r\n                                            {/* <div className='bottom-container'> */}\r\n                                            <input value={currentMessage} onChange={(e) => this.setState({ currentMessage: e.target.value })} type=\"text\" className=\"form-control\" placeholder=\"Enter text here...\" />\r\n                                            <button onClick={() => this.handleSendMessage()}>Send</button>\r\n                                            {/* </div> */}\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        // language: state.app.language,\r\n        user: state.user.userInfo\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageChat);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport Header from '../containers/Header/Header';\r\nimport ManageSchedule from '../containers/System/Doctor/ManageSchedule';\r\nimport ManagePatient from '../containers/System/Doctor/ManagePatient';\r\nimport ManageChat from '../containers/System/Doctor/ManageChat';\r\n// ManagePatient\r\n\r\nclass Doctor extends Component {\r\n    render() {\r\n        const { systemMenuPath, isLoggedIn } = this.props;\r\n        return (\r\n            <React.Fragment>\r\n                {isLoggedIn && <Header />}\r\n                < div className=\"system-container\" >\r\n                    <div className=\"system-list\">\r\n                        <Switch>\r\n                            <Route path=\"/doctor/manage-schedule\" component={ManageSchedule} />\r\n                            <Route path=\"/doctor/manage-patient\" component={ManagePatient} />\r\n                            <Route path=\"/doctor/live-chat\" component={ManageChat} />\r\n                        </Switch>\r\n                    </div>\r\n                </div >\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        systemMenuPath: state.app.systemMenuPath,\r\n        isLoggedIn: state.user.isLoggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Doctor);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { IntlProvider } from \"react-intl\";\r\n\r\nimport '@formatjs/intl-pluralrules/polyfill';\r\nimport '@formatjs/intl-pluralrules/locale-data/en';\r\nimport '@formatjs/intl-pluralrules/locale-data/vi';\r\n\r\nimport '@formatjs/intl-relativetimeformat/polyfill';\r\nimport '@formatjs/intl-relativetimeformat/locale-data/en';\r\nimport '@formatjs/intl-relativetimeformat/locale-data/vi';\r\n\r\nimport { LanguageUtils } from '../utils'\r\n\r\nconst messages = LanguageUtils.getFlattenedMessages();\r\n\r\nclass IntlProviderWrapper extends Component {\r\n\r\n    render() {\r\n        const { children, language } = this.props;\r\n\r\n        return (\r\n            <IntlProvider\r\n                locale={language}\r\n                messages={messages[language]}\r\n                defaultLocale=\"vi\">\r\n                {children}\r\n            </IntlProvider>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(IntlProviderWrapper);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport './Payment.scss'\r\nimport Web3 from \"web3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\n// import { CONTACT_ADDRESS, CONTACT_ABI } from './load-contract'\r\nimport { toast } from 'react-toastify'\r\nimport { getDetailBillByToken, getContractAbi, transfer, initBill, verifyPayment } from '../../services/userService'\r\n\r\nclass Payment extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: '',\r\n            balance: '',\r\n            web3Api: {\r\n                provider: null,\r\n                web3: null,\r\n                contract: null\r\n            },\r\n            // shouldReload: false,\r\n            billId: '',\r\n            amount: '',\r\n            weiAmount: '',\r\n            // transactionSuccess: false,\r\n            smartContractAddress: '',\r\n            abi: {},\r\n            initOrPayment: 'init'\r\n            // addressContact: ''\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let token = this.props.token;\r\n        let res = await getDetailBillByToken({ token: token })\r\n        if (res && res.errCode === 0) {\r\n            if (res.data.isInitPayment === false) {\r\n                let { amount, weiAmount } = res.data\r\n                this.setState({\r\n                    initOrPayment: 'init',\r\n                    amount: amount,\r\n                    weiAmount: weiAmount\r\n                })\r\n            } else {\r\n                let { amount, billId, weiAmount } = res.data\r\n                this.setState({\r\n                    billId: billId,\r\n                    amount: amount,\r\n                    weiAmount: weiAmount,\r\n                    initOrPayment: 'payment'\r\n                })\r\n            }\r\n        }\r\n        let resAbi = await getContractAbi()\r\n        this.checkWalletIsConnected();\r\n        if (resAbi && resAbi.errCode === 0) {\r\n            let { address, abi } = resAbi.data\r\n            this.setState({\r\n                smartContractAddress: address,\r\n                abi: abi\r\n            })\r\n            await this.loadProvider(abi, address);\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (this.state.account !== preState.account) {\r\n            let { web3Api } = this.state;\r\n            web3Api.web3.eth.defaultAccount = this.state.account;\r\n            let web3 = web3Api.web3;\r\n            let { smartContractAddress, abi } = this.state;\r\n            web3Api.contract = new web3.eth.Contract(abi, smartContractAddress);\r\n            this.setState({\r\n                web3Api: web3Api\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        let { web3Api } = this.state;\r\n        if (web3Api && web3Api.web3) {\r\n            web3Api.web3.eth.clearSubscriptions();\r\n        }\r\n        // clear event listeners\r\n    }\r\n    updateAccount = async () => {\r\n        const accounts = await this.state.web3Api.web3.eth.getAccounts();\r\n        console.log(\"🚀 ~ file: Payment.js:59 ~ Payment ~ updateAccount= ~ accounts\", accounts)\r\n        if (accounts && accounts.length > 0) {\r\n            const accountAddress = accounts[0];\r\n            console.log(\"🚀 ~ file: Payment.js:60 ~ Payment ~ updateAccount= ~ accountAddress\", accountAddress)\r\n            let _balance = await this.state.web3Api.web3.eth.getBalance(accountAddress)\r\n            console.log(\"🚀 ~ file: Payment.js:62 ~ Payment ~ updateAccount= ~ _balance\", _balance)\r\n            this.setState({\r\n                account: accountAddress,\r\n                balance: _balance,\r\n                // web3Api: web3Api\r\n            });\r\n        } else {\r\n            this.setState({\r\n                balance: '',\r\n                account: ''\r\n            })\r\n        }\r\n    };\r\n\r\n    loadProvider = async (CONTACT_ABI, CONTACT_ADDRESS) => {\r\n        const provider = await detectEthereumProvider();\r\n        const web3 = new Web3(provider);\r\n        const myContract = new web3.eth.Contract(CONTACT_ABI, CONTACT_ADDRESS);\r\n        // const subscription = web3.eth.subscribe('logs', {\r\n        //     address: CONTACT_ADDRESS,\r\n        //     // topics: [myContract.events.TransactionMade().signature]\r\n        // }, (error, result) => {\r\n        //     if (error) {\r\n        //         console.log(error);\r\n        //     } else {\r\n        //         console.log(\"🚀 ~ file: Payment.js:75 ~ Payment ~ loadProvider= ~ result\", result)\r\n        //         console.log(\"🚀 ~ file: Payment.js:75 ~ Payment ~ loadProvider= ~ result.from\", result.from)\r\n        //         // console.log(\"🚀 ~ file: Payment.js:76 ~ Payment ~ loadProvider= ~ result.args.value.toString()\", result.args.value)\r\n        //     }\r\n        // });\r\n\r\n        // var subscription = web3.eth.subscribe('logs', {\r\n        //     address: CONTACT_ADDRESS,\r\n        //     // topics: [web3.utils.keccak256('bill99985')]\r\n        //     // topics: ['0xb89eb2e5bb33da1bf9a8a2057ab9844372b0ecd9']\r\n        // }, function (error, result) {\r\n        //     if (!error)\r\n        //         console.log(result);\r\n        // })\r\n        //     .on(\"connected\", function (subscriptionId) {\r\n        //         console.log(subscriptionId);\r\n        //         // web3.utils.keccak256('bill99985')\r\n        //         // console.log(\"🚀 ~ file: Payment.js:110 ~ Payment ~ web3.utils.keccak256('bill99985')\", web3.utils.keccak256('bill99985'))\r\n        //     })\r\n        //     .on(\"data\", function (log) {\r\n        //         console.log(\"🚀 ~ file: Payment.js:113 ~ Payment ~ log\", log)\r\n        //         let billData = web3.eth.abi.decodeParameters(['string', 'uint256'], log.data);\r\n        //         let billId = billData[0]\r\n        //         let weiAmount = billData[1]\r\n        //         let ethAmount = Web3.utils.fromWei(weiAmount, \"ether\")\r\n        //         let alertMessage = `You paid bill ${billId} with ${ethAmount} ETH`\r\n        //         // console.log(\"debug123\")\r\n        //         toast.success(alertMessage)\r\n        //     })\r\n        //     .on(\"changed\", function (log) {\r\n        //         console.log(\"🚀 ~ file: Payment.js:94 ~ Payment ~ .on ~ log\", log)\r\n        //     });\r\n\r\n        this.setState({\r\n            web3Api: {\r\n                web3: new Web3(provider),\r\n                provider: provider,\r\n                contract: myContract\r\n            }\r\n        })\r\n    }\r\n\r\n    checkWalletIsConnected = async () => {\r\n        const { ethereum } = window;\r\n        if (!ethereum) {\r\n            toast.error(\"Make sure you have Metamask installed!\");\r\n            return;\r\n        } else {\r\n            await window.ethereum.enable();\r\n            window.ethereum.on('accountsChanged', this.updateAccount);\r\n            console.log(\"Wallet exists! We're ready to go!\");\r\n        }\r\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n        console.log(\"🚀 ~ file: Payment.js:126 ~ Payment ~ checkWalletIsConnected ~ accounts\", accounts)\r\n        if (accounts.length !== 0) {\r\n            console.log(\"Found an authorized account: \", accounts[0]);\r\n            let _balance = await this.state.web3Api.web3.eth.getBalance(accounts[0])\r\n            this.setState({\r\n                account: accounts[0],\r\n                balance: _balance\r\n            })\r\n        } else {\r\n            // await window.ethereum.enable();\r\n            console.log(\"No authorized account found\");\r\n            // await this.connectWalletHandler()\r\n        }\r\n    }\r\n\r\n    connectWalletHandler = async () => {\r\n        const { ethereum } = window;\r\n        if (!ethereum) {\r\n            alert(\"Please install Metamask!\");\r\n        }\r\n        try {\r\n            // console.log(\"debug\")\r\n            const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\r\n            // console.log(\"🚀 ~ file: Payment.js:173 ~ Payment ~ connectWalletHandler ~ accounts\", accounts)\r\n            console.log(\"Found an account! Address: \", accounts[0]);\r\n            let _balance = await this.state.web3Api.web3.eth.getBalance(accounts[0])\r\n            this.setState({\r\n                account: accounts[0],\r\n                balance: _balance\r\n            })\r\n            toast.success('Connect wallet succeed!');\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    payBill = async () => {\r\n        const { contract, web3 } = this.state.web3Api;\r\n        const { account, weiAmount, billId, initOrPayment } = this.state;\r\n        if (initOrPayment && initOrPayment === 'init') {\r\n            if (account && weiAmount) {\r\n                try {\r\n                    await contract.methods.initBill(this.props.token).send({\r\n                        from: account,\r\n                        value: weiAmount\r\n                    })\r\n                    let res = await initBill({ token: this.props.token });\r\n                    if (res && res.errCode === 0) {\r\n                        toast.success(\"Init bill successfully!\");\r\n                        this.setState({\r\n                            initOrPayment: 'payment',\r\n                            billId: res.data.billId,\r\n                            amount: res.data.amount,\r\n                            weiAmount: res.data.weiAmount\r\n                        });\r\n                    } else {\r\n                        toast.error(res.errMessage);\r\n                    }\r\n                } catch (error) {\r\n                    console.log(\"🚀 ~ file: Payment.js:230 ~ Payment ~ payBill= ~ error\", error)\r\n                    try {\r\n                        let statusToken = await contract.methods.checkTokenStatus(this.props.token).call();\r\n                        if (statusToken === true) {\r\n                            toast.warn(\"This token was used to initialize the bill\");\r\n                            this.setState({\r\n                                initOrPayment: 'payment'\r\n                            })\r\n                        } else {\r\n                            toast.error(\"Something went wrong\");\r\n                        }\r\n                    } catch (error) {\r\n                        console.log(\"🚀 ~ file: Payment.js:242 ~ Payment ~ payBill= ~ error\", error)\r\n                        if (error.message.includes(\"Token value must be not empty\")) {\r\n                            toast.error(\"Token value must be not empty\");\r\n                        } else {\r\n                            toast.error(\"Something went wrong\");\r\n                        }\r\n                    }\r\n\r\n                }\r\n                let _balance = await web3.eth.getBalance(account)\r\n                this.setState({\r\n                    balance: _balance\r\n                })\r\n            } else {\r\n                toast.error(\"Missing data for account, weiAmount\");\r\n            }\r\n        } else if (initOrPayment && initOrPayment === 'payment') {\r\n            console.log(\"🚀 ~ file: Payment.js:257 ~ Payment ~ payBill= ~ this.state\", this.state)\r\n            if (account && weiAmount && billId) {\r\n                try {\r\n                    await contract.methods.addFunds(this.props.token).send({\r\n                        from: account,\r\n                        value: weiAmount\r\n                    })\r\n                    let res = await verifyPayment({ token: this.props.token })\r\n                    if (res && res.errCode === 0) {\r\n                        toast.success('Payment success!')\r\n                        this.props.changeToSuccessStatus()\r\n                    } else {\r\n                        toast.error(res.errMessage)\r\n                    }\r\n                } catch (error) {\r\n                    toast.error(\"Something went wrong!\")\r\n                }\r\n\r\n                // let test = await contract.methods.addFunds(this.props.token).call()\r\n                // console.log(\"🚀 ~ file: Payment.js:264 ~ Payment ~ payBill= ~ test\", test)\r\n                // .catch(function (error) {\r\n                //     alert(\"Transaction failed. Conditions in the smart contract were not met.\")\r\n                // })\r\n                let _balance = await web3.eth.getBalance(account)\r\n                this.setState({\r\n                    balance: _balance\r\n                })\r\n            } else {\r\n                toast.error(\"Missing data for account, weiAmount\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    test = async () => {\r\n        const { contract, web3 } = this.state.web3Api;\r\n        const { account } = this.state\r\n        // await contract.methods.registerAccountForDoctor('0x025227a93c0E854dED1D5783Ad8934aeA9D11911').send({\r\n        //     from: account\r\n        // })\r\n        let data = await contract.methods.getBalanceByDoctorAccountDebug('0x025227a93c0E854dED1D5783Ad8934aeA9D11911').call()\r\n        console.log(\"🚀 ~ file: Payment.js:300 ~ Payment ~ test= ~ data\", data)\r\n        // await contract.methods.registerAccountForDoctor('0x891B48a8CDF6E7A6402008322eFc17a21E55BF5C').call()\r\n    }\r\n    render() {\r\n        let { web3 } = this.state.web3Api\r\n        let { balance, account, billId, amount, weiAmount, initOrPayment } = this.state;\r\n        let ethAmount;\r\n        if (weiAmount) {\r\n            ethAmount = Web3.utils.fromWei(weiAmount, \"ether\");\r\n        }\r\n        if (web3) {\r\n            balance = web3.utils.fromWei(balance, \"ether\");\r\n        }\r\n        return (\r\n            <div className='container'>\r\n                <div className='payment-title'>\r\n                    <h1>{initOrPayment == 'payment'\r\n                        ?\r\n                        'Please pay the bill to complete the booking'\r\n                        :\r\n                        'Please pay to initiate an appointment'\r\n                    }</h1>\r\n                </div>\r\n                <div className=\"faucet-wrapper\">\r\n                    <div className=\"faucet\">\r\n                        <div className=\"balance-view is-size-3\">\r\n                            Your balance: <strong>{balance}</strong> ETH\r\n                        </div>\r\n                        <span className='detail-account'>\r\n                            <p>\r\n                                <strong>Accounts Address: </strong>\r\n                                {\r\n                                    account ? account : \"Accounts Denied\"\r\n                                }\r\n                            </p>\r\n                        </span>\r\n                        {initOrPayment == 'payment'\r\n                            ?\r\n                            <div className='bill-data'>\r\n                                <p><strong>BillId:</strong>  {billId}</p>\r\n                                <p><strong>Amount:</strong>  {amount} USD - {ethAmount} ETH</p>\r\n                            </div>\r\n                            :\r\n                            <div className='bill-init'>\r\n                                <p><strong>Amount:</strong>  {amount} USD - {ethAmount} ETH</p>\r\n                            </div>\r\n                        }\r\n                        <div className='button-container'>\r\n                            <button className=\"button is-primary mr-5 payment-button\" onClick={() => this.payBill()}>Payment</button>\r\n                            {/* <button className=\"button is-danger mr-5\" onClick={() => withdraw()}>Withdraw</button> */}\r\n                            <button className=\"button is-link connect-button\"\r\n                                onClick={() =>\r\n                                    // web3Api.provider.request({ method: \"eth_requestAccounts\" })}\r\n                                    this.connectWalletHandler()}\r\n                            >\r\n                                Connect Wallets\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    {/* <button onClick={() => this.test()}>Test</button> */}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Payment);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { postVerifyBookAppointment } from '../../services/userService';\r\nimport HomeHeader from '../HomePage/HomeHeader';\r\nimport './VerifyEmail.scss'\r\nimport Payment from './Payment';\r\n\r\nclass VerifyEmail extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            statusVerify: false,\r\n            errCode: 0,\r\n            token: '',\r\n            isSuccessStatus: false\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n        if (this.props.location && this.props.location.search) {\r\n            let urlParams = new URLSearchParams(this.props.location.search);\r\n            let token = urlParams.get('token');\r\n            let doctorId = urlParams.get('doctorId');\r\n            this.setState({\r\n                token: token\r\n            })\r\n            let res = await postVerifyBookAppointment({\r\n                token: token,\r\n                doctorId: doctorId\r\n            })\r\n            if (res && res.errCode === 0) {\r\n                this.setState({\r\n                    statusVerify: true,\r\n                    errCode: res.errCode\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    statusVerify: true,\r\n                    errCode: res && res.errCode ? res.errCode : -1\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n    }\r\n\r\n    changeToSuccessStatus = () => {\r\n        console.log(\"Debuggggggggggggg1\")\r\n        this.setState({\r\n            isSuccessStatus: true\r\n        })\r\n    }\r\n\r\n    showHideDetailInfor = (status) => {\r\n        this.setState({\r\n            isShowDetailInfor: status\r\n        })\r\n    }\r\n    render() {\r\n        let { statusVerify, errCode, token, isSuccessStatus } = this.state\r\n        console.log(\"🚀 ~ file: VerifyEmail.js:64 ~ VerifyEmail ~ render ~ isSuccessStatus\", isSuccessStatus)\r\n        return (\r\n            <>\r\n                <HomeHeader />\r\n                <div className='verify-email-container'>\r\n                    {statusVerify === false ?\r\n                        <div>\r\n                            Loading data...\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            {errCode === 0 && token && isSuccessStatus === false ?\r\n                                // <div className='infor-booking'>Xác nhận lịch hẹn thành công!</div>\r\n                                <div>\r\n                                    <Payment\r\n                                        token={token}\r\n                                        changeToSuccessStatus={this.changeToSuccessStatus}\r\n                                    /></div>\r\n                                :\r\n                                <div className='infor-booking'>\r\n                                    {isSuccessStatus === true ?\r\n                                        \"Xác nhận lịch hẹn thành công!\"\r\n                                        :\r\n                                        \"Lịch hẹn không tồn tại hoặc đã được xác nhận!\"\r\n                                    }\r\n                                </div>\r\n\r\n                            }\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VerifyEmail);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { LANGUAGES } from '../../../utils';\r\nimport './DetailSpecialty.scss'\r\nimport HomeHeader from '../../../containers/HomePage/HomeHeader';\r\nimport DoctorSchedule from '../Doctor/DoctorSchedule';\r\nimport DoctorExtraInfor from '../Doctor/DoctorExtraInfor';\r\nimport ProfileDoctor from '../Doctor/ProfileDoctor';\r\nimport { getDetailSpecialtyById, getAllCodeService } from '../../../services/userService'\r\nimport _ from 'lodash';\r\n\r\nclass DetailSpecialty extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arrDoctorId: [],\r\n            dataDetailSpecialty: {},\r\n            listProvince: []\r\n            // arrDoctorId: [33]\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            let id = this.props.match.params.id\r\n            let res = await getDetailSpecialtyById({\r\n                id: id,\r\n                location: 'ALL'\r\n            })\r\n\r\n            let resProvince = await getAllCodeService('PROVINCE');\r\n\r\n            if (res && res.errCode === 0 && resProvince.errCode === 0) {\r\n                let data = res.data;\r\n                let arrDoctorId = []\r\n                if (data && !_.isEmpty(res.data)) {\r\n                    let arr = data.doctorSpecialty;\r\n                    if (arr && arr.length > 0) {\r\n                        arr.map((item) => {\r\n                            arrDoctorId.push(item.doctorId)\r\n                        })\r\n\r\n                    }\r\n                }\r\n\r\n                let dataProvince = resProvince.data;\r\n                if (dataProvince && dataProvince.length > 0) {\r\n                    dataProvince.unshift({\r\n                        createAt: null,\r\n                        keyMap: 'ALL',\r\n                        type: 'PROVINCE',\r\n                        valueEn: 'ALL',\r\n                        valueVi: 'Toàn quốc'\r\n                    })\r\n                }\r\n\r\n                this.setState({\r\n                    dataDetailSpecialty: res.data,\r\n                    arrDoctorId: arrDoctorId,\r\n                    listProvince: dataProvince ? dataProvince : []\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    async componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    showHideDetailInfor = (status) => {\r\n        this.setState({\r\n            isShowDetailInfor: status\r\n        })\r\n    }\r\n\r\n    handleOnChangeSelect = async (event) => {\r\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            let id = this.props.match.params.id;\r\n            let location = event.target.value;\r\n\r\n            let res = await getDetailSpecialtyById({\r\n                id: id,\r\n                location: location\r\n            })\r\n\r\n\r\n            if (res && res.errCode === 0) {\r\n                let data = res.data;\r\n                let arrDoctorId = []\r\n                if (data && !_.isEmpty(res.data)) {\r\n                    let arr = data.doctorSpecialty;\r\n                    if (arr && arr.length > 0) {\r\n                        arr.map((item) => {\r\n                            arrDoctorId.push(item.doctorId)\r\n                        })\r\n\r\n                    }\r\n                }\r\n\r\n                this.setState({\r\n                    dataDetailSpecialty: res.data,\r\n                    arrDoctorId: arrDoctorId,\r\n                })\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        let { arrDoctorId, dataDetailSpecialty, listProvince } = this.state\r\n        console.log(\"🚀 ~ file: detailSpecialty.js:50 ~ DetailSpecialty ~ render ~ dataDetailSpecialty\", dataDetailSpecialty)\r\n        let { language } = this.props;\r\n        return (\r\n            <>\r\n                <div className='detail-specialty-container' >\r\n                    <HomeHeader />\r\n                    <div className='detail-specialty-body'>\r\n\r\n\r\n                        <div className='description-specialty'>\r\n                            {dataDetailSpecialty && !_.isEmpty(dataDetailSpecialty) &&\r\n                                <div dangerouslySetInnerHTML={{ __html: dataDetailSpecialty.descriptionHTML }}>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <div className='search-sp-doctor'>\r\n                            <select onChange={(event) => this.handleOnChangeSelect(event)}>\r\n                                {listProvince && listProvince.length > 0 &&\r\n                                    listProvince.map((item, index) => {\r\n                                        return (\r\n                                            <option key={index} value={item.keyMap}>\r\n                                                {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                                            </option>\r\n                                        )\r\n                                    }\r\n                                    )\r\n                                }\r\n\r\n                            </select>\r\n                        </div>\r\n                        {arrDoctorId && arrDoctorId.length > 0 &&\r\n                            arrDoctorId.map((item, index) => {\r\n                                return (\r\n                                    <div className='each-doctor' key={index}>\r\n                                        <div className='dt-content-left'>\r\n                                            <div className='profile-doctor'>\r\n                                                <ProfileDoctor\r\n                                                    doctorId={item}\r\n                                                    isShowDescriptionDoctor={true}\r\n                                                    isShowLinkDetail={true}\r\n                                                    isShowPrice={false}\r\n                                                // dataTime={dataTime}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='dt-content-right'>\r\n                                            <div className='doctor-schedule'>\r\n                                                <DoctorSchedule\r\n                                                    doctorIdFromParent={item}\r\n                                                />\r\n                                            </div>\r\n                                            <div className='doctor-extra-infor'>\r\n                                                <DoctorExtraInfor\r\n                                                    doctorIdFromParent={item}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailSpecialty);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { LANGUAGES } from '../../../utils';\r\nimport './DetailClinic.scss'\r\nimport HomeHeader from '../../../containers/HomePage/HomeHeader';\r\nimport DoctorSchedule from '../Doctor/DoctorSchedule';\r\nimport DoctorExtraInfor from '../Doctor/DoctorExtraInfor';\r\nimport ProfileDoctor from '../Doctor/ProfileDoctor';\r\nimport { getDetailClinicById, getAllCodeService } from '../../../services/userService'\r\nimport _ from 'lodash';\r\n\r\nclass DetailClinic extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arrDoctorId: [],\r\n            dataDetailClinic: {},\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            let id = this.props.match.params.id\r\n            let res = await getDetailClinicById({\r\n                id: id\r\n            })\r\n            if (res && res.errCode === 0) {\r\n                let data = res.data;\r\n                let arrDoctorId = []\r\n                if (data && !_.isEmpty(res.data)) {\r\n                    let arr = data.doctorClinic;\r\n                    if (arr && arr.length > 0) {\r\n                        arr.map((item) => {\r\n                            arrDoctorId.push(item.doctorId)\r\n                        })\r\n\r\n                    }\r\n                }\r\n\r\n                this.setState({\r\n                    dataDetailClinic: res.data,\r\n                    arrDoctorId: arrDoctorId,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    async componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    showHideDetailInfor = (status) => {\r\n        this.setState({\r\n            isShowDetailInfor: status\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        let { arrDoctorId, dataDetailClinic } = this.state\r\n        let { language } = this.props;\r\n        return (\r\n            <>\r\n                <div className='detail-specialty-container' >\r\n                    <HomeHeader />\r\n                    <div className='detail-specialty-body'>\r\n\r\n                        <div className='description-specialty'>\r\n                            {dataDetailClinic && !_.isEmpty(dataDetailClinic) &&\r\n                                <>\r\n                                    <div>{dataDetailClinic.name}</div>\r\n                                    <div dangerouslySetInnerHTML={{ __html: dataDetailClinic.descriptionHTML }}>\r\n                                    </div>\r\n                                </>\r\n                            }\r\n                        </div>\r\n                        {arrDoctorId && arrDoctorId.length > 0 &&\r\n                            arrDoctorId.map((item, index) => {\r\n                                return (\r\n                                    <div className='each-doctor' key={index}>\r\n                                        <div className='dt-content-left'>\r\n                                            <div className='profile-doctor'>\r\n                                                <ProfileDoctor\r\n                                                    doctorId={item}\r\n                                                    isShowDescriptionDoctor={true}\r\n                                                    isShowLinkDetail={true}\r\n                                                    isShowPrice={false}\r\n                                                // dataTime={dataTime}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='dt-content-right'>\r\n                                            <div className='doctor-schedule'>\r\n                                                <DoctorSchedule\r\n                                                    doctorIdFromParent={item}\r\n                                                />\r\n                                            </div>\r\n                                            <div className='doctor-extra-infor'>\r\n                                                <DoctorExtraInfor\r\n                                                    doctorIdFromParent={item}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailClinic);\r\n","import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { ConnectedRouter as Router } from 'connected-react-router';\r\nimport { history } from '../redux'\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { userIsAuthenticated, UserIsNotAuthenticatedAndAdminRole, UserIsNotAuthenticatedAndDoctorRole } from '../hoc/authentication';\r\nimport { path } from '../utils'\r\nimport Home from '../routes/Home';\r\n// import Login from '../routes/Login';\r\nimport Login from '../containers/Auth/Login';\r\n// import Header from './Header/Header';\r\nimport System from '../routes/System';\r\nimport DetailDoctor from './Patient/Doctor/DetailDoctor';\r\nimport HomePage from '../containers/HomePage/HomePage'\r\nimport { CustomToastCloseButton } from '../components/CustomToast';\r\nimport CustomScrollbars from '../components/CustomScrollbars';\r\nimport Doctor from '../routes/Doctor';\r\nimport IntlProviderWrapper from \"../hoc/IntlProviderWrapper\";\r\nimport VerifyEmail from './Patient/VerifyEmail';\r\nimport DetailSpecialty from './Patient/Specialty/DetailSpecialty';\r\nimport DetailClinic from './Patient/Clinic/DetailClinic';\r\nimport Payment from './Patient/Payment';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            roleId: '',\r\n        }\r\n    }\r\n\r\n    handlePersistorState = () => {\r\n        const { persistor } = this.props;\r\n        let { bootstrapped } = persistor.getState();\r\n        console.log(\"🚀 ~ file: App.js:36 ~ App ~ bootstrapped:\", bootstrapped)\r\n        if (bootstrapped) {\r\n            if (this.props.onBeforeLift) {\r\n                Promise.resolve(this.props.onBeforeLift())\r\n                    .then(() => this.setState({ bootstrapped: true }))\r\n                    .catch(() => this.setState({ bootstrapped: true }));\r\n            } else {\r\n                this.setState({ bootstrapped: true });\r\n            }\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.handlePersistorState();\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, preState, snapshot) {\r\n        if (this.props.isLoggedIn !== prevProps.isLoggedIn) {\r\n            if (this.props.isLoggedIn && this.props.userInfo && this.props.userInfo.roleId) {\r\n                this.setState({\r\n                    roleId: this.props.userInfo.roleId\r\n                })\r\n            } else if (!this.props.isLoggedIn) {\r\n                this.setState({\r\n                    roleId: ''\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { roleId } = this.state\r\n        return (\r\n            // <IntlProviderWrapper>\r\n            <Fragment>\r\n                <Router history={history}>\r\n                    <div className=\"main-container\">\r\n                        {/* {this.props.isLoggedIn && <Header />} */}\r\n                        <div className=\"content-container\" style={{ height: '100vh', width: '100%' }}>\r\n                            <CustomScrollbars>\r\n                                <Switch>\r\n                                    {/* {roleId && roleId === 'R1' && <Route path={path.SYSTEM} component={userIsAuthenticated(System)} />} */}\r\n\r\n                                    <Route path={path.HOME} exact component={Home} />\r\n                                    {roleId === '' && <Route path={path.LOGIN} component={Login} />}\r\n                                    {/* <Route path={path.LOGIN} component={UserIsNotAuthenticatedAndAdminRole(Login)} /> */}\r\n                                    {roleId && roleId === 'R1' && <Route path={path.LOGIN} component={UserIsNotAuthenticatedAndAdminRole(Login)} />}\r\n                                    {roleId && roleId === 'R2' && <Route path={path.LOGIN} component={UserIsNotAuthenticatedAndDoctorRole(Login)} />}\r\n\r\n                                    <Route path={path.SYSTEM} component={userIsAuthenticated(System)} />\r\n                                    <Route path={'/doctor'} component={userIsAuthenticated(Doctor)} />\r\n                                    <Route path={path.HOMEPAGE} component={HomePage} />\r\n                                    <Route path={path.DETAIL_DOCTOR} component={DetailDoctor} />\r\n                                    <Route path={path.DETAIL_SPECIALTY} component={DetailSpecialty} />\r\n                                    <Route path={path.DETAIL_CLINIC} component={DetailClinic} />\r\n                                    <Route path={path.VERIFY_EMAIL_BOOKING} component={VerifyEmail} />\r\n                                    <Route path={path.PAYMENT} component={Payment} />\r\n                                </Switch>\r\n                            </CustomScrollbars>\r\n                        </div>\r\n                        {/* \r\n                        <ToastContainer\r\n                            className=\"toast-container\" toastClassName=\"toast-item\" bodyClassName=\"toast-item-body\"\r\n                            autoClose={false} hideProgressBar={true} pauseOnHover={false}\r\n                            pauseOnFocusLoss={true} closeOnClick={false} draggable={false}\r\n                            closeButton={<CustomToastCloseButton />}\r\n                        /> */}\r\n                        <ToastContainer\r\n                            position=\"bottom-right\"\r\n                            autoClose={5000}\r\n                            hideProgressBar={false}\r\n                            newestOnTop={false}\r\n                            closeOnClick\r\n                            rtl={false}\r\n                            pauseOnFocusLoss\r\n                            draggable\r\n                            pauseOnHover\r\n                            theme=\"light\"\r\n                        />\r\n                    </div>\r\n                </Router>\r\n            </Fragment>\r\n            // </IntlProviderWrapper>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        started: state.app.started,\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        userInfo: state.user.userInfo\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './styles/styles.scss';\r\n\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport IntlProviderWrapper from \"./hoc/IntlProviderWrapper\";\r\n\r\n\r\nimport { Provider } from 'react-redux';\r\nimport reduxStore, { persistor } from './redux';\r\n\r\nconst renderApp = () => {\r\n    ReactDOM.render(\r\n        <Provider store={reduxStore}>\r\n            <IntlProviderWrapper>\r\n                <App persistor={persistor} />\r\n            </IntlProviderWrapper>\r\n        </Provider>,\r\n        document.getElementById('root')\r\n    );\r\n};\r\n\r\nrenderApp();\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export default __webpack_public_path__ + \"static/media/logo.2e2d78c9.svg\";","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport './HomeHeader.scss';\r\nimport logo from '../../assets/logo.svg'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport { LANGUAGES } from \"../../utils\"\r\nimport { changeLanguageApp } from \"../../store/actions\"\r\nimport { lang } from 'moment/moment';\r\nimport { withRouter } from 'react-router'\r\n\r\nclass HomeHeader extends Component {\r\n    changeLanguage = (language) => {\r\n        this.props.changeLanguageAppRedux(language);\r\n    }\r\n    returnToHome = () => {\r\n        if (this.props.history) {\r\n            this.props.history.push('/home')\r\n        }\r\n    }\r\n    render() {\r\n        let language = this.props.language;\r\n        return (\r\n            <React.Fragment>\r\n                <div className='home-header-container'>\r\n                    <div className='home-header-content'>\r\n                        <div className=\"left-content\">\r\n                            <i className=\"fas fa-bars\"></i>\r\n                            <img className='header-logo' src={logo} onClick={() => this.returnToHome()} />\r\n                        </div>\r\n                        <div className=\"center-content\">\r\n                            <div className='child-content'>\r\n                                <div><b><FormattedMessage id=\"homeheader.speciality\" /></b></div>\r\n                                <div className='subs-title'><FormattedMessage id=\"homeheader.searchdoctor\" /></div>\r\n                            </div>\r\n                            <div className='child-content'>\r\n                                <div><b><FormattedMessage id=\"homeheader.health-facility\" /></b></div>\r\n                                <div className='subs-title'><FormattedMessage id=\"homeheader.select-room\" /></div>\r\n                            </div>\r\n                            <div className='child-content'>\r\n                                <div><b><FormattedMessage id=\"homeheader.doctor\" /></b></div>\r\n                                <div><FormattedMessage id=\"homeheader.select-doctor\" /></div>\r\n                            </div>\r\n                            <div className='child-content'>\r\n                                <div><b><FormattedMessage id=\"homeheader.fee\" /></b></div>\r\n                                <div className='subs-title'><FormattedMessage id=\"homeheader.check-health\" /></div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"right-content\">\r\n                            <div className='support'><i className=\"fas fa-question-circle\"></i><FormattedMessage id=\"homeheader.support\" /></div>\r\n                            <div className={language === LANGUAGES.VI ? 'language-vi active' : 'language-vi'}><span onClick={() => this.changeLanguage(LANGUAGES.VI)}>VN</span></div>\r\n                            <div className={language === LANGUAGES.EN ? 'language-en active' : 'language-en'}><span onClick={() => this.changeLanguage(LANGUAGES.EN)}>EN</span></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {this.props.isShowBanner == true &&\r\n                    <div className='home-header-banner'>\r\n                        <div className='content-up'>\r\n                            <div className='title1'><FormattedMessage id=\"banner.title1\" /></div>\r\n                            <div className='title2'><FormattedMessage id=\"banner.title2\" /></div>\r\n                            <div className='search'>\r\n                                <i className=\"fas fa-search\"></i>\r\n                                <input type='text' placeholder='Tìm chuyên khoa khám bệnh' />\r\n                            </div>\r\n                        </div>\r\n                        <div className='content-down'>\r\n                            <div className='options'>\r\n                                <div className='option-child'>\r\n                                    <div className='icon-child'><i className=\"far fa-hospital\"></i></div>\r\n                                    <div className='text-child'><FormattedMessage id=\"banner.child1\" /></div>\r\n                                </div>\r\n                                <div className='option-child'>\r\n                                    <div className='icon-child'><i className=\"fas fa-mobile-alt\"></i></div>\r\n                                    <div className='text-child'><FormattedMessage id=\"banner.child2\" /></div>\r\n                                </div>\r\n                                <div className='option-child'>\r\n                                    <div className='icon-child'><i className=\"fas fa-procedures\"></i></div>\r\n                                    <div className='text-child'><FormattedMessage id=\"banner.child3\" /></div>\r\n                                </div>\r\n                                <div className='option-child'>\r\n                                    <div className='icon-child'><i className=\"fas fa-flask\"></i></div>\r\n                                    <div className='text-child'><FormattedMessage id=\"banner.child4\" /></div>\r\n                                </div>\r\n                                <div className='option-child'>\r\n                                    <div className='icon-child'><i className=\"fas fa-user-md\"></i></div>\r\n                                    <div className='text-child'><FormattedMessage id=\"banner.child5\" /></div>\r\n                                </div>\r\n                                <div className='option-child'>\r\n                                    <div className='icon-child'><i className=\"fas fa-briefcase-medical\"></i></div>\r\n                                    <div className='text-child'><FormattedMessage id=\"banner.child6\" /></div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </React.Fragment >\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n        userInfor: state.user.userInfo\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeLanguageAppRedux: (language) => dispatch(changeLanguageApp(language))\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(HomeHeader));\r\n","import React, { Component, Fragment } from 'react';\r\nimport { FormattedMessage, FormattedTime } from 'react-intl';\r\n\r\nimport CustomScrollBar from '../components/CustomScrollbars';\r\n\r\nimport './CustomToast.scss';\r\n\r\nclass CustomToast extends Component {\r\n\r\n    render() {\r\n        const { titleId, message, messageId, time } = this.props;\r\n        return (\r\n            <Fragment>\r\n                <div className=\"custom-toast\">\r\n                    <div className=\"toast-title\">\r\n                        {time && (\r\n                            <span className=\"date\">\r\n                                <FormattedTime hour='numeric' minute='numeric' second='numeric' hour12={true} value={time} />\r\n                            </span>\r\n                        )}\r\n                        <i className=\"fa fa-fw fa-exclamation-triangle\" />\r\n                        <FormattedMessage id={titleId} />\r\n                    </div>\r\n                    {\r\n                        (message && typeof message === 'object') ?\r\n                            <CustomScrollBar autoHeight={true} autoHeightMin={50} autoHeightMax={100}>\r\n                                {\r\n                                    message.map((msg, index) => {\r\n                                        return (\r\n                                            <Fragment key={index}>\r\n                                                <div className=\"toast-content\">{msg}</div>\r\n                                            </Fragment>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </CustomScrollBar> :\r\n                            <div className=\"toast-content\">\r\n                                {message ? message : (messageId ? (<FormattedMessage id={messageId} />) : null)}\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport class CustomToastCloseButton extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <button type=\"button\" className=\"toast-close\" onClick={this.props.closeToast}>\r\n                <i className=\"fa fa-fw fa-times-circle\" />\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CustomToast;","import React, { Component } from 'react';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nimport './CustomScrollbars.scss';\r\n\r\nclass CustomScrollbars extends Component {\r\n\r\n    ref = React.createRef();\r\n\r\n    getScrollLeft =()=>{\r\n        const scrollbars = this.ref.current;\r\n        return scrollbars.getScrollLeft();\r\n    }\r\n    getScrollTop =()=>{\r\n        const scrollbars = this.ref.current;\r\n        return scrollbars.getScrollTop();\r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        if (!this.ref || !this.ref.current) {\r\n            return;\r\n        }\r\n        const scrollbars = this.ref.current;\r\n        const targetScrollTop = scrollbars.getScrollHeight();\r\n        this.scrollTo(targetScrollTop);\r\n    };\r\n\r\n    scrollTo = (targetTop) => {\r\n        const { quickScroll } = this.props;\r\n        if (!this.ref || !this.ref.current) {\r\n            return;\r\n        }\r\n        const scrollbars = this.ref.current;\r\n        const originalTop = scrollbars.getScrollTop();\r\n        let iteration = 0;\r\n\r\n        const scroll = () => {\r\n            iteration++;\r\n            if (iteration > 30) {\r\n                return;\r\n            }\r\n            scrollbars.scrollTop(originalTop + (targetTop - originalTop) / 30 * iteration);\r\n\r\n            if (quickScroll && quickScroll === true) {\r\n                scroll();\r\n            } else {\r\n                setTimeout(() => {\r\n                    scroll();\r\n                }, 20);\r\n            }\r\n        };\r\n\r\n        scroll();\r\n    };\r\n\r\n    renderTrackHorizontal = (props) => {\r\n        return (\r\n            <div {...props} className=\"track-horizontal\" />\r\n        );\r\n    };\r\n\r\n    renderTrackVertical = (props) => {\r\n        return (\r\n            <div {...props} className=\"track-vertical\" />\r\n        );\r\n    };\r\n\r\n    renderThumbHorizontal = (props) => {\r\n        return (\r\n            <div {...props} className=\"thumb-horizontal\" />\r\n        );\r\n    };\r\n\r\n    renderThumbVertical = (props) => {\r\n        return (\r\n            <div {...props} className=\"thumb-vertical\" />\r\n        );\r\n    };\r\n\r\n    renderNone = (props) => {\r\n        return (\r\n            <div />\r\n        );\r\n    };\r\n\r\n    render() {\r\n        const { className, disableVerticalScroll, disableHorizontalScroll, children,...otherProps } = this.props;\r\n        return (\r\n            <Scrollbars\r\n                ref={this.ref}\r\n                autoHide={true}\r\n                autoHideTimeout={200}\r\n                hideTracksWhenNotNeeded={true}\r\n                className={className ? className + ' custom-scrollbar' : 'custom-scrollbar'}\r\n                {...otherProps}\r\n                renderTrackHorizontal={disableHorizontalScroll ? this.renderNone : this.renderTrackHorizontal}\r\n                renderTrackVertical={disableVerticalScroll ? this.renderNone : this.renderTrackVertical}\r\n                renderThumbHorizontal={disableHorizontalScroll ? this.renderNone : this.renderThumbHorizontal}\r\n                renderThumbVertical={disableVerticalScroll ? this.renderNone : this.renderThumbVertical}\r\n            >\r\n                {children}\r\n            </Scrollbars>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CustomScrollbars;"],"sourceRoot":""}